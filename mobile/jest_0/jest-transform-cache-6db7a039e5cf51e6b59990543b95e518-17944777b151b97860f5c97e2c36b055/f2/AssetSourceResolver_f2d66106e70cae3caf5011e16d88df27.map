{"version":3,"sources":["AssetSourceResolver.js"],"names":["PixelRatio","require","Platform","assetPathUtils","invariant","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","get","scaleSuffix","assetDir","getBasePath","name","type","getAssetPathInDrawableFolder","drawbleFolder","getAndroidResourceFolderName","fileName","getAndroidResourceIdentifier","serverUrl","jsbundleUrl","startsWith","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","path","source","__packager_asset","width","height","uri","deviceScale","i","length","module","exports"],"mappings":"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","file":"AssetSourceResolver.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule AssetSourceResolver\n * @flow\n * @format\n */\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from 'AssetRegistry';\n\nconst PixelRatio = require('PixelRatio');\nconst Platform = require('Platform');\n\nconst assetPathUtils = require('../../local-cli/bundle/assetPathUtils');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset): string {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var assetDir = assetPathUtils.getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset): string {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);\n  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(\n      assetPathUtils.getAndroidResourceIdentifier(this.asset),\n    );\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: Array<number>, deviceScale: number): number {\n    // Packager guarantees that `scales` array is sorted\n    for (var i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n\n    // If nothing matches, device scale is larger than any available\n    // scales, so we return the biggest one. Unless the array is empty,\n    // in which case we default to 1\n    return scales[scales.length - 1] || 1;\n  }\n}\n\nmodule.exports = AssetSourceResolver;\n"]}