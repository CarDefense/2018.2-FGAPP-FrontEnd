{"version":3,"sources":["FrameRateLogger.js"],"names":["NativeModules","require","invariant","FrameRateLogger","setGlobalOptions","options","debug","undefined","setContext","context","beginScroll","endScroll","module","exports"],"mappings":"AASA,aAEA,GAAMA,eAAgBC,OAAhB,iBAAN,CAEA,GAAMC,WAAYD,OAAZ,sBAAN,CAkBA,GAAME,iBAAkB,CAKtBC,iBAAkB,0BAASC,OAAT,CAAkE,CAClF,GAAIA,QAAQC,KAAR,GAAkBC,SAAtB,CAAiC,CAC/BL,UACEF,cAAcG,eADhB,CAEE,4DAFF,EAID,CACDH,cAAcG,eAAd,EAAiCH,cAAcG,eAAd,CAA8BC,gBAA9B,CAA+CC,OAA/C,CAAjC,CACD,CAbqB,CAmBtBG,WAAY,oBAASC,OAAT,CAA0B,CACpCT,cAAcG,eAAd,EAAiCH,cAAcG,eAAd,CAA8BK,UAA9B,CAAyCC,OAAzC,CAAjC,CACD,CArBqB,CA2BtBC,WA3BsB,uBA2BR,CACZV,cAAcG,eAAd,EAAiCH,cAAcG,eAAd,CAA8BO,WAA9B,EAAjC,CACD,CA7BqB,CAmCtBC,SAnCsB,qBAmCV,CACVX,cAAcG,eAAd,EAAiCH,cAAcG,eAAd,CAA8BQ,SAA9B,EAAjC,CACD,CArCqB,CAAxB,CAwCAC,OAAOC,OAAP,CAAiBV,eAAjB","file":"FrameRateLogger.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule FrameRateLogger\n * @flow\n */\n'use strict';\n\nconst NativeModules = require('NativeModules');\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Flow API for native FrameRateLogger module. If the native module is not installed, function calls\n * are just no-ops.\n *\n * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a\n * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the\n * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the\n * native module gathers up all it's frame drop data and reports it via an analytics pipeline for\n * analysis.\n *\n * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a\n * bug, but the native module should be robust to that.\n *\n * In the future we may add support for tracking frame drops in other types of interactions beyond\n * scrolling.\n */\nconst FrameRateLogger = {\n  /**\n   * Enable `debug` to see local logs of what's going on. `reportStackTraces` will grab stack traces\n   * during UI thread stalls and upload them if the native module supports it.\n   */\n  setGlobalOptions: function(options: {debug?: boolean, reportStackTraces?: boolean}) {\n    if (options.debug !== undefined) {\n      invariant(\n        NativeModules.FrameRateLogger,\n        'Trying to debug FrameRateLogger without the native module!',\n      );\n    }\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);\n  },\n\n  /**\n   * Must call `setContext` before any events can be properly tracked, which is done automatically\n   * in `AppRegistry`, but navigation is also a common place to hook in.\n   */\n  setContext: function(context: string) {\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  beginScroll() {\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  endScroll() {\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();\n  },\n};\n\nmodule.exports = FrameRateLogger;\n"]}