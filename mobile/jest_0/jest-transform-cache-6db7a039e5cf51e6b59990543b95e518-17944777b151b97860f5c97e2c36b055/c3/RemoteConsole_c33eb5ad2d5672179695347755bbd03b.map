{"version":3,"sources":["RemoteConsole.js"],"names":["createRemoteConsole","originalConsole","groupDepth","enhancedConsole","Object","create","_defineConsoleLogMethod","assert","condition","data","assertionMessage","length","push","unshift","_enqueueRemoteLog","group","groupCollapsed","groupEnd","shouldHide","name","level","__expoConsoleLog","additionalFields","RemoteLogging","enqueueRemoteLogAsync","catch","error"],"mappings":"yRAEA,8C,8IAQA,QAASA,oBAAT,CAA6BC,eAA7B,CAAgE,CAC9D,GAAIC,YAAa,CAAjB,CAGA,GAAMC,iBAA0BC,OAAOC,MAAP,CAAcJ,eAAd,CAAhC,CAKAK,wBAAwB,OAAxB,CAAiC,MAAjC,EAGAA,wBAAwB,KAAxB,CAA+B,MAA/B,EAGAA,wBAAwB,MAAxB,CAAgC,MAAhC,EAGAA,wBAAwB,MAAxB,CAAgC,MAAhC,EAGAA,wBAAwB,OAAxB,CAAiC,OAAjC,EAGAH,gBAAgBI,MAAhB,CAAyB,QAASA,OAAT,CAAgBC,SAAhB,CAA+D,+BAA1BC,IAA0B,iDAA1BA,IAA0B,0BACtF,GAAIR,gBAAgBM,MAApB,CAA4B,CAC1BN,gBAAgBM,MAAhB,wBAAuBC,SAAvB,SAAqCC,IAArC,GACD,CAED,GAAID,SAAJ,CAAe,CACb,OACD,CAED,GAAME,kBAAmB,kBAAzB,CACA,GAAI,CAACD,KAAKE,MAAV,CAAkB,CAChBF,KAAKG,IAAL,CAAUF,gBAAV,EACD,CAFD,IAEO,CACL,GAAI,MAAOD,MAAK,CAAL,CAAP,GAAmB,QAAvB,CAAiC,CAC/BA,KAAKI,OAAL,CAAaH,gBAAb,EACD,CAFD,IAEO,CACLD,KAAK,CAAL,EAAaC,gBAAb,MAAkCD,KAAK,CAAL,CAAlC,CACD,CACF,CAEDK,kBAAkB,OAAlB,CAA2B,EAA3B,CAA+BL,IAA/B,EACD,CArBD,CAwBAN,gBAAgBY,KAAhB,CAAwB,QAASA,MAAT,EAA4C,gCAA1BN,IAA0B,2CAA1BA,IAA0B,0BAClE,GAAIR,gBAAgBc,KAApB,CAA2B,CACzBd,gBAAgBc,KAAhB,uBAAyBN,IAAzB,EACD,CAEDK,kBAAkB,MAAlB,CAA0B,EAA1B,CAA8BL,IAA9B,EACAP,aACD,CAPD,CAUAC,gBAAgBa,cAAhB,CAAiC,QAASA,eAAT,EAAqD,gCAA1BP,IAA0B,2CAA1BA,IAA0B,0BACpF,GAAIR,gBAAgBe,cAApB,CAAoC,CAClCf,gBAAgBe,cAAhB,uBAAkCP,IAAlC,EACD,CAEDK,kBAAkB,MAAlB,CAA0B,CAAEE,eAAgB,IAAlB,CAA1B,CAAoDP,IAApD,EACAP,aACD,CAPD,CAUAC,gBAAgBc,QAAhB,CAA2B,QAASA,SAAT,EAA0B,CACnD,GAAIhB,gBAAgBgB,QAApB,CAA8B,CAC5BhB,gBAAgBgB,QAAhB,GACD,CAED,GAAIf,WAAa,CAAjB,CAAoB,CAClBA,aACD,CAEDY,kBAAkB,MAAlB,CAA0B,CAAEI,WAAY,IAAd,CAA1B,CAAgD,EAAhD,EACD,CAVD,CAgBA,QAASZ,wBAAT,CAAiCa,IAAjC,CAA+CC,KAA/C,CAAsE,CACpEjB,gBAAgBgB,IAAhB,EAAwB,QAASE,iBAAT,EAAuD,gCAA1BZ,IAA0B,2CAA1BA,IAA0B,0BAC7E,GAAIR,gBAAgBkB,IAAhB,CAAJ,CAA2B,CACzBlB,gBAAgBkB,IAAhB,wBAAyBV,IAAzB,EACD,CAEDK,kBAAkBM,KAAlB,CAAyB,EAAzB,CAA6BX,IAA7B,EACD,CAND,CAOD,CAQD,QAASK,kBAAT,CACEM,KADF,CAEEE,gBAFF,CAGEb,IAHF,CAIQ,CACNc,wBAAcC,qBAAd,CAAoCJ,KAApC,WAA6ClB,qBAA7C,EAA4DoB,gBAA5D,EAAgFb,IAAhF,EAAsFgB,KAAtF,CACE,eAAS,CACPxB,gBAAgByB,KAAhB,4EAEEA,KAFF,EAID,CANH,EAQD,CAED,MAAOvB,gBAAP,CACD,C,gBAEc,CACbH,uCADa,C","file":"RemoteConsole.js","sourcesContent":["// @flow\n\nimport RemoteLogging, { type LogLevel, type LogEntryFields } from './RemoteLogging';\n\ntype Console = typeof console;\n\n/**\n * Creates a console object that delegates calls to the specified underlying console and also sends\n * the messages to the development environment over a remote connection.\n */\nfunction createRemoteConsole(originalConsole: Console): Console {\n  let groupDepth = 0;\n\n  // $FlowIssue: Flow declares console's properties to read-only\n  const enhancedConsole: Object = Object.create(originalConsole);\n\n  // https://console.spec.whatwg.org/#debug\n  // Don't use a level below \"info\" because \"debug\" is intended for messages that shouldn't be shown\n  // to the developer\n  _defineConsoleLogMethod('debug', 'info');\n\n  // https://console.spec.whatwg.org/#log\n  _defineConsoleLogMethod('log', 'info');\n\n  // https://console.spec.whatwg.org/#info\n  _defineConsoleLogMethod('info', 'info');\n\n  // https://console.spec.whatwg.org/#warn\n  _defineConsoleLogMethod('warn', 'warn');\n\n  // https://console.spec.whatwg.org/#error\n  _defineConsoleLogMethod('error', 'error');\n\n  // https://console.spec.whatwg.org/#assert\n  enhancedConsole.assert = function assert(condition: mixed, ...data: Array<mixed>): void {\n    if (originalConsole.assert) {\n      originalConsole.assert(condition, ...data);\n    }\n\n    if (condition) {\n      return;\n    }\n\n    const assertionMessage = 'Assertion failed';\n    if (!data.length) {\n      data.push(assertionMessage);\n    } else {\n      if (typeof data[0] !== 'string') {\n        data.unshift(assertionMessage);\n      } else {\n        data[0] = `${assertionMessage}: ${data[0]}`;\n      }\n    }\n\n    _enqueueRemoteLog('error', {}, data);\n  };\n\n  // https://console.spec.whatwg.org/#group\n  enhancedConsole.group = function group(...data: Array<mixed>): void {\n    if (originalConsole.group) {\n      originalConsole.group(...data);\n    }\n\n    _enqueueRemoteLog('info', {}, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupcollapsed\n  enhancedConsole.groupCollapsed = function groupCollapsed(...data: Array<mixed>): void {\n    if (originalConsole.groupCollapsed) {\n      originalConsole.groupCollapsed(...data);\n    }\n\n    _enqueueRemoteLog('info', { groupCollapsed: true }, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupend\n  enhancedConsole.groupEnd = function groupEnd(): void {\n    if (originalConsole.groupEnd) {\n      originalConsole.groupEnd();\n    }\n\n    if (groupDepth > 0) {\n      groupDepth--;\n    }\n\n    _enqueueRemoteLog('info', { shouldHide: true }, []);\n  };\n\n  /**\n   * Defines a method in the `console.log()` family on the enhanced console\n   * instance\n   */\n  function _defineConsoleLogMethod(name: string, level: LogLevel): void {\n    enhancedConsole[name] = function __expoConsoleLog(...data: Array<mixed>): void {\n      if (originalConsole[name]) {\n        originalConsole[name](...data);\n      }\n\n      _enqueueRemoteLog(level, {}, data);\n    };\n  }\n\n  /**\n   * Schedules the given log entry to be sent remotely in a safe way that handles all errors. This\n   * function is responsible for error handling because the console methods are synchronous but\n   * sending log messages is asynchronous, so this code (instead of the console methods) needs to be\n   * responsible for asynchronous errors.\n   */\n  function _enqueueRemoteLog(\n    level: LogLevel,\n    additionalFields: LogEntryFields,\n    data: Array<mixed>\n  ): void {\n    RemoteLogging.enqueueRemoteLogAsync(level, { groupDepth, ...additionalFields }, data).catch(\n      error => {\n        originalConsole.error(\n          `There was a problem sending log messages to your development environment`,\n          error\n        );\n      }\n    );\n  }\n\n  return enhancedConsole;\n}\n\nexport default {\n  createRemoteConsole,\n};\n"]}