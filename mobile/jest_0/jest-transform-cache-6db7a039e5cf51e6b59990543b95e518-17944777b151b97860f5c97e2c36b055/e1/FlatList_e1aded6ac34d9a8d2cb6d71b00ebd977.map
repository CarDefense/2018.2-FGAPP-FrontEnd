{"version":3,"sources":["FlatList.js"],"names":["MetroListView","require","React","View","VirtualizedList","ListView","invariant","defaultProps","numColumns","FlatList","params","_listRef","scrollToEnd","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollableNode","props","setNativeProps","_checkProps","nextProps","onViewableItemsChanged","viewabilityConfig","viewabilityConfigCallbackPairs","_hasWarnedLegacy","_virtualizedListPairs","_captureRef","ref","_getItem","data","index","ret","kk","item","push","_getItemCount","Math","ceil","length","_keyExtractor","items","keyExtractor","Array","isArray","map","it","join","_renderItem","info","renderItem","columnWrapperStyle","flexDirection","element","separators","cloneElement","key","pair","_createOnViewableItemsChanged","getItem","getItemCount","horizontal","legacyImplementation","console","warn","arr","v","forEach","ii","changed","viewableItems","_pushMultiColumnViewable","PureComponent","module","exports"],"mappings":"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","file":"FlatList.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule FlatList\n * @flow\n * @format\n */\n'use strict';\n\nconst MetroListView = require('MetroListView'); // Used as a fallback legacy option\nconst React = require('React');\nconst View = require('View');\nconst VirtualizedList = require('VirtualizedList');\nconst ListView = require('ListView');\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type {DangerouslyImpreciseStyleProp} from 'StyleSheet';\nimport type {\n  ViewabilityConfig,\n  ViewToken,\n  ViewabilityConfigCallbackPair,\n} from 'ViewabilityHelper';\nimport type {Props as VirtualizedListProps} from 'VirtualizedList';\n\nexport type SeparatorsObj = {\n  highlight: () => void,\n  unhighlight: () => void,\n  updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n};\n\ntype RequiredProps<ItemT> = {\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem: (info: {\n    item: ItemT,\n    index: number,\n    separators: SeparatorsObj,\n  }) => ?React.Element<any>,\n  /**\n   * For simplicity, data is just a plain array. If you want to use something else, like an\n   * immutable list, use the underlying `VirtualizedList` directly.\n   */\n  data: ?$ReadOnlyArray<ItemT>,\n};\ntype OptionalProps<ItemT> = {\n  /**\n   * Rendered in between each item, but not at the top or bottom. By default, `highlighted` and\n   * `leadingItem` props are provided. `renderItem` provides `separators.highlight`/`unhighlight`\n   * which will update the `highlighted` prop, but you can also add custom props with\n   * `separators.updateProps`.\n   */\n  ItemSeparatorComponent?: ?React.ComponentType<any>,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: DangerouslyImpreciseStyleProp,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?Array<ItemT>,\n    index: number,\n  ) => {length: number, offset: number, index: number},\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor: (item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   */\n  numColumns: number,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  /**\n   * How far from the end (in units of visible length of the list) the bottom edge of the\n   * list must be from the end of the content to trigger the `onEndReached` callback.\n   * Thus a value of 0.5 will trigger `onEndReached` when the end of the content is\n   * within half the visible length of the list.\n   */\n  onEndReachedThreshold?: ?number,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?() => void,\n  /**\n   * Called when the viewability of rows changes, as defined by the `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  legacyImplementation?: ?boolean,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ViewabilityHelper` for flow type and further documentation.\n   */\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * List of ViewabilityConfig/onViewableItemsChanged pairs. A specific onViewableItemsChanged\n   * will be called when its corresponding ViewabilityConfig's conditions are met.\n   */\n  viewabilityConfigCallbackPairs?: Array<ViewabilityConfigCallbackPair>,\n};\nexport type Props<ItemT> = RequiredProps<ItemT> &\n  OptionalProps<ItemT> &\n  VirtualizedListProps;\n\nconst defaultProps = {\n  ...VirtualizedList.defaultProps,\n  numColumns: 1,\n};\nexport type DefaultProps = typeof defaultProps;\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  static defaultProps: DefaultProps = defaultProps;\n  props: Props<ItemT>;\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder() {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: Object) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  UNSAFE_componentWillMount() {\n    this._checkProps(this.props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props<ItemT>) {\n    invariant(\n      nextProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    invariant(\n      nextProps.onViewableItemsChanged === this.props.onViewableItemsChanged,\n      'Changing onViewableItemsChanged on the fly is not supported',\n    );\n    invariant(\n      nextProps.viewabilityConfig === this.props.viewabilityConfig,\n      'Changing viewabilityConfig on the fly is not supported',\n    );\n    invariant(\n      nextProps.viewabilityConfigCallbackPairs ===\n        this.props.viewabilityConfigCallbackPairs,\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\n    );\n\n    this._checkProps(nextProps);\n  }\n\n  constructor(props: Props<*>) {\n    super(props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\n            pair.onViewableItemsChanged,\n          ),\n        }),\n      );\n    } else if (this.props.onViewableItemsChanged) {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      this._virtualizedListPairs.push({\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\n          this.props.onViewableItemsChanged,\n        ),\n      });\n    }\n  }\n\n  _hasWarnedLegacy = false;\n  _listRef: null | VirtualizedList | ListView;\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\n\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n\n  _checkProps(props: Props<ItemT>) {\n    const {\n      getItem,\n      getItemCount,\n      horizontal,\n      legacyImplementation,\n      numColumns,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs,\n    } = props;\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    if (legacyImplementation) {\n      invariant(\n        numColumns === 1,\n        'Legacy list does not support multiple columns.',\n      );\n      // Warning: may not have full feature parity and is meant more for debugging and performance\n      // comparison.\n      if (!this._hasWarnedLegacy) {\n        console.warn(\n          'FlatList: Using legacyImplementation - some features not supported and performance ' +\n            'may suffer',\n        );\n        this._hasWarnedLegacy = true;\n      }\n    }\n    invariant(\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\n      'FlatList does not support setting both onViewableItemsChanged and ' +\n        'viewabilityConfigCallbackPairs.',\n    );\n  }\n\n  _getItem = (data: Array<ItemT>, index: number) => {\n    const {numColumns} = this.props;\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const item = data[index * numColumns + kk];\n        item && ret.push(item);\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?Array<ItemT>): number => {\n    return data ? Math.ceil(data.length / this.props.numColumns) : 0;\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number) => {\n    const {keyExtractor, numColumns} = this.props;\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((it, kk) => keyExtractor(it, index * numColumns + kk))\n        .join(':');\n    } else {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      return keyExtractor(items, index);\n    }\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const {numColumns, keyExtractor} = this.props;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _createOnViewableItemsChanged(\n    onViewableItemsChanged: ?(info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n  ) {\n    return (info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => {\n      const {numColumns} = this.props;\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed = [];\n          const viewableItems = [];\n          info.viewableItems.forEach(v =>\n            this._pushMultiColumnViewable(viewableItems, v),\n          );\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({viewableItems, changed});\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n\n  _renderItem = (info: Object) => {\n    const {renderItem, numColumns, columnWrapperStyle} = this.props;\n    if (numColumns > 1) {\n      const {item, index} = info;\n      invariant(\n        Array.isArray(item),\n        'Expected array of items with numColumns > 1',\n      );\n      return (\n        <View style={[{flexDirection: 'row'}, columnWrapperStyle]}>\n          {item.map((it, kk) => {\n            const element = renderItem({\n              item: it,\n              index: index * numColumns + kk,\n              separators: info.separators,\n            });\n            return element && React.cloneElement(element, {key: kk});\n          })}\n        </View>\n      );\n    } else {\n      return renderItem(info);\n    }\n  };\n\n  render() {\n    if (this.props.legacyImplementation) {\n      return (\n        /* $FlowFixMe(>=0.66.0 site=react_native_fb) This comment suppresses an\n         * error found when Flow v0.66 was deployed. To see the error delete\n         * this comment and run Flow. */\n        <MetroListView\n          {...this.props}\n          /* $FlowFixMe(>=0.66.0 site=react_native_fb) This comment suppresses\n           * an error found when Flow v0.66 was deployed. To see the error\n           * delete this comment and run Flow. */\n          items={this.props.data}\n          ref={this._captureRef}\n        />\n      );\n    } else {\n      return (\n        <VirtualizedList\n          {...this.props}\n          renderItem={this._renderItem}\n          getItem={this._getItem}\n          getItemCount={this._getItemCount}\n          keyExtractor={this._keyExtractor}\n          ref={this._captureRef}\n          viewabilityConfigCallbackPairs={this._virtualizedListPairs}\n        />\n      );\n    }\n  }\n}\n\nmodule.exports = FlatList;\n"]}