ef531249a76b7489edeb89ffb7eacbdc
Object.defineProperty(exports,"__esModule",{value:true});exports.default=undefined;var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=require('react');var _react2=_interopRequireDefault(_react);var _reactNative=require('react-native');var _jwtDecode=require('jwt-decode');var _jwtDecode2=_interopRequireDefault(_jwtDecode);var _Const=require('./TabNavigator/const/Const.js');var _expo=require('expo');var _expo2=_interopRequireDefault(_expo);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var tk;function register(){var _ref,status,value;return regeneratorRuntime.async(function register$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return regeneratorRuntime.awrap(_expo2.default.Permissions.askAsync(_expo2.default.Permissions.NOTIFICATIONS));case 2:_ref=_context.sent;status=_ref.status;if(!(status!='granted')){_context.next=7;break;}alert('You need to enable permissions in settings');return _context.abrupt('return');case 7:_context.next=9;return regeneratorRuntime.awrap(_expo2.default.Notifications.getExpoPushTokenAsync());case 9:value=_context.sent;tk=value;console.log(status,value);case 12:case'end':return _context.stop();}}},null,this);}var Feed=function(_React$Component){_inherits(Feed,_React$Component);_createClass(Feed,[{key:'componentWillMount',value:function componentWillMount(){register();this.listener=_expo2.default.Notifications.addListener(this.listen);}},{key:'componentWillUnmount',value:function componentWillUnmount(){this.listener&&_expo2.default.Notifications.addListener(this.listen);}}]);function Feed(props){_classCallCheck(this,Feed);var _this=_possibleConstructorReturn(this,(Feed.__proto__||Object.getPrototypeOf(Feed)).call(this,props));_this.listen=function(_ref2){var origin=_ref2.origin,data=_ref2.data;console.log('cool data',origin,data);};_this.sendIdData=function(){var state=_this.props.navigation.state;var token=state.params?state.params.token:undefined;console.log(token);user=(0,_jwtDecode2.default)(token);console.log(token);var notification=JSON.stringify({id_token:user.user_id,notification_token:tk});console.log(notification);fetch(_Const.PROFILE_API+'/set_token/',{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:notification}).then(function(response){return response.json();}).then(function(jsonResponse){console.log(jsonResponse);}).catch(function(error){console.log(error);});};_this.getFeedInfo=function(){return fetch(_Const.NOTIFICATIONS_API+'/emergencynotifications/').then(function(response){return response.json();}).then(function(responseJson){_this.setState({isLoading:false,dataSource:responseJson},function(){});}).catch(function(error){console.error(error);});};_this._onRefresh=function(){_this.setState({refreshing:true});_this.componentDidMount().then(function(){_this.setState({refreshing:false});});};_this.state={refreshing:false};return _this;}_createClass(Feed,[{key:'componentDidMount',value:function componentDidMount(){return regeneratorRuntime.async(function componentDidMount$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:this.sendIdData();this.getFeedInfo();case 2:case'end':return _context2.stop();}}},null,this);}},{key:'render',value:function render(){return _react2.default.createElement(_reactNative.ScrollView,{style:styles.item,refreshControl:_react2.default.createElement(_reactNative.RefreshControl,{refreshing:this.state.refreshing,onRefresh:this._onRefresh})},_react2.default.createElement(_reactNative.FlatList,{data:this.state.dataSource,renderItem:function renderItem(_ref3){var item=_ref3.item;return _react2.default.createElement(_reactNative.View,{style:styles.item2},_react2.default.createElement(_reactNative.Text,{style:styles.text1},item.title),_react2.default.createElement(_reactNative.Image,{source:{uri:item.image},style:{width:400,height:200}}),_react2.default.createElement(_reactNative.Text,{style:styles.text},item.message));},keyExtractor:function keyExtractor(_ref4,index){var id=_ref4.id;return id;}}));}}]);return Feed;}(_react2.default.Component);exports.default=Feed;var styles=_reactNative.StyleSheet.create({item:{backgroundColor:"#ffffff",margin:4,shadowColor:"#000000",shadowOpacity:0.8,shadowRadius:2,shadowOffset:{height:1,width:1},elevation:4},item2:{alignItems:"center",justifyContent:'center',backgroundColor:"#ffffff",flexGrow:1,margin:4,padding:20,borderRadius:10,shadowColor:"#000000",shadowOpacity:0.8,shadowRadius:2,shadowOffset:{height:1,width:1},elevation:4},text:{color:"#540b71",fontWeight:'100'},text1:{color:"#540b71",fontWeight:'bold'}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,