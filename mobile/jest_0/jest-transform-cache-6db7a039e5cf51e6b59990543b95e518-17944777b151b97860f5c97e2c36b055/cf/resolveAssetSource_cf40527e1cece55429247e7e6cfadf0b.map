{"version":3,"sources":["resolveAssetSource.js"],"names":["AssetRegistry","require","AssetSourceResolver","_customSourceTransformer","_serverURL","_scriptURL","_sourceCodeScriptURL","getDevServerURL","undefined","match","_coerceLocalScriptURL","scriptURL","startsWith","substring","lastIndexOf","includes","getScriptURL","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","getAssetByID","resolver","defaultAsset","sourceCode","global","nativeExtensions","SourceCode","NativeModules","module","exports","pickScale"],"mappings":"AAWA,aAEA,GAAMA,eAAgBC,OAAhB,iBAAN,CACA,GAAMC,qBAAsBD,OAAtB,uBAAN,CAIA,GAAIE,gCAAJ,CAA8BC,iBAA9B,CAA0CC,iBAA1C,CACA,GAAIC,4BAAJ,CAEA,QAASC,gBAAT,EAAoC,CAClC,GAAIH,aAAeI,SAAnB,CAA8B,CAC5B,GAAMC,OAAQH,sBAAwBA,qBAAqBG,KAArB,CAA2B,mBAA3B,CAAtC,CACA,GAAIA,KAAJ,CAAW,CAETL,WAAaK,MAAM,CAAN,CAAb,CACD,CAHD,IAGO,CAELL,WAAa,IAAb,CACD,CACF,CACD,MAAOA,WAAP,CACD,CAED,QAASM,sBAAT,CAA+BC,SAA/B,CAA4D,CAC1D,GAAIA,SAAJ,CAAe,CACb,GAAIA,UAAUC,UAAV,CAAqB,WAArB,CAAJ,CAAuC,CAErC,MAAO,KAAP,CACD,CACDD,UAAYA,UAAUE,SAAV,CAAoB,CAApB,CAAuBF,UAAUG,WAAV,CAAsB,GAAtB,EAA6B,CAApD,CAAZ,CACA,GAAI,CAACH,UAAUI,QAAV,CAAmB,KAAnB,CAAL,CAAgC,CAG9BJ,UAAY,UAAYA,SAAxB,CACD,CACF,CACD,MAAOA,UAAP,CACD,CAED,QAASK,aAAT,EAAiC,CAC/B,GAAIX,aAAeG,SAAnB,CAA8B,CAC5BH,WAAaK,sBAAsBJ,oBAAtB,CAAb,CACD,CACD,MAAOD,WAAP,CACD,CAED,QAASY,2BAAT,CACEC,WADF,CAEQ,CACNf,yBAA2Be,WAA3B,CACD,CAMD,QAASC,mBAAT,CAA4BC,MAA5B,CAA+D,CAC7D,GAAI,MAAOA,OAAP,GAAkB,QAAtB,CAAgC,CAC9B,MAAOA,OAAP,CACD,CAED,GAAIC,OAAQrB,cAAcsB,YAAd,CAA2BF,MAA3B,CAAZ,CACA,GAAI,CAACC,KAAL,CAAY,CACV,MAAO,KAAP,CACD,CAED,GAAME,UAAW,GAAIrB,oBAAJ,CACfK,iBADe,CAEfS,cAFe,CAGfK,KAHe,CAAjB,CAKA,GAAIlB,wBAAJ,CAA8B,CAC5B,MAAOA,0BAAyBoB,QAAzB,CAAP,CACD,CACD,MAAOA,UAASC,YAAT,EAAP,CACD,CAED,GAAIC,YAAaC,OAAOC,gBAAP,EAA2BD,OAAOC,gBAAP,CAAwBC,UAApE,CACA,GAAI,CAACH,UAAL,CAAiB,CACf,GAAMI,eAAgB5B,OAAhB,iBAAN,CACAwB,WAAaI,eAAiBA,cAAcD,UAA5C,CACD,CACDtB,qBAAuBmB,YAAcA,WAAWd,SAAhD,CAEAmB,OAAOC,OAAP,CAAiBZ,kBAAjB,CACAW,OAAOC,OAAP,CAAeC,SAAf,CAA2B9B,oBAAoB8B,SAA/C,CACAF,OAAOC,OAAP,CAAed,0BAAf,CAA4CA,0BAA5C","file":"resolveAssetSource.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule resolveAssetSource\n * @flow\n *\n * Resolves an asset into a `source` for `Image`.\n */\n'use strict';\n\nconst AssetRegistry = require('AssetRegistry');\nconst AssetSourceResolver = require('AssetSourceResolver');\n\nimport type { ResolvedAssetSource } from 'AssetSourceResolver';\n\nlet _customSourceTransformer, _serverURL, _scriptURL;\nlet _sourceCodeScriptURL: ?string;\n\nfunction getDevServerURL(): ?string {\n  if (_serverURL === undefined) {\n    const match = _sourceCodeScriptURL && _sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: ?string): ?string {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return scriptURL;\n}\n\nfunction getScriptURL(): ?string {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(_sourceCodeScriptURL);\n  }\n  return _scriptURL;\n}\n\nfunction setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource,\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source: any): ?ResolvedAssetSource {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  var asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    getDevServerURL(),\n    getScriptURL(),\n    asset,\n  );\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nlet sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;\nif (!sourceCode) {\n  const NativeModules = require('NativeModules');\n  sourceCode = NativeModules && NativeModules.SourceCode;\n}\n_sourceCodeScriptURL = sourceCode && sourceCode.scriptURL;\n\nmodule.exports = resolveAssetSource;\nmodule.exports.pickScale = AssetSourceResolver.pickScale;\nmodule.exports.setCustomSourceTransformer = setCustomSourceTransformer;\n"]}