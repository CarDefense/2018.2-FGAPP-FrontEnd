{"version":3,"sources":["ViewabilityHelper.js"],"names":["invariant","require","ViewabilityHelper","config","viewAreaCoveragePercentThreshold","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","forEach","clearTimeout","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","first","last","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","createViewToken","onViewableItemsChanged","waitForInteraction","computeViewableItems","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","has","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max","module","exports"],"mappings":"AAUA,a,y/CAEA,GAAMA,WAAYC,OAAZ,sBAAN,C,GA2DMC,kB,YAUJ,4BAEE,IADAC,OACA,2DAD4B,CAACC,iCAAkC,CAAnC,CAC5B,8CAVFC,cAUE,CAVwB,KAUxB,MANFC,OAME,CANqB,GAAIC,IAAJ,EAMrB,MALFC,gBAKE,CALgC,EAKhC,MAJFC,cAIE,CAJuC,GAAIC,IAAJ,EAIvC,CACA,KAAKC,OAAL,CAAeR,MAAf,CACD,C,uEAKS,CACR,KAAKG,OAAL,CAAaM,OAAb,CAAqBC,YAArB,EACD,C,kEAMCC,S,CACAC,Y,CACAC,c,CACAC,e,CACAC,W,CACe,aAIX,KAAKP,OAJM,CAEbQ,2BAFa,SAEbA,2BAFa,CAGbf,gCAHa,SAGbA,gCAHa,CAKf,GAAMgB,cAAehB,kCAAoC,IAAzD,CACA,GAAMiB,0BAA2BD,aAC7BhB,gCAD6B,CAE7Be,2BAFJ,CAGAnB,UACEqB,0BAA4B,IAA5B,EACGF,6BAA+B,IAAhC,IACGf,kCAAoC,IADvC,CAFJ,CAIE,yFAJF,EAMA,GAAMkB,iBAAkB,EAAxB,CACA,GAAIR,YAAc,CAAlB,CAAqB,CACnB,MAAOQ,gBAAP,CACD,CACD,GAAIC,cAAe,CAAC,CAApB,CAnBe,SAoBOL,aAAe,CAACM,MAAO,CAAR,CAAWC,KAAMX,UAAY,CAA7B,CApBtB,CAoBRU,KApBQ,MAoBRA,KApBQ,CAoBDC,IApBC,MAoBDA,IApBC,CAqBfzB,UACEyB,KAAOX,SADT,CAEE,wBAA0BY,KAAKC,SAAL,CAAe,CAACT,uBAAD,CAAcJ,mBAAd,CAAf,CAF5B,EAIA,IAAK,GAAIc,KAAMJ,KAAf,CAAsBI,KAAOH,IAA7B,CAAmCG,KAAnC,CAA0C,CACxC,GAAMC,SAAUZ,gBAAgBW,GAAhB,CAAhB,CACA,GAAI,CAACC,OAAL,CAAc,CACZ,SACD,CACD,GAAMC,KAAMD,QAAQE,MAAR,CAAiBhB,YAA7B,CACA,GAAMiB,QAASF,IAAMD,QAAQI,MAA7B,CACA,GAAIH,IAAMd,cAAN,EAAwBgB,OAAS,CAArC,CAAwC,CACtCT,aAAeK,GAAf,CACA,GACEM,YACEd,YADF,CAEEC,wBAFF,CAGES,GAHF,CAIEE,MAJF,CAKEhB,cALF,CAMEa,QAAQI,MANV,CADF,CASE,CACAX,gBAAgBa,IAAhB,CAAqBP,GAArB,EACD,CACF,CAdD,IAcO,IAAIL,cAAgB,CAApB,CAAuB,CAC5B,MACD,CACF,CACD,MAAOD,gBAAP,CACD,C,0CAOCR,S,CACAC,Y,CACAC,c,CACAC,e,CACAmB,e,CACAC,sB,CAIAnB,W,CACM,gBACN,GACG,KAAKP,OAAL,CAAa2B,kBAAb,EAAmC,CAAC,KAAKjC,cAA1C,EACAS,YAAc,CADd,EAEA,CAACG,gBAAgB,CAAhB,CAHH,CAIE,CACA,OACD,CACD,GAAIK,iBAAkB,EAAtB,CACA,GAAIR,SAAJ,CAAe,CACbQ,gBAAkB,KAAKiB,oBAAL,CAChBzB,SADgB,CAEhBC,YAFgB,CAGhBC,cAHgB,CAIhBC,eAJgB,CAKhBC,WALgB,CAAlB,CAOD,CACD,GACE,KAAKV,gBAAL,CAAsByB,MAAtB,GAAiCX,gBAAgBW,MAAjD,EACA,KAAKzB,gBAAL,CAAsBgC,KAAtB,CAA4B,SAACC,CAAD,CAAIC,EAAJ,QAAWD,KAAMnB,gBAAgBoB,EAAhB,CAAjB,EAA5B,CAFF,CAGE,CAGA,OACD,CACD,KAAKlC,gBAAL,CAAwBc,eAAxB,CACA,GAAI,KAAKX,OAAL,CAAagC,eAAjB,CAAkC,CAChC,GAAMC,QAASC,WAAW,UAAM,CAC9B,MAAKvC,OAAL,CAAawC,MAAb,CAAoBF,MAApB,EACA,MAAKG,aAAL,CACEzB,eADF,CAEEe,sBAFF,CAGED,eAHF,EAKD,CAPc,CAOZ,KAAKzB,OAAL,CAAagC,eAPD,CAAf,CAQA,KAAKrC,OAAL,CAAa0C,GAAb,CAAiBJ,MAAjB,EACD,CAVD,IAUO,CACL,KAAKG,aAAL,CACEzB,eADF,CAEEe,sBAFF,CAGED,eAHF,EAKD,CACF,C,mEAKsB,CACrB,KAAK5B,gBAAL,CAAwB,EAAxB,CACD,C,6DAKmB,CAClB,KAAKH,cAAL,CAAsB,IAAtB,CACD,C,oDAGC4C,sB,CACAZ,sB,CACAD,e,CACA,iBAEAa,uBAAyBA,uBAAuBC,MAAvB,CAA8B,mBACrD,QAAK1C,gBAAL,CAAsB2C,QAAtB,CAA+BT,EAA/B,CADqD,EAA9B,CAAzB,CAGA,GAAMU,WAAY,KAAK3C,cAAvB,CACA,GAAM4C,WAAY,GAAI3C,IAAJ,CAChBuC,uBAAuBK,GAAvB,CAA2B,YAAM,CAC/B,GAAMC,UAAWnB,gBAAgBM,EAAhB,CAAoB,IAApB,CAAjB,CACA,MAAO,CAACa,SAASC,GAAV,CAAeD,QAAf,CAAP,CACD,CAHD,CADgB,CAAlB,CAOA,GAAME,SAAU,EAAhB,CACA,kBAA8BJ,SAA9B,4IAAyC,4LAA7BG,KAA6B,aAAxBD,SAAwB,UACvC,GAAI,CAACH,UAAUM,GAAV,CAAcF,IAAd,CAAL,CAAyB,CACvBC,QAAQtB,IAAR,CAAaoB,QAAb,EACD,CACF,CACD,mBAA8BH,SAA9B,mJAAyC,qMAA7BI,MAA6B,aAAxBD,UAAwB,UACvC,GAAI,CAACF,UAAUK,GAAV,CAAcF,KAAd,CAAL,CAAyB,CACvBC,QAAQtB,IAAR,aAAiBoB,SAAjB,EAA2BI,WAAY,KAAvC,IACD,CACF,CACD,GAAIF,QAAQxB,MAAR,CAAiB,CAArB,CAAwB,CACtB,KAAKxB,cAAL,CAAsB4C,SAAtB,CACAhB,uBAAuB,CACrBuB,cAAeC,MAAMC,IAAN,CAAWT,UAAUU,MAAV,EAAX,CADM,CAErBN,eAFqB,CAGrBO,kBAAmB,KAAKrD,OAHH,CAAvB,EAKD,CACF,C,iCAGH,QAASuB,YAAT,CACEd,YADF,CAEEC,wBAFF,CAGES,GAHF,CAIEE,MAJF,CAKEhB,cALF,CAMEiD,UANF,CAOW,CACT,GAAIC,mBAAmBpC,GAAnB,CAAwBE,MAAxB,CAAgChB,cAAhC,CAAJ,CAAqD,CACnD,MAAO,KAAP,CACD,CAFD,IAEO,CACL,GAAMmD,QAASC,kBAAkBtC,GAAlB,CAAuBE,MAAvB,CAA+BhB,cAA/B,CAAf,CACA,GAAMqD,SACJ,KAAOjD,aAAe+C,OAASnD,cAAxB,CAAyCmD,OAASF,UAAzD,CADF,CAEA,MAAOI,UAAWhD,wBAAlB,CACD,CACF,CAED,QAAS+C,kBAAT,CACEtC,GADF,CAEEE,MAFF,CAGEhB,cAHF,CAIU,CACR,GAAMsD,eAAgBC,KAAKC,GAAL,CAASxC,MAAT,CAAiBhB,cAAjB,EAAmCuD,KAAKE,GAAL,CAAS3C,GAAT,CAAc,CAAd,CAAzD,CACA,MAAOyC,MAAKE,GAAL,CAAS,CAAT,CAAYH,aAAZ,CAAP,CACD,CAED,QAASJ,mBAAT,CACEpC,GADF,CAEEE,MAFF,CAGEhB,cAHF,CAIW,CACT,MAAOc,MAAO,CAAP,EAAYE,QAAUhB,cAAtB,EAAwCgB,OAASF,GAAxD,CACD,CAED4C,OAAOC,OAAP,CAAiBzE,iBAAjB","file":"ViewabilityHelper.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ViewabilityHelper\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n};\n\nexport type ViewabilityConfigCallbackPair = {\n  viewabilityConfig: ViewabilityConfig,\n  onViewableItemsChanged: (info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an error\n   * found when Flow v0.63 was deployed. To see the error delete this comment\n   * and run Flow. */\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): Array<number> {\n    const {\n      itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold,\n    } = this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    invariant(\n      last < itemCount,\n      'Invalid render range ' + JSON.stringify({renderRange, itemCount}),\n    );\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = getFrameMetrics(idx);\n      if (!metrics) {\n        continue;\n      }\n      const top = metrics.offset - scrollOffset;\n      const bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    createViewToken: (index: number, isViewable: boolean) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): void {\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !getFrameMetrics(0)\n    ) {\n      return;\n    }\n    let viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        itemCount,\n        scrollOffset,\n        viewportHeight,\n        getFrameMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle = setTimeout(() => {\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    viewableIndicesToCheck,\n    onViewableItemsChanged,\n    createViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"]}