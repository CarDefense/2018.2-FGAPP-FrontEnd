a67fb9d7af877607105dad61ce304324
Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);var _react=require('react');var _react2=_interopRequireDefault(_react);var _reactNative=require('react-native');var _package=require('react-native/package.json');var _package2=_interopRequireDefault(_package);var _line=require('../line');var _line2=_interopRequireDefault(_line);var _label=require('../label');var _label2=_interopRequireDefault(_label);var _affix=require('../affix');var _affix2=_interopRequireDefault(_affix);var _helper=require('../helper');var _helper2=_interopRequireDefault(_helper);var _counter=require('../counter');var _counter2=_interopRequireDefault(_counter);var _styles=require('./styles.js');var _styles2=_interopRequireDefault(_styles);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var TextField=function(_PureComponent){_inherits(TextField,_PureComponent);function TextField(props){_classCallCheck(this,TextField);var _this=_possibleConstructorReturn(this,(TextField.__proto__||Object.getPrototypeOf(TextField)).call(this,props));_this.onBlur=_this.onBlur.bind(_this);_this.onFocus=_this.onFocus.bind(_this);_this.onPress=_this.focus.bind(_this);_this.onChange=_this.onChange.bind(_this);_this.onChangeText=_this.onChangeText.bind(_this);_this.onContentSizeChange=_this.onContentSizeChange.bind(_this);_this.onFocusAnimationEnd=_this.onFocusAnimationEnd.bind(_this);_this.updateRef=_this.updateRef.bind(_this,'input');var _this$props=_this.props,value=_this$props.value,error=_this$props.error,fontSize=_this$props.fontSize;_this.mounted=false;_this.state={text:value,focus:new _reactNative.Animated.Value(_this.focusState(error,false)),focused:false,receivedFocus:false,error:error,errored:!!error,height:fontSize*1.5};return _this;}_createClass(TextField,[{key:'componentWillReceiveProps',value:function componentWillReceiveProps(props){var error=this.state.error;if(null!=props.value){this.setState({text:props.value});}if(props.error&&props.error!==error){this.setState({error:props.error});}if(props.error!==this.props.error){this.setState({errored:!!props.error});}}},{key:'componentDidMount',value:function componentDidMount(){this.mounted=true;}},{key:'componentWillUnmount',value:function componentWillUnmount(){this.mounted=false;}},{key:'componentWillUpdate',value:function componentWillUpdate(props,state){var _props=this.props,error=_props.error,duration=_props.animationDuration;var _state=this.state,focus=_state.focus,focused=_state.focused;if(props.error!==error||focused^state.focused){var toValue=this.focusState(props.error,state.focused);_reactNative.Animated.timing(focus,{toValue:toValue,duration:duration}).start(this.onFocusAnimationEnd);}}},{key:'updateRef',value:function updateRef(name,ref){this[name]=ref;}},{key:'focusState',value:function focusState(error,focused){return error?-1:focused?1:0;}},{key:'focus',value:function focus(){var _props2=this.props,disabled=_props2.disabled,editable=_props2.editable;if(!disabled&&editable){this.input.focus();}}},{key:'blur',value:function blur(){this.input.blur();}},{key:'clear',value:function clear(){this.input.clear();this.onChangeText('');}},{key:'value',value:function value(){var _state2=this.state,text=_state2.text,receivedFocus=_state2.receivedFocus;var _props3=this.props,value=_props3.value,defaultValue=_props3.defaultValue;return receivedFocus||null!=value||null==defaultValue?text:defaultValue;}},{key:'isFocused',value:function isFocused(){return this.input.isFocused();}},{key:'isRestricted',value:function isRestricted(){var characterRestriction=this.props.characterRestriction;var _state$text=this.state.text,text=_state$text===undefined?'':_state$text;return characterRestriction<text.length;}},{key:'onFocus',value:function onFocus(event){var _props4=this.props,onFocus=_props4.onFocus,clearTextOnFocus=_props4.clearTextOnFocus;if('function'===typeof onFocus){onFocus(event);}if(clearTextOnFocus){this.clear();}this.setState({focused:true,receivedFocus:true});}},{key:'onBlur',value:function onBlur(event){var onBlur=this.props.onBlur;if('function'===typeof onBlur){onBlur(event);}this.setState({focused:false});}},{key:'onChange',value:function onChange(event){var _props5=this.props,onChange=_props5.onChange,multiline=_props5.multiline;if('function'===typeof onChange){onChange(event);}if(multiline&&'android'===_reactNative.Platform.OS){if(/^0\.4[45]\./.test(_package2.default.version)){this.onContentSizeChange(event);}}}},{key:'onChangeText',value:function onChangeText(text){var onChangeText=this.props.onChangeText;this.setState({text:text});if('function'===typeof onChangeText){onChangeText(text);}}},{key:'onContentSizeChange',value:function onContentSizeChange(event){var _props6=this.props,onContentSizeChange=_props6.onContentSizeChange,fontSize=_props6.fontSize;var height=event.nativeEvent.contentSize.height;if('function'===typeof onContentSizeChange){onContentSizeChange(event);}this.setState({height:Math.max(fontSize*1.5,Math.ceil(height)+_reactNative.Platform.select({ios:5,android:1}))});}},{key:'onFocusAnimationEnd',value:function onFocusAnimationEnd(){if(this.mounted){this.setState(function(state,_ref){var error=_ref.error;return{error:error};});}}},{key:'renderAccessory',value:function renderAccessory(){var renderAccessory=this.props.renderAccessory;if('function'!==typeof renderAccessory){return null;}return _react2.default.createElement(_reactNative.View,{style:_styles2.default.accessory},renderAccessory());}},{key:'renderAffix',value:function renderAffix(type,active,focused){var _props7=this.props,affix=_props7[type],fontSize=_props7.fontSize,baseColor=_props7.baseColor,animationDuration=_props7.animationDuration,affixTextStyle=_props7.affixTextStyle;if(null==affix){return null;}var props={type:type,active:active,focused:focused,fontSize:fontSize,baseColor:baseColor,animationDuration:animationDuration};return _react2.default.createElement(_affix2.default,_extends({style:affixTextStyle},props),affix);}},{key:'render',value:function render(){var _state3=this.state,receivedFocus=_state3.receivedFocus,focus=_state3.focus,focused=_state3.focused,error=_state3.error,errored=_state3.errored,height=_state3.height,_state3$text=_state3.text,text=_state3$text===undefined?'':_state3$text;var _props8=this.props,inputStyleOverrides=_props8.style,label=_props8.label,title=_props8.title,value=_props8.value,defaultValue=_props8.defaultValue,limit=_props8.characterRestriction,editable=_props8.editable,disabled=_props8.disabled,disabledLineType=_props8.disabledLineType,disabledLineWidth=_props8.disabledLineWidth,animationDuration=_props8.animationDuration,fontSize=_props8.fontSize,titleFontSize=_props8.titleFontSize,labelFontSize=_props8.labelFontSize,labelHeight=_props8.labelHeight,labelPadding=_props8.labelPadding,inputContainerPadding=_props8.inputContainerPadding,labelTextStyle=_props8.labelTextStyle,titleTextStyle=_props8.titleTextStyle,tintColor=_props8.tintColor,baseColor=_props8.baseColor,textColor=_props8.textColor,errorColor=_props8.errorColor,lineWidth=_props8.lineWidth,activeLineWidth=_props8.activeLineWidth,containerStyle=_props8.containerStyle,inputContainerStyleOverrides=_props8.inputContainerStyle,clearTextOnFocus=_props8.clearTextOnFocus,props=_objectWithoutProperties(_props8,['style','label','title','value','defaultValue','characterRestriction','editable','disabled','disabledLineType','disabledLineWidth','animationDuration','fontSize','titleFontSize','labelFontSize','labelHeight','labelPadding','inputContainerPadding','labelTextStyle','titleTextStyle','tintColor','baseColor','textColor','errorColor','lineWidth','activeLineWidth','containerStyle','inputContainerStyle','clearTextOnFocus']);if(props.multiline&&props.height){height=props.height;}var defaultVisible=!(receivedFocus||null!=value||null==defaultValue);value=defaultVisible?defaultValue:text;var active=!!(value||props.placeholder);var count=value.length;var restricted=limit<count;var textAlign=_reactNative.I18nManager.isRTL?'right':'left';var borderBottomColor=restricted?errorColor:focus.interpolate({inputRange:[-1,0,1],outputRange:[errorColor,baseColor,tintColor]});var borderBottomWidth=restricted?activeLineWidth:focus.interpolate({inputRange:[-1,0,1],outputRange:[activeLineWidth,lineWidth,activeLineWidth]});var inputContainerStyle=_extends({paddingTop:labelHeight,paddingBottom:inputContainerPadding},disabled?{overflow:'hidden'}:{borderBottomColor:borderBottomColor,borderBottomWidth:borderBottomWidth},props.multiline?{height:'web'===_reactNative.Platform.OS?'auto':labelHeight+inputContainerPadding+height}:{height:labelHeight+inputContainerPadding+fontSize*1.5});var inputStyle=_extends({fontSize:fontSize,textAlign:textAlign,color:disabled||defaultVisible?baseColor:textColor},props.multiline?_extends({height:fontSize*1.5+height},_reactNative.Platform.select({ios:{top:-1},android:{textAlignVertical:'top'}})):{height:fontSize*1.5});var errorStyle={color:errorColor,opacity:focus.interpolate({inputRange:[-1,0,1],outputRange:[1,0,0]}),fontSize:title?titleFontSize:focus.interpolate({inputRange:[-1,0,1],outputRange:[titleFontSize,0,0]})};var titleStyle={color:baseColor,opacity:focus.interpolate({inputRange:[-1,0,1],outputRange:[0,1,1]}),fontSize:titleFontSize};var helperContainerStyle={flexDirection:'row',height:title||limit?titleFontSize*2:focus.interpolate({inputRange:[-1,0,1],outputRange:[titleFontSize*2,8,8]})};var containerProps={style:containerStyle,onStartShouldSetResponder:function onStartShouldSetResponder(){return true;},onResponderRelease:this.onPress,pointerEvents:!disabled&&editable?'auto':'none'};var inputContainerProps={style:[_styles2.default.inputContainer,inputContainerStyle,inputContainerStyleOverrides]};var lineProps={type:disabledLineType,width:disabledLineWidth,color:baseColor};var labelProps={baseSize:labelHeight,basePadding:labelPadding,fontSize:fontSize,activeFontSize:labelFontSize,tintColor:tintColor,baseColor:baseColor,errorColor:errorColor,animationDuration:animationDuration,active:active,focused:focused,errored:errored,restricted:restricted,style:labelTextStyle};var counterProps={baseColor:baseColor,errorColor:errorColor,count:count,limit:limit,fontSize:titleFontSize,style:titleTextStyle};return _react2.default.createElement(_reactNative.View,containerProps,_react2.default.createElement(_reactNative.Animated.View,inputContainerProps,disabled&&_react2.default.createElement(_line2.default,lineProps),_react2.default.createElement(_label2.default,labelProps,label),_react2.default.createElement(_reactNative.View,{style:_styles2.default.row},this.renderAffix('prefix',active,focused),_react2.default.createElement(_reactNative.TextInput,_extends({style:[_styles2.default.input,inputStyle,inputStyleOverrides],selectionColor:tintColor},props,{editable:!disabled&&editable,onChange:this.onChange,onChangeText:this.onChangeText,onContentSizeChange:this.onContentSizeChange,onFocus:this.onFocus,onBlur:this.onBlur,value:value,ref:this.updateRef})),this.renderAffix('suffix',active,focused),this.renderAccessory())),_react2.default.createElement(_reactNative.Animated.View,{style:helperContainerStyle},_react2.default.createElement(_reactNative.View,{style:_styles2.default.flex},_react2.default.createElement(_helper2.default,{style:[errorStyle,titleTextStyle]},error),_react2.default.createElement(_helper2.default,{style:[titleStyle,titleTextStyle]},title)),_react2.default.createElement(_counter2.default,counterProps)));}}]);return TextField;}(_react.PureComponent);TextField.defaultProps={underlineColorAndroid:'transparent',disableFullscreenUI:true,autoCapitalize:'sentences',editable:true,animationDuration:225,fontSize:16,titleFontSize:12,labelFontSize:12,labelHeight:32,labelPadding:4,inputContainerPadding:8,tintColor:'rgb(0, 145, 234)',textColor:'rgba(0, 0, 0, .87)',baseColor:'rgba(0, 0, 0, .38)',errorColor:'rgb(213, 0, 0)',lineWidth:_reactNative.StyleSheet.hairlineWidth,activeLineWidth:2,disabled:false,disabledLineType:'dotted',disabledLineWidth:1};TextField.propTypes=_extends({},_reactNative.TextInput.propTypes,{animationDuration:_propTypes2.default.number,fontSize:_propTypes2.default.number,titleFontSize:_propTypes2.default.number,labelFontSize:_propTypes2.default.number,labelHeight:_propTypes2.default.number,labelPadding:_propTypes2.default.number,inputContainerPadding:_propTypes2.default.number,labelTextStyle:_reactNative.Text.propTypes.style,titleTextStyle:_reactNative.Text.propTypes.style,affixTextStyle:_reactNative.Text.propTypes.style,tintColor:_propTypes2.default.string,textColor:_propTypes2.default.string,baseColor:_propTypes2.default.string,label:_propTypes2.default.string.isRequired,title:_propTypes2.default.string,characterRestriction:_propTypes2.default.number,error:_propTypes2.default.string,errorColor:_propTypes2.default.string,lineWidth:_propTypes2.default.number,activeLineWidth:_propTypes2.default.number,disabled:_propTypes2.default.bool,disabledLineType:_line2.default.propTypes.type,disabledLineWidth:_propTypes2.default.number,renderAccessory:_propTypes2.default.func,prefix:_propTypes2.default.string,suffix:_propTypes2.default.string,containerStyle:(_reactNative.ViewPropTypes||_reactNative.View.propTypes).style,inputContainerStyle:(_reactNative.ViewPropTypes||_reactNative.View.propTypes).style});exports.default=TextField;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,