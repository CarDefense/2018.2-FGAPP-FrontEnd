{"version":3,"sources":["AnimatedInterpolation.js"],"names":["AnimatedNode","require","AnimatedWithChildren","NativeAnimatedHelper","invariant","normalizeColor","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","int32Color","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","rounded","Math","round","String","startsWith","arr","pattern","name","AnimatedInterpolation","parent","_parent","_config","_interpolation","__makeNative","parentValue","__getValue","__addChild","__removeChild","test","degrees","parseFloat","radians","PI","__DEV__","validateInterpolation","__transformDataType","type","__createInterpolation","module","exports"],"mappings":"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","file":"AnimatedInterpolation.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule AnimatedInterpolation\n * @flow\n * @format\n */\n/* eslint no-bitwise: 0 */\n'use strict';\n\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nconst invariant = require('fbjs/lib/invariant');\nconst normalizeColor = require('normalizeColor');\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType = {\n  inputRange: Array<number>,\n  /* $FlowFixMe(>=0.38.0 site=react_native_fb,react_native_oss) - Flow error\n   * detected during the deployment of v0.38.0. To see the error, remove this\n   * comment and run flow\n   */\n  outputRange: Array<number> | Array<string>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n};\n\nconst linear = t => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation(\n  config: InterpolationConfigType,\n): (input: number) => number | string {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  const outputRange: Array<number> = (config.outputRange: any);\n  checkInfiniteRange('outputRange', outputRange);\n\n  const inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    );\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let int32Color = normalizeColor(input);\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n\n  const r = (int32Color & 0xff000000) >>> 24;\n  const g = (int32Color & 0x00ff0000) >>> 16;\n  const b = (int32Color & 0x0000ff00) >>> 8;\n  const a = (int32Color & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[0-9\\.-]+/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      const val = +interpolations[i++](input);\n      const rounded =\n        shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      return String(rounded);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: Array<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: Array<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: Array<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      arr[i] >= arr[i - 1],\n      /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n       * one or both of the operands may be something that doesn't cleanly\n       * convert to a string, like undefined, null, and object, etc. If you really\n       * mean this implicit string conversion, you can do something like\n       * String(myThing)\n       */\n      'inputRange must be monotonically increasing ' + arr,\n    );\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: Array<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly convert\n     * to a string, like undefined, null, and object, etc. If you really mean\n     * this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType;\n  _interpolation: (input: number) => number | string;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative() {\n    this._parent.__makeNative();\n    super.__makeNative();\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: Array<any>) {\n    // Change the string array type to number array\n    // So we can reuse the same logic in iOS and Android platform\n    return range.map(function(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n      if (/deg$/.test(value)) {\n        const degrees = parseFloat(value) || 0;\n        const radians = degrees * Math.PI / 180.0;\n        return radians;\n      } else {\n        // Assume radians\n        return parseFloat(value) || 0;\n      }\n    });\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n\nmodule.exports = AnimatedInterpolation;\n"]}