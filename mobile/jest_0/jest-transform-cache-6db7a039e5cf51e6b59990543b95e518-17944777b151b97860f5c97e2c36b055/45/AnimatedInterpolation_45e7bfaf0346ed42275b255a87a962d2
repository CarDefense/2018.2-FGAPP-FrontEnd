e6d574418b9ca39e86f63db16ec30b3b
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};var _class,_temp;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var AnimatedNode=require('./AnimatedNode');var AnimatedWithChildren=require('./AnimatedWithChildren');var NativeAnimatedHelper=require('../NativeAnimatedHelper');var invariant=require('fbjs/lib/invariant');var normalizeColor=require('normalizeColor');var linear=function linear(t){return t;};function createInterpolation(config){if(config.outputRange&&typeof config.outputRange[0]==='string'){return createInterpolationFromStringOutputRange(config);}var outputRange=config.outputRange;checkInfiniteRange('outputRange',outputRange);var inputRange=config.inputRange;checkInfiniteRange('inputRange',inputRange);checkValidInputRange(inputRange);invariant(inputRange.length===outputRange.length,'inputRange ('+inputRange.length+') and outputRange ('+outputRange.length+') must have the same length');var easing=config.easing||linear;var extrapolateLeft='extend';if(config.extrapolateLeft!==undefined){extrapolateLeft=config.extrapolateLeft;}else if(config.extrapolate!==undefined){extrapolateLeft=config.extrapolate;}var extrapolateRight='extend';if(config.extrapolateRight!==undefined){extrapolateRight=config.extrapolateRight;}else if(config.extrapolate!==undefined){extrapolateRight=config.extrapolate;}return function(input){invariant(typeof input==='number','Cannot interpolation an input which is not a number');var range=findRange(input,inputRange);return interpolate(input,inputRange[range],inputRange[range+1],outputRange[range],outputRange[range+1],easing,extrapolateLeft,extrapolateRight);};}function interpolate(input,inputMin,inputMax,outputMin,outputMax,easing,extrapolateLeft,extrapolateRight){var result=input;if(result<inputMin){if(extrapolateLeft==='identity'){return result;}else if(extrapolateLeft==='clamp'){result=inputMin;}else if(extrapolateLeft==='extend'){}}if(result>inputMax){if(extrapolateRight==='identity'){return result;}else if(extrapolateRight==='clamp'){result=inputMax;}else if(extrapolateRight==='extend'){}}if(outputMin===outputMax){return outputMin;}if(inputMin===inputMax){if(input<=inputMin){return outputMin;}return outputMax;}if(inputMin===-Infinity){result=-result;}else if(inputMax===Infinity){result=result-inputMin;}else{result=(result-inputMin)/(inputMax-inputMin);}result=easing(result);if(outputMin===-Infinity){result=-result;}else if(outputMax===Infinity){result=result+outputMin;}else{result=result*(outputMax-outputMin)+outputMin;}return result;}function colorToRgba(input){var int32Color=normalizeColor(input);if(int32Color===null){return input;}int32Color=int32Color||0;var r=(int32Color&0xff000000)>>>24;var g=(int32Color&0x00ff0000)>>>16;var b=(int32Color&0x0000ff00)>>>8;var a=(int32Color&0x000000ff)/255;return'rgba('+r+', '+g+', '+b+', '+a+')';}var stringShapeRegex=/[0-9\.-]+/g;function createInterpolationFromStringOutputRange(config){var outputRange=config.outputRange;invariant(outputRange.length>=2,'Bad output range');outputRange=outputRange.map(colorToRgba);checkPattern(outputRange);var outputRanges=outputRange[0].match(stringShapeRegex).map(function(){return[];});outputRange.forEach(function(value){value.match(stringShapeRegex).forEach(function(number,i){outputRanges[i].push(+number);});});var interpolations=outputRange[0].match(stringShapeRegex).map(function(value,i){return createInterpolation(_extends({},config,{outputRange:outputRanges[i]}));});var shouldRound=isRgbOrRgba(outputRange[0]);return function(input){var i=0;return outputRange[0].replace(stringShapeRegex,function(){var val=+interpolations[i++](input);var rounded=shouldRound&&i<4?Math.round(val):Math.round(val*1000)/1000;return String(rounded);});};}function isRgbOrRgba(range){return typeof range==='string'&&range.startsWith('rgb');}function checkPattern(arr){var pattern=arr[0].replace(stringShapeRegex,'');for(var i=1;i<arr.length;++i){invariant(pattern===arr[i].replace(stringShapeRegex,''),'invalid pattern '+arr[0]+' and '+arr[i]);}}function findRange(input,inputRange){var i=void 0;for(i=1;i<inputRange.length-1;++i){if(inputRange[i]>=input){break;}}return i-1;}function checkValidInputRange(arr){invariant(arr.length>=2,'inputRange must have at least 2 elements');for(var i=1;i<arr.length;++i){invariant(arr[i]>=arr[i-1],'inputRange must be monotonically increasing '+arr);}}function checkInfiniteRange(name,arr){invariant(arr.length>=2,name+' must have at least 2 elements');invariant(arr.length!==2||arr[0]!==-Infinity||arr[1]!==Infinity,name+'cannot be ]-infinity;+infinity[ '+arr);}var AnimatedInterpolation=(_temp=_class=function(_AnimatedWithChildren){_inherits(AnimatedInterpolation,_AnimatedWithChildren);function AnimatedInterpolation(parent,config){_classCallCheck(this,AnimatedInterpolation);var _this=_possibleConstructorReturn(this,(AnimatedInterpolation.__proto__||Object.getPrototypeOf(AnimatedInterpolation)).call(this));_this._parent=parent;_this._config=config;_this._interpolation=createInterpolation(config);return _this;}_createClass(AnimatedInterpolation,[{key:'__makeNative',value:function __makeNative(){this._parent.__makeNative();_get(AnimatedInterpolation.prototype.__proto__||Object.getPrototypeOf(AnimatedInterpolation.prototype),'__makeNative',this).call(this);}},{key:'__getValue',value:function __getValue(){var parentValue=this._parent.__getValue();invariant(typeof parentValue==='number','Cannot interpolate an input which is not a number.');return this._interpolation(parentValue);}},{key:'interpolate',value:function interpolate(config){return new AnimatedInterpolation(this,config);}},{key:'__attach',value:function __attach(){this._parent.__addChild(this);}},{key:'__detach',value:function __detach(){this._parent.__removeChild(this);_get(AnimatedInterpolation.prototype.__proto__||Object.getPrototypeOf(AnimatedInterpolation.prototype),'__detach',this).call(this);}},{key:'__transformDataType',value:function __transformDataType(range){return range.map(function(value){if(typeof value!=='string'){return value;}if(/deg$/.test(value)){var degrees=parseFloat(value)||0;var radians=degrees*Math.PI/180.0;return radians;}else{return parseFloat(value)||0;}});}},{key:'__getNativeConfig',value:function __getNativeConfig(){if(__DEV__){NativeAnimatedHelper.validateInterpolation(this._config);}return{inputRange:this._config.inputRange,outputRange:this.__transformDataType(this._config.outputRange),extrapolateLeft:this._config.extrapolateLeft||this._config.extrapolate||'extend',extrapolateRight:this._config.extrapolateRight||this._config.extrapolate||'extend',type:'interpolation'};}}]);return AnimatedInterpolation;}(AnimatedWithChildren),_class.__createInterpolation=createInterpolation,_temp);module.exports=AnimatedInterpolation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkSW50ZXJwb2xhdGlvbi5qcyJdLCJuYW1lcyI6WyJBbmltYXRlZE5vZGUiLCJyZXF1aXJlIiwiQW5pbWF0ZWRXaXRoQ2hpbGRyZW4iLCJOYXRpdmVBbmltYXRlZEhlbHBlciIsImludmFyaWFudCIsIm5vcm1hbGl6ZUNvbG9yIiwibGluZWFyIiwidCIsImNyZWF0ZUludGVycG9sYXRpb24iLCJjb25maWciLCJvdXRwdXRSYW5nZSIsImNyZWF0ZUludGVycG9sYXRpb25Gcm9tU3RyaW5nT3V0cHV0UmFuZ2UiLCJjaGVja0luZmluaXRlUmFuZ2UiLCJpbnB1dFJhbmdlIiwiY2hlY2tWYWxpZElucHV0UmFuZ2UiLCJsZW5ndGgiLCJlYXNpbmciLCJleHRyYXBvbGF0ZUxlZnQiLCJ1bmRlZmluZWQiLCJleHRyYXBvbGF0ZSIsImV4dHJhcG9sYXRlUmlnaHQiLCJpbnB1dCIsInJhbmdlIiwiZmluZFJhbmdlIiwiaW50ZXJwb2xhdGUiLCJpbnB1dE1pbiIsImlucHV0TWF4Iiwib3V0cHV0TWluIiwib3V0cHV0TWF4IiwicmVzdWx0IiwiSW5maW5pdHkiLCJjb2xvclRvUmdiYSIsImludDMyQ29sb3IiLCJyIiwiZyIsImIiLCJhIiwic3RyaW5nU2hhcGVSZWdleCIsIm1hcCIsImNoZWNrUGF0dGVybiIsIm91dHB1dFJhbmdlcyIsIm1hdGNoIiwiZm9yRWFjaCIsInZhbHVlIiwibnVtYmVyIiwiaSIsInB1c2giLCJpbnRlcnBvbGF0aW9ucyIsInNob3VsZFJvdW5kIiwiaXNSZ2JPclJnYmEiLCJyZXBsYWNlIiwidmFsIiwicm91bmRlZCIsIk1hdGgiLCJyb3VuZCIsIlN0cmluZyIsInN0YXJ0c1dpdGgiLCJhcnIiLCJwYXR0ZXJuIiwibmFtZSIsIkFuaW1hdGVkSW50ZXJwb2xhdGlvbiIsInBhcmVudCIsIl9wYXJlbnQiLCJfY29uZmlnIiwiX2ludGVycG9sYXRpb24iLCJfX21ha2VOYXRpdmUiLCJwYXJlbnRWYWx1ZSIsIl9fZ2V0VmFsdWUiLCJfX2FkZENoaWxkIiwiX19yZW1vdmVDaGlsZCIsInRlc3QiLCJkZWdyZWVzIiwicGFyc2VGbG9hdCIsInJhZGlhbnMiLCJQSSIsIl9fREVWX18iLCJ2YWxpZGF0ZUludGVycG9sYXRpb24iLCJfX3RyYW5zZm9ybURhdGFUeXBlIiwidHlwZSIsIl9fY3JlYXRlSW50ZXJwb2xhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVdBLGEsNjhEQUVBLEdBQU1BLGNBQWVDLFFBQVEsZ0JBQVIsQ0FBckIsQ0FDQSxHQUFNQyxzQkFBdUJELFFBQVEsd0JBQVIsQ0FBN0IsQ0FDQSxHQUFNRSxzQkFBdUJGLFFBQVEseUJBQVIsQ0FBN0IsQ0FFQSxHQUFNRyxXQUFZSCxPQUFaLHNCQUFOLENBQ0EsR0FBTUksZ0JBQWlCSixPQUFqQixrQkFBTixDQWlCQSxHQUFNSyxRQUFTLFFBQVRBLE9BQVMsVUFBS0MsRUFBTCxFQUFmLENBTUEsUUFBU0Msb0JBQVQsQ0FDRUMsTUFERixDQUVzQyxDQUNwQyxHQUFJQSxPQUFPQyxXQUFQLEVBQXNCLE1BQU9ELFFBQU9DLFdBQVAsQ0FBbUIsQ0FBbkIsQ0FBUCxHQUFpQyxRQUEzRCxDQUFxRSxDQUNuRSxNQUFPQywwQ0FBeUNGLE1BQXpDLENBQVAsQ0FDRCxDQUVELEdBQU1DLGFBQThCRCxPQUFPQyxXQUEzQyxDQUNBRSxtQkFBbUIsYUFBbkIsQ0FBa0NGLFdBQWxDLEVBRUEsR0FBTUcsWUFBYUosT0FBT0ksVUFBMUIsQ0FDQUQsbUJBQW1CLFlBQW5CLENBQWlDQyxVQUFqQyxFQUNBQyxxQkFBcUJELFVBQXJCLEVBRUFULFVBQ0VTLFdBQVdFLE1BQVgsR0FBc0JMLFlBQVlLLE1BRHBDLENBRUUsZUFDRUYsV0FBV0UsTUFEYixDQUVFLHFCQUZGLENBR0VMLFlBQVlLLE1BSGQsQ0FJRSw2QkFOSixFQVNBLEdBQU1DLFFBQVNQLE9BQU9PLE1BQVAsRUFBaUJWLE1BQWhDLENBRUEsR0FBSVcsaUJBQW1DLFFBQXZDLENBQ0EsR0FBSVIsT0FBT1EsZUFBUCxHQUEyQkMsU0FB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ekQsQ0FNTEMsaUJBQ0UsS0FBSzJDLE9BQUwsQ0FBYTNDLGdCQUFiLEVBQWlDLEtBQUsyQyxPQUFMLENBQWE1QyxXQUE5QyxFQUE2RCxRQVAxRCxDQVFMMkQsS0FBTSxlQVJELENBQVAsQ0FVRCxDLG1DQTNFaUM1RSxvQixTQUUzQjZFLHFCLENBQXdCdkUsbUIsUUE0RWpDd0UsT0FBT0MsT0FBUCxDQUFpQnJCLHFCQUFqQiIsImZpbGUiOiJBbmltYXRlZEludGVycG9sYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBBbmltYXRlZEludGVycG9sYXRpb25cbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbi8qIGVzbGludCBuby1iaXR3aXNlOiAwICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkTm9kZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWROb2RlJyk7XG5jb25zdCBBbmltYXRlZFdpdGhDaGlsZHJlbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRXaXRoQ2hpbGRyZW4nKTtcbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5jb25zdCBub3JtYWxpemVDb2xvciA9IHJlcXVpcmUoJ25vcm1hbGl6ZUNvbG9yJyk7XG5cbnR5cGUgRXh0cmFwb2xhdGVUeXBlID0gJ2V4dGVuZCcgfCAnaWRlbnRpdHknIHwgJ2NsYW1wJztcblxuZXhwb3J0IHR5cGUgSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGUgPSB7XG4gIGlucHV0UmFuZ2U6IEFycmF5PG51bWJlcj4sXG4gIC8qICRGbG93Rml4TWUoPj0wLjM4LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIscmVhY3RfbmF0aXZlX29zcykgLSBGbG93IGVycm9yXG4gICAqIGRldGVjdGVkIGR1cmluZyB0aGUgZGVwbG95bWVudCBvZiB2MC4zOC4wLiBUbyBzZWUgdGhlIGVycm9yLCByZW1vdmUgdGhpc1xuICAgKiBjb21tZW50IGFuZCBydW4gZmxvd1xuICAgKi9cbiAgb3V0cHV0UmFuZ2U6IEFycmF5PG51bWJlcj4gfCBBcnJheTxzdHJpbmc+LFxuICBlYXNpbmc/OiAoaW5wdXQ6IG51bWJlcikgPT4gbnVtYmVyLFxuICBleHRyYXBvbGF0ZT86IEV4dHJhcG9sYXRlVHlwZSxcbiAgZXh0cmFwb2xhdGVMZWZ0PzogRXh0cmFwb2xhdGVUeXBlLFxuICBleHRyYXBvbGF0ZVJpZ2h0PzogRXh0cmFwb2xhdGVUeXBlLFxufTtcblxuY29uc3QgbGluZWFyID0gdCA9PiB0O1xuXG4vKipcbiAqIFZlcnkgaGFuZHkgaGVscGVyIHRvIG1hcCBpbnB1dCByYW5nZXMgdG8gb3V0cHV0IHJhbmdlcyB3aXRoIGFuIGVhc2luZ1xuICogZnVuY3Rpb24gYW5kIGN1c3RvbSBiZWhhdmlvciBvdXRzaWRlIG9mIHRoZSByYW5nZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUludGVycG9sYXRpb24oXG4gIGNvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGUsXG4pOiAoaW5wdXQ6IG51bWJlcikgPT4gbnVtYmVyIHwgc3RyaW5nIHtcbiAgaWYgKGNvbmZpZy5vdXRwdXRSYW5nZSAmJiB0eXBlb2YgY29uZmlnLm91dHB1dFJhbmdlWzBdID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBjcmVhdGVJbnRlcnBvbGF0aW9uRnJvbVN0cmluZ091dHB1dFJhbmdlKGNvbmZpZyk7XG4gIH1cblxuICBjb25zdCBvdXRwdXRSYW5nZTogQXJyYXk8bnVtYmVyPiA9IChjb25maWcub3V0cHV0UmFuZ2U6IGFueSk7XG4gIGNoZWNrSW5maW5pdGVSYW5nZSgnb3V0cHV0UmFuZ2UnLCBvdXRwdXRSYW5nZSk7XG5cbiAgY29uc3QgaW5wdXRSYW5nZSA9IGNvbmZpZy5pbnB1dFJhbmdlO1xuICBjaGVja0luZmluaXRlUmFuZ2UoJ2lucHV0UmFuZ2UnLCBpbnB1dFJhbmdlKTtcbiAgY2hlY2tWYWxpZElucHV0UmFuZ2UoaW5wdXRSYW5nZSk7XG5cbiAgaW52YXJpYW50KFxuICAgIGlucHV0UmFuZ2UubGVuZ3RoID09PSBvdXRwdXRSYW5nZS5sZW5ndGgsXG4gICAgJ2lucHV0UmFuZ2UgKCcgK1xuICAgICAgaW5wdXRSYW5nZS5sZW5ndGggK1xuICAgICAgJykgYW5kIG91dHB1dFJhbmdlICgnICtcbiAgICAgIG91dHB1dFJhbmdlLmxlbmd0aCArXG4gICAgICAnKSBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoJyxcbiAgKTtcblxuICBjb25zdCBlYXNpbmcgPSBjb25maWcuZWFzaW5nIHx8IGxpbmVhcjtcblxuICBsZXQgZXh0cmFwb2xhdGVMZWZ0OiBFeHRyYXBvbGF0ZVR5cGUgPSAnZXh0ZW5kJztcbiAgaWYgKGNvbmZpZy5leHRyYXBvbGF0ZUxlZnQgIT09IHVuZGVmaW5lZCkge1xuICAgIGV4dHJhcG9sYXRlTGVmdCA9IGNvbmZpZy5leHRyYXBvbGF0ZUxlZnQ7XG4gIH0gZWxzZSBpZiAoY29uZmlnLmV4dHJhcG9sYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICBleHRyYXBvbGF0ZUxlZnQgPSBjb25maWcuZXh0cmFwb2xhdGU7XG4gIH1cblxuICBsZXQgZXh0cmFwb2xhdGVSaWdodDogRXh0cmFwb2xhdGVUeXBlID0gJ2V4dGVuZCc7XG4gIGlmIChjb25maWcuZXh0cmFwb2xhdGVSaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXh0cmFwb2xhdGVSaWdodCA9IGNvbmZpZy5leHRyYXBvbGF0ZVJpZ2h0O1xuICB9IGVsc2UgaWYgKGNvbmZpZy5leHRyYXBvbGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXh0cmFwb2xhdGVSaWdodCA9IGNvbmZpZy5leHRyYXBvbGF0ZTtcbiAgfVxuXG4gIHJldHVybiBpbnB1dCA9PiB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyxcbiAgICAgICdDYW5ub3QgaW50ZXJwb2xhdGlvbiBhbiBpbnB1dCB3aGljaCBpcyBub3QgYSBudW1iZXInLFxuICAgICk7XG5cbiAgICBjb25zdCByYW5nZSA9IGZpbmRSYW5nZShpbnB1dCwgaW5wdXRSYW5nZSk7XG4gICAgcmV0dXJuIGludGVycG9sYXRlKFxuICAgICAgaW5wdXQsXG4gICAgICBpbnB1dFJhbmdlW3JhbmdlXSxcbiAgICAgIGlucHV0UmFuZ2VbcmFuZ2UgKyAxXSxcbiAgICAgIG91dHB1dFJhbmdlW3JhbmdlXSxcbiAgICAgIG91dHB1dFJhbmdlW3JhbmdlICsgMV0sXG4gICAgICBlYXNpbmcsXG4gICAgICBleHRyYXBvbGF0ZUxlZnQsXG4gICAgICBleHRyYXBvbGF0ZVJpZ2h0LFxuICAgICk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlKFxuICBpbnB1dDogbnVtYmVyLFxuICBpbnB1dE1pbjogbnVtYmVyLFxuICBpbnB1dE1heDogbnVtYmVyLFxuICBvdXRwdXRNaW46IG51bWJlcixcbiAgb3V0cHV0TWF4OiBudW1iZXIsXG4gIGVhc2luZzogKGlucHV0OiBudW1iZXIpID0+IG51bWJlcixcbiAgZXh0cmFwb2xhdGVMZWZ0OiBFeHRyYXBvbGF0ZVR5cGUsXG4gIGV4dHJhcG9sYXRlUmlnaHQ6IEV4dHJhcG9sYXRlVHlwZSxcbikge1xuICBsZXQgcmVzdWx0ID0gaW5wdXQ7XG5cbiAgLy8gRXh0cmFwb2xhdGVcbiAgaWYgKHJlc3VsdCA8IGlucHV0TWluKSB7XG4gICAgaWYgKGV4dHJhcG9sYXRlTGVmdCA9PT0gJ2lkZW50aXR5Jykge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2UgaWYgKGV4dHJhcG9sYXRlTGVmdCA9PT0gJ2NsYW1wJykge1xuICAgICAgcmVzdWx0ID0gaW5wdXRNaW47XG4gICAgfSBlbHNlIGlmIChleHRyYXBvbGF0ZUxlZnQgPT09ICdleHRlbmQnKSB7XG4gICAgICAvLyBub29wXG4gICAgfVxuICB9XG5cbiAgaWYgKHJlc3VsdCA+IGlucHV0TWF4KSB7XG4gICAgaWYgKGV4dHJhcG9sYXRlUmlnaHQgPT09ICdpZGVudGl0eScpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIGlmIChleHRyYXBvbGF0ZVJpZ2h0ID09PSAnY2xhbXAnKSB7XG4gICAgICByZXN1bHQgPSBpbnB1dE1heDtcbiAgICB9IGVsc2UgaWYgKGV4dHJhcG9sYXRlUmlnaHQgPT09ICdleHRlbmQnKSB7XG4gICAgICAvLyBub29wXG4gICAgfVxuICB9XG5cbiAgaWYgKG91dHB1dE1pbiA9PT0gb3V0cHV0TWF4KSB7XG4gICAgcmV0dXJuIG91dHB1dE1pbjtcbiAgfVxuXG4gIGlmIChpbnB1dE1pbiA9PT0gaW5wdXRNYXgpIHtcbiAgICBpZiAoaW5wdXQgPD0gaW5wdXRNaW4pIHtcbiAgICAgIHJldHVybiBvdXRwdXRNaW47XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXRNYXg7XG4gIH1cblxuICAvLyBJbnB1dCBSYW5nZVxuICBpZiAoaW5wdXRNaW4gPT09IC1JbmZpbml0eSkge1xuICAgIHJlc3VsdCA9IC1yZXN1bHQ7XG4gIH0gZWxzZSBpZiAoaW5wdXRNYXggPT09IEluZmluaXR5KSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0IC0gaW5wdXRNaW47XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHJlc3VsdCAtIGlucHV0TWluKSAvIChpbnB1dE1heCAtIGlucHV0TWluKTtcbiAgfVxuXG4gIC8vIEVhc2luZ1xuICByZXN1bHQgPSBlYXNpbmcocmVzdWx0KTtcblxuICAvLyBPdXRwdXQgUmFuZ2VcbiAgaWYgKG91dHB1dE1pbiA9PT0gLUluZmluaXR5KSB7XG4gICAgcmVzdWx0ID0gLXJlc3VsdDtcbiAgfSBlbHNlIGlmIChvdXRwdXRNYXggPT09IEluZmluaXR5KSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgb3V0cHV0TWluO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHJlc3VsdCAqIChvdXRwdXRNYXggLSBvdXRwdXRNaW4pICsgb3V0cHV0TWluO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY29sb3JUb1JnYmEoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBpbnQzMkNvbG9yID0gbm9ybWFsaXplQ29sb3IoaW5wdXQpO1xuICBpZiAoaW50MzJDb2xvciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIGludDMyQ29sb3IgPSBpbnQzMkNvbG9yIHx8IDA7XG5cbiAgY29uc3QgciA9IChpbnQzMkNvbG9yICYgMHhmZjAwMDAwMCkgPj4+IDI0O1xuICBjb25zdCBnID0gKGludDMyQ29sb3IgJiAweDAwZmYwMDAwKSA+Pj4gMTY7XG4gIGNvbnN0IGIgPSAoaW50MzJDb2xvciAmIDB4MDAwMGZmMDApID4+PiA4O1xuICBjb25zdCBhID0gKGludDMyQ29sb3IgJiAweDAwMDAwMGZmKSAvIDI1NTtcblxuICByZXR1cm4gYHJnYmEoJHtyfSwgJHtnfSwgJHtifSwgJHthfSlgO1xufVxuXG5jb25zdCBzdHJpbmdTaGFwZVJlZ2V4ID0gL1swLTlcXC4tXSsvZztcblxuLyoqXG4gKiBTdXBwb3J0cyBzdHJpbmcgc2hhcGVzIGJ5IGV4dHJhY3RpbmcgbnVtYmVycyBzbyBuZXcgdmFsdWVzIGNhbiBiZSBjb21wdXRlZCxcbiAqIGFuZCByZWNvbWJpbmVzIHRob3NlIHZhbHVlcyBpbnRvIG5ldyBzdHJpbmdzIG9mIHRoZSBzYW1lIHNoYXBlLiAgU3VwcG9ydHNcbiAqIHRoaW5ncyBsaWtlOlxuICpcbiAqICAgcmdiYSgxMjMsIDQyLCA5OSwgMC4zNikgLy8gY29sb3JzXG4gKiAgIC00NWRlZyAgICAgICAgICAgICAgICAgIC8vIHZhbHVlcyB3aXRoIHVuaXRzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUludGVycG9sYXRpb25Gcm9tU3RyaW5nT3V0cHV0UmFuZ2UoXG4gIGNvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGUsXG4pOiAoaW5wdXQ6IG51bWJlcikgPT4gc3RyaW5nIHtcbiAgbGV0IG91dHB1dFJhbmdlOiBBcnJheTxzdHJpbmc+ID0gKGNvbmZpZy5vdXRwdXRSYW5nZTogYW55KTtcbiAgaW52YXJpYW50KG91dHB1dFJhbmdlLmxlbmd0aCA+PSAyLCAnQmFkIG91dHB1dCByYW5nZScpO1xuICBvdXRwdXRSYW5nZSA9IG91dHB1dFJhbmdlLm1hcChjb2xvclRvUmdiYSk7XG4gIGNoZWNrUGF0dGVybihvdXRwdXRSYW5nZSk7XG5cbiAgLy8gWydyZ2JhKDAsIDEwMCwgMjAwLCAwKScsICdyZ2JhKDUwLCAxNTAsIDI1MCwgMC41KSddXG4gIC8vIC0+XG4gIC8vIFtcbiAgLy8gICBbMCwgNTBdLFxuICAvLyAgIFsxMDAsIDE1MF0sXG4gIC8vICAgWzIwMCwgMjUwXSxcbiAgLy8gICBbMCwgMC41XSxcbiAgLy8gXVxuICAvKiAkRmxvd0ZpeE1lKD49MC4xOC4wKTogYG91dHB1dFJhbmdlWzBdLm1hdGNoKClgIGNhbiByZXR1cm4gYG51bGxgLiBOZWVkIHRvXG4gICAqIGd1YXJkIGFnYWluc3QgdGhpcyBwb3NzaWJpbGl0eS5cbiAgICovXG4gIGNvbnN0IG91dHB1dFJhbmdlcyA9IG91dHB1dFJhbmdlWzBdLm1hdGNoKHN0cmluZ1NoYXBlUmVnZXgpLm1hcCgoKSA9PiBbXSk7XG4gIG91dHB1dFJhbmdlLmZvckVhY2godmFsdWUgPT4ge1xuICAgIC8qICRGbG93Rml4TWUoPj0wLjE4LjApOiBgdmFsdWUubWF0Y2goKWAgY2FuIHJldHVybiBgbnVsbGAuIE5lZWQgdG8gZ3VhcmRcbiAgICAgKiBhZ2FpbnN0IHRoaXMgcG9zc2liaWxpdHkuXG4gICAgICovXG4gICAgdmFsdWUubWF0Y2goc3RyaW5nU2hhcGVSZWdleCkuZm9yRWFjaCgobnVtYmVyLCBpKSA9PiB7XG4gICAgICBvdXRwdXRSYW5nZXNbaV0ucHVzaCgrbnVtYmVyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLyogJEZsb3dGaXhNZSg+PTAuMTguMCk6IGBvdXRwdXRSYW5nZVswXS5tYXRjaCgpYCBjYW4gcmV0dXJuIGBudWxsYC4gTmVlZCB0b1xuICAgKiBndWFyZCBhZ2FpbnN0IHRoaXMgcG9zc2liaWxpdHkuXG4gICAqL1xuICBjb25zdCBpbnRlcnBvbGF0aW9ucyA9IG91dHB1dFJhbmdlWzBdXG4gICAgLm1hdGNoKHN0cmluZ1NoYXBlUmVnZXgpXG4gICAgLm1hcCgodmFsdWUsIGkpID0+IHtcbiAgICAgIHJldHVybiBjcmVhdGVJbnRlcnBvbGF0aW9uKHtcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBvdXRwdXRSYW5nZTogb3V0cHV0UmFuZ2VzW2ldLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgLy8gcmdiYSByZXF1aXJlcyB0aGF0IHRoZSByLGcsYiBhcmUgaW50ZWdlcnMuLi4uIHNvIHdlIHdhbnQgdG8gcm91bmQgdGhlbSwgYnV0IHdlICpkb250KiB3YW50IHRvXG4gIC8vIHJvdW5kIHRoZSBvcGFjaXR5ICg0dGggY29sdW1uKS5cbiAgY29uc3Qgc2hvdWxkUm91bmQgPSBpc1JnYk9yUmdiYShvdXRwdXRSYW5nZVswXSk7XG5cbiAgcmV0dXJuIGlucHV0ID0+IHtcbiAgICBsZXQgaSA9IDA7XG4gICAgLy8gJ3JnYmEoMCwgMTAwLCAyMDAsIDApJ1xuICAgIC8vIC0+XG4gICAgLy8gJ3JnYmEoJHtpbnRlcnBvbGF0aW9uc1swXShpbnB1dCl9LCAke2ludGVycG9sYXRpb25zWzFdKGlucHV0KX0sIC4uLidcbiAgICByZXR1cm4gb3V0cHV0UmFuZ2VbMF0ucmVwbGFjZShzdHJpbmdTaGFwZVJlZ2V4LCAoKSA9PiB7XG4gICAgICBjb25zdCB2YWwgPSAraW50ZXJwb2xhdGlvbnNbaSsrXShpbnB1dCk7XG4gICAgICBjb25zdCByb3VuZGVkID1cbiAgICAgICAgc2hvdWxkUm91bmQgJiYgaSA8IDQgPyBNYXRoLnJvdW5kKHZhbCkgOiBNYXRoLnJvdW5kKHZhbCAqIDEwMDApIC8gMTAwMDtcbiAgICAgIHJldHVybiBTdHJpbmcocm91bmRlZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzUmdiT3JSZ2JhKHJhbmdlKSB7XG4gIHJldHVybiB0eXBlb2YgcmFuZ2UgPT09ICdzdHJpbmcnICYmIHJhbmdlLnN0YXJ0c1dpdGgoJ3JnYicpO1xufVxuXG5mdW5jdGlvbiBjaGVja1BhdHRlcm4oYXJyOiBBcnJheTxzdHJpbmc+KSB7XG4gIGNvbnN0IHBhdHRlcm4gPSBhcnJbMF0ucmVwbGFjZShzdHJpbmdTaGFwZVJlZ2V4LCAnJyk7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgcGF0dGVybiA9PT0gYXJyW2ldLnJlcGxhY2Uoc3RyaW5nU2hhcGVSZWdleCwgJycpLFxuICAgICAgJ2ludmFsaWQgcGF0dGVybiAnICsgYXJyWzBdICsgJyBhbmQgJyArIGFycltpXSxcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRSYW5nZShpbnB1dDogbnVtYmVyLCBpbnB1dFJhbmdlOiBBcnJheTxudW1iZXI+KSB7XG4gIGxldCBpO1xuICBmb3IgKGkgPSAxOyBpIDwgaW5wdXRSYW5nZS5sZW5ndGggLSAxOyArK2kpIHtcbiAgICBpZiAoaW5wdXRSYW5nZVtpXSA+PSBpbnB1dCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpIC0gMTtcbn1cblxuZnVuY3Rpb24gY2hlY2tWYWxpZElucHV0UmFuZ2UoYXJyOiBBcnJheTxudW1iZXI+KSB7XG4gIGludmFyaWFudChhcnIubGVuZ3RoID49IDIsICdpbnB1dFJhbmdlIG11c3QgaGF2ZSBhdCBsZWFzdCAyIGVsZW1lbnRzJyk7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgYXJyW2ldID49IGFycltpIC0gMV0sXG4gICAgICAvKiAkRmxvd0ZpeE1lKD49MC4xMy4wKSAtIEluIHRoZSBhZGRpdGlvbiBleHByZXNzaW9uIGJlbG93IHRoaXMgY29tbWVudCxcbiAgICAgICAqIG9uZSBvciBib3RoIG9mIHRoZSBvcGVyYW5kcyBtYXkgYmUgc29tZXRoaW5nIHRoYXQgZG9lc24ndCBjbGVhbmx5XG4gICAgICAgKiBjb252ZXJ0IHRvIGEgc3RyaW5nLCBsaWtlIHVuZGVmaW5lZCwgbnVsbCwgYW5kIG9iamVjdCwgZXRjLiBJZiB5b3UgcmVhbGx5XG4gICAgICAgKiBtZWFuIHRoaXMgaW1wbGljaXQgc3RyaW5nIGNvbnZlcnNpb24sIHlvdSBjYW4gZG8gc29tZXRoaW5nIGxpa2VcbiAgICAgICAqIFN0cmluZyhteVRoaW5nKVxuICAgICAgICovXG4gICAgICAnaW5wdXRSYW5nZSBtdXN0IGJlIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZyAnICsgYXJyLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbmZpbml0ZVJhbmdlKG5hbWU6IHN0cmluZywgYXJyOiBBcnJheTxudW1iZXI+KSB7XG4gIGludmFyaWFudChhcnIubGVuZ3RoID49IDIsIG5hbWUgKyAnIG11c3QgaGF2ZSBhdCBsZWFzdCAyIGVsZW1lbnRzJyk7XG4gIGludmFyaWFudChcbiAgICBhcnIubGVuZ3RoICE9PSAyIHx8IGFyclswXSAhPT0gLUluZmluaXR5IHx8IGFyclsxXSAhPT0gSW5maW5pdHksXG4gICAgLyogJEZsb3dGaXhNZSg+PTAuMTMuMCkgLSBJbiB0aGUgYWRkaXRpb24gZXhwcmVzc2lvbiBiZWxvdyB0aGlzIGNvbW1lbnQsXG4gICAgICogb25lIG9yIGJvdGggb2YgdGhlIG9wZXJhbmRzIG1heSBiZSBzb21ldGhpbmcgdGhhdCBkb2Vzbid0IGNsZWFubHkgY29udmVydFxuICAgICAqIHRvIGEgc3RyaW5nLCBsaWtlIHVuZGVmaW5lZCwgbnVsbCwgYW5kIG9iamVjdCwgZXRjLiBJZiB5b3UgcmVhbGx5IG1lYW5cbiAgICAgKiB0aGlzIGltcGxpY2l0IHN0cmluZyBjb252ZXJzaW9uLCB5b3UgY2FuIGRvIHNvbWV0aGluZyBsaWtlXG4gICAgICogU3RyaW5nKG15VGhpbmcpXG4gICAgICovXG4gICAgbmFtZSArICdjYW5ub3QgYmUgXS1pbmZpbml0eTsraW5maW5pdHlbICcgKyBhcnIsXG4gICk7XG59XG5cbmNsYXNzIEFuaW1hdGVkSW50ZXJwb2xhdGlvbiBleHRlbmRzIEFuaW1hdGVkV2l0aENoaWxkcmVuIHtcbiAgLy8gRXhwb3J0IGZvciB0ZXN0aW5nLlxuICBzdGF0aWMgX19jcmVhdGVJbnRlcnBvbGF0aW9uID0gY3JlYXRlSW50ZXJwb2xhdGlvbjtcblxuICBfcGFyZW50OiBBbmltYXRlZE5vZGU7XG4gIF9jb25maWc6IEludGVycG9sYXRpb25Db25maWdUeXBlO1xuICBfaW50ZXJwb2xhdGlvbjogKGlucHV0OiBudW1iZXIpID0+IG51bWJlciB8IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IEFuaW1hdGVkTm9kZSwgY29uZmlnOiBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLl9pbnRlcnBvbGF0aW9uID0gY3JlYXRlSW50ZXJwb2xhdGlvbihjb25maWcpO1xuICB9XG5cbiAgX19tYWtlTmF0aXZlKCkge1xuICAgIHRoaXMuX3BhcmVudC5fX21ha2VOYXRpdmUoKTtcbiAgICBzdXBlci5fX21ha2VOYXRpdmUoKTtcbiAgfVxuXG4gIF9fZ2V0VmFsdWUoKTogbnVtYmVyIHwgc3RyaW5nIHtcbiAgICBjb25zdCBwYXJlbnRWYWx1ZTogbnVtYmVyID0gdGhpcy5fcGFyZW50Ll9fZ2V0VmFsdWUoKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgcGFyZW50VmFsdWUgPT09ICdudW1iZXInLFxuICAgICAgJ0Nhbm5vdCBpbnRlcnBvbGF0ZSBhbiBpbnB1dCB3aGljaCBpcyBub3QgYSBudW1iZXIuJyxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLl9pbnRlcnBvbGF0aW9uKHBhcmVudFZhbHVlKTtcbiAgfVxuXG4gIGludGVycG9sYXRlKGNvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGUpOiBBbmltYXRlZEludGVycG9sYXRpb24ge1xuICAgIHJldHVybiBuZXcgQW5pbWF0ZWRJbnRlcnBvbGF0aW9uKHRoaXMsIGNvbmZpZyk7XG4gIH1cblxuICBfX2F0dGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl9wYXJlbnQuX19hZGRDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIF9fZGV0YWNoKCk6IHZvaWQge1xuICAgIHRoaXMuX3BhcmVudC5fX3JlbW92ZUNoaWxkKHRoaXMpO1xuICAgIHN1cGVyLl9fZGV0YWNoKCk7XG4gIH1cblxuICBfX3RyYW5zZm9ybURhdGFUeXBlKHJhbmdlOiBBcnJheTxhbnk+KSB7XG4gICAgLy8gQ2hhbmdlIHRoZSBzdHJpbmcgYXJyYXkgdHlwZSB0byBudW1iZXIgYXJyYXlcbiAgICAvLyBTbyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgbG9naWMgaW4gaU9TIGFuZCBBbmRyb2lkIHBsYXRmb3JtXG4gICAgcmV0dXJuIHJhbmdlLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKC9kZWckLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICBjb25zdCBkZWdyZWVzID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICAgICAgY29uc3QgcmFkaWFucyA9IGRlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjA7XG4gICAgICAgIHJldHVybiByYWRpYW5zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXNzdW1lIHJhZGlhbnNcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfX2dldE5hdGl2ZUNvbmZpZygpOiBhbnkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci52YWxpZGF0ZUludGVycG9sYXRpb24odGhpcy5fY29uZmlnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaW5wdXRSYW5nZTogdGhpcy5fY29uZmlnLmlucHV0UmFuZ2UsXG4gICAgICAvLyBPbmx5IHRoZSBgb3V0cHV0UmFuZ2VgIGNhbiBjb250YWluIHN0cmluZ3Mgc28gd2UgZG9uJ3QgbmVlZCB0byB0cmFuc2Zvcm0gYGlucHV0UmFuZ2VgIGhlcmVcbiAgICAgIG91dHB1dFJhbmdlOiB0aGlzLl9fdHJhbnNmb3JtRGF0YVR5cGUodGhpcy5fY29uZmlnLm91dHB1dFJhbmdlKSxcbiAgICAgIGV4dHJhcG9sYXRlTGVmdDpcbiAgICAgICAgdGhpcy5fY29uZmlnLmV4dHJhcG9sYXRlTGVmdCB8fCB0aGlzLl9jb25maWcuZXh0cmFwb2xhdGUgfHwgJ2V4dGVuZCcsXG4gICAgICBleHRyYXBvbGF0ZVJpZ2h0OlxuICAgICAgICB0aGlzLl9jb25maWcuZXh0cmFwb2xhdGVSaWdodCB8fCB0aGlzLl9jb25maWcuZXh0cmFwb2xhdGUgfHwgJ2V4dGVuZCcsXG4gICAgICB0eXBlOiAnaW50ZXJwb2xhdGlvbicsXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGVkSW50ZXJwb2xhdGlvbjtcbiJdfQ==