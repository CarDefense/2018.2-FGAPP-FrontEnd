10ea2c04cf5bd05f160d8ce80e1eb6f2
'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var getDevServer=require('getDevServer');var _require=require('NativeModules'),SourceCode=_require.SourceCode;var fetch=void 0;function isSourcedFromDisk(sourcePath){return!/^http/.test(sourcePath)&&/[\\/]/.test(sourcePath);}function symbolicateStackTrace(stack){var devServer,stackCopy,foundInternalSource,response,json;return regeneratorRuntime.async(function symbolicateStackTrace$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!fetch){fetch=global.fetch||require('fetch').fetch;}devServer=getDevServer();if(devServer.bundleLoadedFromServer){_context.next=4;break;}throw new Error('Bundle was not loaded from the packager');case 4:stackCopy=stack;if(SourceCode.scriptURL){foundInternalSource=false;stackCopy=stack.map(function(frame){if(!foundInternalSource&&isSourcedFromDisk(frame.file)){return _extends({},frame,{file:SourceCode.scriptURL});}foundInternalSource=true;return frame;});}_context.next=8;return regeneratorRuntime.awrap(fetch(devServer.url+'symbolicate',{method:'POST',body:JSON.stringify({stack:stackCopy})}));case 8:response=_context.sent;_context.next=11;return regeneratorRuntime.awrap(response.json());case 11:json=_context.sent;return _context.abrupt('return',json.stack);case 13:case'end':return _context.stop();}}},null,this);}module.exports=symbolicateStackTrace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN5bWJvbGljYXRlU3RhY2tUcmFjZS5qcyJdLCJuYW1lcyI6WyJnZXREZXZTZXJ2ZXIiLCJyZXF1aXJlIiwiU291cmNlQ29kZSIsImZldGNoIiwiaXNTb3VyY2VkRnJvbURpc2siLCJzb3VyY2VQYXRoIiwidGVzdCIsInN5bWJvbGljYXRlU3RhY2tUcmFjZSIsInN0YWNrIiwiZ2xvYmFsIiwiZGV2U2VydmVyIiwiYnVuZGxlTG9hZGVkRnJvbVNlcnZlciIsIkVycm9yIiwic3RhY2tDb3B5Iiwic2NyaXB0VVJMIiwiZm91bmRJbnRlcm5hbFNvdXJjZSIsIm1hcCIsImZyYW1lIiwiZmlsZSIsInVybCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzcG9uc2UiLCJqc29uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBU0EsYSxnT0FFQSxHQUFNQSxjQUFlQyxPQUFmLGdCQUFOLEMsYUFFcUJBLE8sa0JBQWRDLFUsVUFBQUEsVSxDQUdQLEdBQUlDLGFBQUosQ0FJQSxRQUFTQyxrQkFBVCxDQUEyQkMsVUFBM0IsQ0FBd0QsQ0FDdEQsTUFBTyxDQUFDLFFBQVFDLElBQVIsQ0FBYUQsVUFBYixDQUFELEVBQTZCLFFBQVFDLElBQVIsQ0FBYUQsVUFBYixDQUFwQyxDQUNELENBRUQsUUFBZUUsc0JBQWYsQ0FBcUNDLEtBQXJDLDBMQVlFLEdBQUksQ0FBQ0wsS0FBTCxDQUFZLENBQ1ZBLE1BQVFNLE9BQU9OLEtBQVAsRUFBZ0JGLGlCQUFpQkUsS0FBekMsQ0FDRCxDQUVLTyxTQWhCUixDQWdCb0JWLGNBaEJwQixJQWlCT1UsVUFBVUMsc0JBakJqQiw4QkFrQlUsSUFBSUMsTUFBSixDQUFVLHlDQUFWLENBbEJWLFFBcUJNQyxTQXJCTixDQXFCa0JMLEtBckJsQixDQXVCRSxHQUFJTixXQUFXWSxTQUFmLENBQTBCLENBQ3BCQyxtQkFEb0IsQ0FDVyxLQURYLENBRXhCRixVQUFZTCxNQUFNUSxHQUFOLENBQVUsU0FBQ0MsS0FBRCxDQUF1QixDQUszQyxHQUFJLENBQUNGLG1CQUFELEVBQXdCWCxrQkFBa0JhLE1BQU1DLElBQXhCLENBQTVCLENBQTJELENBRXpELG1CQUFXRCxLQUFYLEVBQWtCQyxLQUFNaEIsV0FBV1ksU0FBbkMsR0FDRCxDQUVEQyxvQkFBc0IsSUFBdEIsQ0FDQSxNQUFPRSxNQUFQLENBQ0QsQ0FaVyxDQUFaLENBYUQsQ0F0Q0gsZ0RBd0N5QmQsTUFBTU8sVUFBVVMsR0FBVixDQUFnQixhQUF0QixDQUFxQyxDQUMxREMsT0FBUSxNQURrRCxDQUUxREMsS0FBTUMsS0FBS0MsU0FBTCxDQUFlLENBQUNmLE1BQU9LLFNBQVIsQ0FBZixDQUZvRCxDQUFyQyxDQXhDekIsU0F3Q1FXLFFBeENSLGdFQTRDcUJBLFNBQVNDLElBQVQsRUE1Q3JCLFVBNENRQSxJQTVDUiwrQ0E2Q1NBLEtBQUtqQixLQTdDZCwyREFnREFrQixPQUFPQyxPQUFQLENBQWlCcEIscUJBQWpCIiwiZmlsZSI6InN5bWJvbGljYXRlU3RhY2tUcmFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHN5bWJvbGljYXRlU3RhY2tUcmFjZVxuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBnZXREZXZTZXJ2ZXIgPSByZXF1aXJlKCdnZXREZXZTZXJ2ZXInKTtcblxuY29uc3Qge1NvdXJjZUNvZGV9ID0gcmVxdWlyZSgnTmF0aXZlTW9kdWxlcycpO1xuXG4vLyBBdm9pZCByZXF1aXJpbmcgZmV0Y2ggb24gbG9hZCBvZiB0aGlzIG1vZHVsZTsgc2VlIHN5bWJvbGljYXRlU3RhY2tUcmFjZVxubGV0IGZldGNoO1xuXG5pbXBvcnQgdHlwZSB7U3RhY2tGcmFtZX0gZnJvbSAncGFyc2VFcnJvclN0YWNrJztcblxuZnVuY3Rpb24gaXNTb3VyY2VkRnJvbURpc2soc291cmNlUGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAhL15odHRwLy50ZXN0KHNvdXJjZVBhdGgpICYmIC9bXFxcXC9dLy50ZXN0KHNvdXJjZVBhdGgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzeW1ib2xpY2F0ZVN0YWNrVHJhY2Uoc3RhY2s6IEFycmF5PFN0YWNrRnJhbWU+KTogUHJvbWlzZTxBcnJheTxTdGFja0ZyYW1lPj4ge1xuICAvLyBSTiBjdXJyZW50bHkgbGF6eSBsb2FkcyB3aGF0d2ctZmV0Y2ggdXNpbmcgYSBjdXN0b20gZmV0Y2ggbW9kdWxlLCB3aGljaCxcbiAgLy8gd2hlbiBjYWxsZWQgZm9yIHRoZSBmaXJzdCB0aW1lLCByZXF1aXJlcyBhbmQgcmUtZXhwb3J0cyAnd2hhdHdnLWZldGNoJy5cbiAgLy8gSG93ZXZlciwgd2hlbiBhIGRlcGVuZGVuY3kgb2YgdGhlIHByb2plY3QgdHJpZXMgdG8gcmVxdWlyZSB3aGF0d2ctZmV0Y2hcbiAgLy8gZWl0aGVyIGRpcmVjdGx5IG9yIGluZGlyZWN0bHksIHdoYXR3Zy1mZXRjaCBpcyByZXF1aXJlZCBiZWZvcmVcbiAgLy8gUk4gY2FuIGxhenkgbG9hZCB3aGF0d2ctZmV0Y2guIEFzIHdoYXR3Zy1mZXRjaCBjaGVja3NcbiAgLy8gZm9yIGEgZmV0Y2ggcG9seWZpbGwgYmVmb3JlIGxvYWRpbmcsIGl0IHdpbGwgaW4gdHVybiB0cnkgdG8gbG9hZFxuICAvLyBSTidzIGZldGNoIG1vZHVsZSwgd2hpY2ggaW1tZWRpYXRlbHkgdHJpZXMgdG8gaW1wb3J0IHdoYXR3Zy1mZXRjaCBBR0FJTi5cbiAgLy8gVGhpcyBjYXVzZXMgYSBjaXJjdWxhciByZXF1aXJlIHdoaWNoIHJlc3VsdHMgaW4gUk4ncyBmZXRjaCBtb2R1bGVcbiAgLy8gZXhwb3J0aW5nIGZldGNoIGFzICd1bmRlZmluZWQnLlxuICAvLyBUaGUgZml4IGJlbG93IHBvc3Rwb25lcyB0cnlpbmcgdG8gbG9hZCBmZXRjaCB1bnRpbCB0aGUgZmlyc3QgY2FsbCB0byBzeW1ib2xpY2F0ZVN0YWNrVHJhY2UuXG4gIC8vIEF0IHRoYXQgdGltZSwgd2Ugd2lsbCBoYXZlIGVpdGhlciBnbG9iYWwuZmV0Y2ggKHdoYXR3Zy1mZXRjaCkgb3IgUk4ncyBmZXRjaC5cbiAgaWYgKCFmZXRjaCkge1xuICAgIGZldGNoID0gZ2xvYmFsLmZldGNoIHx8IHJlcXVpcmUoJ2ZldGNoJykuZmV0Y2g7XG4gIH1cblxuICBjb25zdCBkZXZTZXJ2ZXIgPSBnZXREZXZTZXJ2ZXIoKTtcbiAgaWYgKCFkZXZTZXJ2ZXIuYnVuZGxlTG9hZGVkRnJvbVNlcnZlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignQnVuZGxlIHdhcyBub3QgbG9hZGVkIGZyb20gdGhlIHBhY2thZ2VyJyk7XG4gIH1cblxuICBsZXQgc3RhY2tDb3B5ID0gc3RhY2s7XG5cbiAgaWYgKFNvdXJjZUNvZGUuc2NyaXB0VVJMKSB7XG4gICAgbGV0IGZvdW5kSW50ZXJuYWxTb3VyY2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBzdGFja0NvcHkgPSBzdGFjay5tYXAoKGZyYW1lOiBTdGFja0ZyYW1lKSA9PiB7XG4gICAgICAvLyBJZiB0aGUgc291cmNlcyBleGlzdCBvbiBkaXNrIHJhdGhlciB0aGFuIGFwcGVhcmluZyB0byBjb21lIGZyb20gdGhlIHBhY2thZ2VyLFxuICAgICAgLy8gcmVwbGFjZSB0aGUgbG9jYXRpb24gd2l0aCB0aGUgcGFja2FnZXIgVVJMIHVudGlsIHdlIHJlYWNoIGFuIGludGVybmFsIHNvdXJjZVxuICAgICAgLy8gd2hpY2ggZG9lcyBub3QgaGF2ZSBhIHBhdGggKG5vIHNsYXNoZXMpLCBpbmRpY2F0aW5nIGEgc3dpdGNoIGZyb20gd2l0aGluXG4gICAgICAvLyB0aGUgYXBwbGljYXRpb24gdG8gYSBzdXJyb3VuZGluZyBkZWJ1Z2dpbmcgZW52aXJvbm1lbnQuXG4gICAgICBpZiAoIWZvdW5kSW50ZXJuYWxTb3VyY2UgJiYgaXNTb3VyY2VkRnJvbURpc2soZnJhbWUuZmlsZSkpIHtcbiAgICAgICAgLy8gQ29weSBmcmFtZSBpbnRvIG5ldyBvYmplY3QgYW5kIHJlcGxhY2UgJ2ZpbGUnIHByb3BlcnR5XG4gICAgICAgIHJldHVybiB7Li4uZnJhbWUsIGZpbGU6IFNvdXJjZUNvZGUuc2NyaXB0VVJMfTtcbiAgICAgIH1cblxuICAgICAgZm91bmRJbnRlcm5hbFNvdXJjZSA9IHRydWU7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGRldlNlcnZlci51cmwgKyAnc3ltYm9saWNhdGUnLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe3N0YWNrOiBzdGFja0NvcHl9KSxcbiAgfSk7XG4gIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIHJldHVybiBqc29uLnN0YWNrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN5bWJvbGljYXRlU3RhY2tUcmFjZTtcbiJdfQ==