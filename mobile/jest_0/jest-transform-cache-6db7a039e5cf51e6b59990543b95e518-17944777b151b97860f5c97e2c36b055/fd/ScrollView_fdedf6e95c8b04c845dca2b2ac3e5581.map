{"version":3,"sources":["ScrollView.js"],"names":["AnimatedImplementation","require","ColorPropType","EdgeInsetsPropType","Platform","PointPropType","PropTypes","React","ReactNative","ScrollResponder","ScrollViewStickyHeader","StyleSheet","StyleSheetPropType","View","ViewPropTypes","ViewStylePropTypes","createReactClass","dismissKeyboard","flattenStyle","invariant","processDecelerationRate","requireNativeComponent","warning","resolveAssetSource","ScrollView","displayName","propTypes","automaticallyAdjustContentInsets","bool","contentInset","contentOffset","bounces","bouncesZoom","alwaysBounceHorizontal","alwaysBounceVertical","centerContent","contentContainerStyle","decelerationRate","oneOfType","oneOf","number","horizontal","indicatorStyle","invertStickyHeaders","directionalLockEnabled","canCancelContentTouches","keyboardDismissMode","keyboardShouldPersistTaps","maintainVisibleContentPosition","shape","minIndexForVisible","isRequired","autoscrollToTopThreshold","maximumZoomScale","minimumZoomScale","onMomentumScrollBegin","func","onMomentumScrollEnd","onScroll","onScrollBeginDrag","onScrollEndDrag","onContentSizeChange","pagingEnabled","pinchGestureEnabled","scrollEnabled","scrollEventThrottle","scrollIndicatorInsets","scrollsToTop","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","stickyHeaderIndices","arrayOf","snapToInterval","snapToAlignment","removeClippedSubviews","zoomScale","contentInsetAdjustmentBehavior","refreshControl","element","endFillColor","scrollPerfTag","string","overScrollMode","DEPRECATED_sendUpdatedChildFrames","scrollBarThumbImage","uri","mixins","Mixin","_scrollAnimatedValue","Value","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","getInitialState","scrollResponderMixinGetInitialState","layoutHeight","UNSAFE_componentWillMount","props","y","setOffset","top","componentDidMount","_updateAnimatedNodeAttachment","componentDidUpdate","componentWillUnmount","detach","setNativeProps","_scrollViewRef","getScrollResponder","getScrollableNode","findNodeHandle","getInnerViewNode","_innerViewRef","scrollTo","x","animated","console","warn","scrollResponderScrollTo","scrollToEnd","options","scrollResponderScrollToEnd","scrollWithoutAnimationTo","flashScrollIndicators","scrollResponderFlashScrollIndicators","_getKeyForIndex","index","childArray","child","key","length","attachNativeEvent","nativeEvent","_setStickyHeaderRef","ref","set","delete","_onStickyHeaderLayout","event","Children","toArray","children","layoutY","layout","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","get","setNextHeaderY","_handleScroll","e","__DEV__","OS","log","scrollResponderHandleScroll","_handleLayout","setState","height","onLayout","_handleContentOnLayout","width","_setScrollViewRef","_setInnerViewRef","render","ScrollViewClass","ScrollContentContainerViewClass","AndroidHorizontalScrollView","AndroidHorizontalScrollContentView","AndroidScrollView","RCTScrollView","RCTScrollContentView","undefined","styles","contentContainerHorizontal","style","childLayoutProps","filter","prop","JSON","stringify","contentSizeChangeProps","hasStickyHeaders","map","nextIndex","state","contentContainer","baseStyle","baseHorizontal","baseVertical","scrollResponderHandleMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onResponderGrant","scrollResponderHandleResponderGrant","onResponderReject","scrollResponderHandleResponderReject","onResponderRelease","scrollResponderHandleResponderRelease","onResponderTerminate","scrollResponderHandleTerminate","onResponderTerminationRequest","scrollResponderHandleTerminationRequest","scrollResponderHandleScrollBeginDrag","scrollResponderHandleScrollEndDrag","onScrollShouldSetResponder","scrollResponderHandleScrollShouldSetResponder","onStartShouldSetResponder","scrollResponderHandleStartShouldSetResponder","onStartShouldSetResponderCapture","scrollResponderHandleStartShouldSetResponderCapture","onTouchEnd","scrollResponderHandleTouchEnd","onTouchMove","scrollResponderHandleTouchMove","onTouchStart","scrollResponderHandleTouchStart","onTouchCancel","scrollResponderHandleTouchCancel","sendMomentumEvents","isTVOS","cloneElement","create","flexGrow","flexShrink","flexDirection","overflow","nativeOnlyProps","nativeOnly","module","exports"],"mappings":"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","file":"ScrollView.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ScrollView\n * @flow\n */\n'use strict';\n\nconst AnimatedImplementation = require('AnimatedImplementation');\nconst ColorPropType = require('ColorPropType');\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst Platform = require('Platform');\nconst PointPropType = require('PointPropType');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst ScrollResponder = require('ScrollResponder');\nconst ScrollViewStickyHeader = require('ScrollViewStickyHeader');\nconst StyleSheet = require('StyleSheet');\nconst StyleSheetPropType = require('StyleSheetPropType');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\nconst ViewStylePropTypes = require('ViewStylePropTypes');\n\nconst createReactClass = require('create-react-class');\nconst dismissKeyboard = require('dismissKeyboard');\nconst flattenStyle = require('flattenStyle');\nconst invariant = require('fbjs/lib/invariant');\nconst processDecelerationRate = require('processDecelerationRate');\nconst requireNativeComponent = require('requireNativeComponent');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\nconst resolveAssetSource = require('resolveAssetSource');\n\nimport type {NativeMethodsMixinType} from 'ReactNativeTypes';\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](/react-native/docs/flatlist.html) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\n// $FlowFixMe(>=0.41.0)\nconst ScrollView = createReactClass({\n  displayName: 'ScrollView',\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Controls whether iOS should automatically adjust the content inset\n     * for scroll views that are placed behind a navigation bar or\n     * tab bar/ toolbar. The default value is true.\n     * @platform ios\n     */\n    automaticallyAdjustContentInsets: PropTypes.bool,\n    /**\n     * The amount by which the scroll view content is inset from the edges\n     * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n     * @platform ios\n     */\n    contentInset: EdgeInsetsPropType,\n    /**\n     * Used to manually set the starting scroll offset.\n     * The default value is `{x: 0, y: 0}`.\n     * @platform ios\n     */\n    contentOffset: PointPropType,\n    /**\n     * When true, the scroll view bounces when it reaches the end of the\n     * content if the content is larger then the scroll view along the axis of\n     * the scroll direction. When false, it disables all bouncing even if\n     * the `alwaysBounce*` props are true. The default value is true.\n     * @platform ios\n     */\n    bounces: PropTypes.bool,\n    /**\n     * When true, gestures can drive zoom past min/max and the zoom will animate\n     * to the min/max value at gesture end, otherwise the zoom will not exceed\n     * the limits.\n     * @platform ios\n     */\n    bouncesZoom: PropTypes.bool,\n    /**\n     * When true, the scroll view bounces horizontally when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is true when `horizontal={true}` and false otherwise.\n     * @platform ios\n     */\n    alwaysBounceHorizontal: PropTypes.bool,\n    /**\n     * When true, the scroll view bounces vertically when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is false when `horizontal={true}` and true otherwise.\n     * @platform ios\n     */\n    alwaysBounceVertical: PropTypes.bool,\n    /**\n     * When true, the scroll view automatically centers the content when the\n     * content is smaller than the scroll view bounds; when the content is\n     * larger than the scroll view, this property has no effect. The default\n     * value is false.\n     * @platform ios\n     */\n    centerContent: PropTypes.bool,\n    /**\n     * These styles will be applied to the scroll view content container which\n     * wraps all of the child views. Example:\n     *\n     * ```\n     * return (\n     *   <ScrollView contentContainerStyle={styles.contentContainer}>\n     *   </ScrollView>\n     * );\n     * ...\n     * const styles = StyleSheet.create({\n     *   contentContainer: {\n     *     paddingVertical: 20\n     *   }\n     * });\n     * ```\n     */\n    contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),\n    /**\n     * A floating-point number that determines how quickly the scroll view\n     * decelerates after the user lifts their finger. You may also use string\n     * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n     * for `UIScrollViewDecelerationRateNormal` and\n     * `UIScrollViewDecelerationRateFast` respectively.\n     *\n     *   - `'normal'`: 0.998 (the default)\n     *   - `'fast'`: 0.99\n     *\n     * @platform ios\n     */\n    decelerationRate: PropTypes.oneOfType([\n      PropTypes.oneOf(['fast', 'normal']),\n      PropTypes.number,\n    ]),\n    /**\n     * When true, the scroll view's children are arranged horizontally in a row\n     * instead of vertically in a column. The default value is false.\n     */\n    horizontal: PropTypes.bool,\n    /**\n     * The style of the scroll indicators.\n     *\n     *   - `'default'` (the default), same as `black`.\n     *   - `'black'`, scroll indicator is black. This style is good against a light background.\n     *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n     *\n     * @platform ios\n     */\n    indicatorStyle: PropTypes.oneOf([\n      'default', // default\n      'black',\n      'white',\n    ]),\n    /**\n     * If sticky headers should stick at the bottom instead of the top of the\n     * ScrollView. This is usually used with inverted ScrollViews.\n     */\n    invertStickyHeaders: PropTypes.bool,\n    /**\n     * When true, the ScrollView will try to lock to only vertical or horizontal\n     * scrolling while dragging.  The default value is false.\n     * @platform ios\n     */\n    directionalLockEnabled: PropTypes.bool,\n    /**\n     * When false, once tracking starts, won't try to drag if the touch moves.\n     * The default value is true.\n     * @platform ios\n     */\n    canCancelContentTouches: PropTypes.bool,\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *\n     * *Cross platform*\n     *\n     *   - `'none'` (the default), drags do not dismiss the keyboard.\n     *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n     *\n     * *iOS Only*\n     *\n     *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n     *     synchrony with the touch; dragging upwards cancels the dismissal.\n     *     On android this is not supported and it will have the same behavior as 'none'.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'on-drag', // Cross-platform\n      'interactive', // iOS-only\n    ]),\n    /**\n     * Determines when the keyboard should stay visible after a tap.\n     *\n     *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n     *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n     *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n     *     catch taps, but children of the scroll view can catch taps.\n     *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n     *     a children, (or captured by an ancestor).\n     *   - `false`, deprecated, use 'never' instead\n     *   - `true`, deprecated, use 'always' instead\n     */\n    keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),\n    /**\n     * When set, the scroll view will adjust the scroll position so that the first child that is\n     * currently visible and at or beyond `minIndexForVisible` will not change position. This is\n     * useful for lists that are loading content in both directions, e.g. a chat thread, where new\n     * messages coming in might otherwise cause the scroll position to jump. A value of 0 is common,\n     * but other values such as 1 can be used to skip loading spinners or other content that should\n     * not maintain position.\n     *\n     * The optional `autoscrollToTopThreshold` can be used to make the content automatically scroll\n     * to the top after making the adjustment if the user was within the threshold of the top before\n     * the adjustment was made. This is also useful for chat-like applications where you want to see\n     * new messages scroll into place, but not if the user has scrolled up a ways and it would be\n     * disruptive to scroll a bunch.\n     *\n     * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause\n     * jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now,\n     * don't re-order the content of any ScrollViews or Lists that use this feature.\n     *\n     * Caveat 2: This simply uses `contentOffset` and `frame.origin` in native code to compute\n     * visibility. Occlusion, transforms, and other complexity won't be taken into account as to\n     * whether content is \"visible\" or not.\n     *\n     * @platform ios\n     */\n    maintainVisibleContentPosition: PropTypes.shape({\n      minIndexForVisible: PropTypes.number.isRequired,\n      autoscrollToTopThreshold: PropTypes.number,\n    }),\n    /**\n     * The maximum allowed zoom scale. The default value is 1.0.\n     * @platform ios\n     */\n    maximumZoomScale: PropTypes.number,\n    /**\n     * The minimum allowed zoom scale. The default value is 1.0.\n     * @platform ios\n     */\n    minimumZoomScale: PropTypes.number,\n    /**\n     * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n     */\n    onMomentumScrollBegin: PropTypes.func,\n    /**\n     * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n     */\n    onMomentumScrollEnd: PropTypes.func,\n    /**\n     * Fires at most once per frame during scrolling. The frequency of the\n     * events can be controlled using the `scrollEventThrottle` prop.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * Called when the user begins to drag the scroll view.\n     */\n    onScrollBeginDrag: PropTypes.func,\n    /**\n     * Called when the user stops dragging the scroll view and it either stops\n     * or begins to glide.\n     */\n    onScrollEndDrag: PropTypes.func,\n    /**\n     * Called when scrollable content view of the ScrollView changes.\n     *\n     * Handler function is passed the content width and content height as parameters:\n     * `(contentWidth, contentHeight)`\n     *\n     * It's implemented using onLayout handler attached to the content container\n     * which this ScrollView renders.\n     */\n    onContentSizeChange: PropTypes.func,\n    /**\n     * When true, the scroll view stops on multiples of the scroll view's size\n     * when scrolling. This can be used for horizontal pagination. The default\n     * value is false.\n     *\n     * Note: Vertical pagination is not supported on Android.\n     */\n    pagingEnabled: PropTypes.bool,\n    /**\n    * When true, ScrollView allows use of pinch gestures to zoom in and out.\n    * The default value is true.\n    * @platform ios\n    */\n    pinchGestureEnabled: PropTypes.bool,\n    /**\n     * When false, the view cannot be scrolled via touch interaction.\n     * The default value is true.\n     *\n     * Note that the view can always be scrolled by calling `scrollTo`.\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * This controls how often the scroll event will be fired while scrolling\n     * (as a time interval in ms). A lower number yields better accuracy for code\n     * that is tracking the scroll position, but can lead to scroll performance\n     * problems due to the volume of information being send over the bridge.\n     * You will not notice a difference between values set between 1-16 as the\n     * JS run loop is synced to the screen refresh rate. If you do not need precise\n     * scroll position tracking, set this value higher to limit the information\n     * being sent across the bridge. The default value is zero, which results in\n     * the scroll event being sent only once each time the view is scrolled.\n     * @platform ios\n     */\n    scrollEventThrottle: PropTypes.number,\n    /**\n     * The amount by which the scroll view indicators are inset from the edges\n     * of the scroll view. This should normally be set to the same value as\n     * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n     * @platform ios\n     */\n    scrollIndicatorInsets: EdgeInsetsPropType,\n    /**\n     * When true, the scroll view scrolls to top when the status bar is tapped.\n     * The default value is true.\n     * @platform ios\n     */\n    scrollsToTop: PropTypes.bool,\n    /**\n     * When true, shows a horizontal scroll indicator.\n     * The default value is true.\n     */\n    showsHorizontalScrollIndicator: PropTypes.bool,\n    /**\n     * When true, shows a vertical scroll indicator.\n     * The default value is true.\n     */\n    showsVerticalScrollIndicator: PropTypes.bool,\n    /**\n     * An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example, passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.\n     */\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),\n    /**\n     * When set, causes the scroll view to stop at multiples of the value of\n     * `snapToInterval`. This can be used for paginating through children\n     * that have lengths smaller than the scroll view. Typically used in\n     * combination with `snapToAlignment` and `decelerationRate=\"fast\"` on ios.\n     * Overrides less configurable `pagingEnabled` prop.\n     *\n     * Supported for horizontal scrollview on android.\n     */\n    snapToInterval: PropTypes.number,\n    /**\n     * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n     * of the snapping to the scroll view.\n     *\n     *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n     *   - `'center'` will align the snap in the center\n     *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n     *\n     * @platform ios\n     */\n    snapToAlignment: PropTypes.oneOf([\n      'start', // default\n      'center',\n      'end',\n    ]),\n    /**\n     * Experimental: When true, offscreen child views (whose `overflow` value is\n     * `hidden`) are removed from their native backing superview when offscreen.\n     * This can improve scrolling performance on long lists. The default value is\n     * true.\n     */\n    removeClippedSubviews: PropTypes.bool,\n    /**\n     * The current scale of the scroll view content. The default value is 1.0.\n     * @platform ios\n     */\n    zoomScale: PropTypes.number,\n    /**\n     * This property specifies how the safe area insets are used to modify the\n     * content area of the scroll view. The default value of this property is\n     * \"never\". Available on iOS 11 and later.\n     * @platform ios\n     */\n    contentInsetAdjustmentBehavior: PropTypes.oneOf([\n      'automatic',\n      'scrollableAxes',\n      'never', // default\n      'always',\n    ]),\n    /**\n     * A RefreshControl component, used to provide pull-to-refresh\n     * functionality for the ScrollView. Only works for vertical ScrollViews\n     * (`horizontal` prop must be `false`).\n     *\n     * See [RefreshControl](docs/refreshcontrol.html).\n     */\n    refreshControl: PropTypes.element,\n\n    /**\n     * Sometimes a scrollview takes up more space than its content fills. When this is\n     * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n     * a background and creating unnecessary overdraw. This is an advanced optimization\n     * that is not needed in the general case.\n     * @platform android\n     */\n    endFillColor: ColorPropType,\n\n    /**\n     * Tag used to log scroll performance on this scroll view. Will force\n     * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n     * anything out of the box and you need to implement a custom native\n     * FpsListener for it to be useful.\n     * @platform android\n     */\n    scrollPerfTag: PropTypes.string,\n\n     /**\n     * Used to override default value of overScroll mode.\n     *\n     * Possible values:\n     *\n     *  - `'auto'` - Default value, allow a user to over-scroll\n     *    this view only if the content is large enough to meaningfully scroll.\n     *  - `'always'` - Always allow a user to over-scroll this view.\n     *  - `'never'` - Never allow a user to over-scroll this view.\n     *\n     * @platform android\n     */\n    overScrollMode: PropTypes.oneOf([\n      'auto',\n      'always',\n      'never',\n    ]),\n    /**\n     * When true, ScrollView will emit updateChildFrames data in scroll events,\n     * otherwise will not compute or emit child frame data.  This only exists\n     * to support legacy issues, `onLayout` should be used instead to retrieve\n     * frame data.\n     * The default value is false.\n     * @platform ios\n     */\n    DEPRECATED_sendUpdatedChildFrames: PropTypes.bool,\n    /**\n     * Optionally an image can be used for the scroll bar thumb. This will\n     * override the color. While the image is loading or the image fails to\n     * load the color will be used instead. Use an alpha of 0 in the color\n     * to avoid seeing it while the image is loading.\n     *\n     * - `uri` - a string representing the resource identifier for the image, which\n     * should be either a local file path or the name of a static image resource\n     * - `number` - Opaque type returned by something like\n     * `import IMAGE from './image.jpg'`.\n     * @platform vr\n     */\n     scrollBarThumbImage: PropTypes.oneOfType([\n       PropTypes.shape({\n         uri: PropTypes.string,\n       }),\n       // Opaque type returned by import IMAGE from './image.jpg'\n       PropTypes.number,\n     ]),\n  },\n\n  mixins: [ScrollResponder.Mixin],\n\n  _scrollAnimatedValue: (new AnimatedImplementation.Value(0): AnimatedImplementation.Value),\n  _scrollAnimatedValueAttachment: (null: ?{detach: () => void}),\n  _stickyHeaderRefs: (new Map(): Map<number, ScrollViewStickyHeader>),\n  _headerLayoutYs: (new Map(): Map<string, number>),\n  getInitialState: function() {\n    return {\n      ...this.scrollResponderMixinGetInitialState(),\n      layoutHeight: null,\n    };\n  },\n\n  UNSAFE_componentWillMount: function() {\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(this.props.contentOffset ? this.props.contentOffset.y : 0);\n    this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);\n    this._stickyHeaderRefs = new Map();\n    this._headerLayoutYs = new Map();\n  },\n\n  componentDidMount: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentDidUpdate: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentWillUnmount: function() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n  },\n\n  setNativeProps: function(props: Object) {\n    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);\n  },\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder: function(): ScrollView {\n    return this;\n  },\n\n  getScrollableNode: function(): any {\n    return ReactNative.findNodeHandle(this._scrollViewRef);\n  },\n\n  getInnerViewNode: function(): any {\n    return ReactNative.findNodeHandle(this._innerViewRef);\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo: function(\n    y?: number | { x?: number, y?: number, animated?: boolean },\n    x?: number,\n    animated?: boolean\n  ) {\n    if (typeof y === 'number') {\n      console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n        'animated: true})` instead.');\n    } else {\n      ({x, y, animated} = y || {});\n    }\n    this.getScrollResponder().scrollResponderScrollTo(\n      {x: x || 0, y: y || 0, animated: animated !== false}\n    );\n  },\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd: function(\n    options?: { animated?: boolean },\n  ) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    this.getScrollResponder().scrollResponderScrollToEnd({\n      animated: animated,\n    });\n  },\n\n  /**\n   * Deprecated, use `scrollTo` instead.\n   */\n  scrollWithoutAnimationTo: function(y: number = 0, x: number = 0) {\n    console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');\n    this.scrollTo({x, y, animated: false});\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: function() {\n    this.getScrollResponder().scrollResponderFlashScrollIndicators();\n  },\n\n  _getKeyForIndex: function(index, childArray) {\n    const child = childArray[index];\n    return child && child.key;\n  },\n\n  _updateAnimatedNodeAttachment: function() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {\n      this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(\n        this._scrollViewRef,\n        'onScroll',\n        [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}]\n      );\n    }\n  },\n\n  _setStickyHeaderRef: function(key, ref) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  },\n\n  _onStickyHeaderLayout: function(index, event, key) {\n    if (!this.props.stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray)\n      );\n      previousHeader && previousHeader.setNextHeaderY(layoutY);\n    }\n  },\n\n  _handleScroll: function(e: Object) {\n    if (__DEV__) {\n      if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {\n        console.log(\n          'You specified `onScroll` on a <ScrollView> but not ' +\n          '`scrollEventThrottle`. You will only receive one event. ' +\n          'Using `16` you get all the events but be aware that it may ' +\n          'cause frame drops, use a bigger number if you don\\'t need as ' +\n          'much precision.'\n        );\n      }\n    }\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n    }\n    this.scrollResponderHandleScroll(e);\n  },\n\n  _handleLayout: function(e: Object) {\n    if (this.props.invertStickyHeaders) {\n      this.setState({ layoutHeight: e.nativeEvent.layout.height });\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  },\n\n  _handleContentOnLayout: function(e: Object) {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n\n  _scrollViewRef: (null: ?ScrollView),\n  _setScrollViewRef: function(ref: ?ScrollView) {\n    this._scrollViewRef = ref;\n  },\n\n  _innerViewRef: (null: ?NativeMethodsMixinType),\n  _setInnerViewRef: function(ref: ?NativeMethodsMixinType) {\n    this._innerViewRef = ref;\n  },\n\n  render: function() {\n    let ScrollViewClass;\n    let ScrollContentContainerViewClass;\n    if (Platform.OS === 'android') {\n      if (this.props.horizontal) {\n        ScrollViewClass = AndroidHorizontalScrollView;\n        ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;\n      } else {\n        ScrollViewClass = AndroidScrollView;\n        ScrollContentContainerViewClass = View;\n      }\n    } else {\n      ScrollViewClass = RCTScrollView;\n      ScrollContentContainerViewClass = RCTScrollContentView;\n      warning(\n        !this.props.snapToInterval || !this.props.pagingEnabled,\n        'snapToInterval is currently ignored when pagingEnabled is true.'\n      );\n    }\n\n    invariant(\n      ScrollViewClass !== undefined,\n      'ScrollViewClass must not be undefined'\n    );\n\n    invariant(\n      ScrollContentContainerViewClass !== undefined,\n      'ScrollContentContainerViewClass must not be undefined'\n    );\n\n    const contentContainerStyle = [\n      this.props.horizontal && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    let style, childLayoutProps;\n    if (__DEV__ && this.props.style) {\n      style = flattenStyle(this.props.style);\n      childLayoutProps = ['alignItems', 'justifyContent']\n        .filter((prop) => style && style[prop] !== undefined);\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' + JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.'\n      );\n    }\n\n    let contentSizeChangeProps = {};\n    if (this.props.onContentSizeChange) {\n      contentSizeChangeProps = {\n        onLayout: this._handleContentOnLayout,\n      };\n    }\n\n    const {stickyHeaderIndices} = this.props;\n    const hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;\n    const childArray = hasStickyHeaders && React.Children.toArray(this.props.children);\n    const children = hasStickyHeaders ?\n      childArray.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          return (\n            <ScrollViewStickyHeader\n              key={key}\n              ref={(ref) => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={\n                this._headerLayoutYs.get(this._getKeyForIndex(nextIndex, childArray))\n              }\n              onLayout={(event) => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}\n              inverted={this.props.invertStickyHeaders}\n              scrollViewHeight={this.state.layoutHeight}>\n              {child}\n            </ScrollViewStickyHeader>\n          );\n        } else {\n          return child;\n        }\n      }) :\n      this.props.children;\n    const contentContainer =\n      <ScrollContentContainerViewClass\n        {...contentSizeChangeProps}\n        ref={this._setInnerViewRef}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders ?\n            false :\n            this.props.removeClippedSubviews\n        }\n        collapsable={false}>\n        {children}\n      </ScrollContentContainerViewClass>;\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined ?\n        this.props.alwaysBounceHorizontal :\n        this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined ?\n        this.props.alwaysBounceVertical :\n        !this.props.horizontal;\n\n    const DEPRECATED_sendUpdatedChildFrames =\n      !!this.props.DEPRECATED_sendUpdatedChildFrames;\n\n    const baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;\n    const props = {\n      ...this.props,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: ([baseStyle, this.props.style]: ?Array<any>),\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onLayout: this._handleLayout,\n      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,\n      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,\n      onResponderGrant: this.scrollResponderHandleResponderGrant,\n      onResponderReject: this.scrollResponderHandleResponderReject,\n      onResponderRelease: this.scrollResponderHandleResponderRelease,\n      onResponderTerminate: this.scrollResponderHandleTerminate,\n      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,\n      onScroll: this._handleScroll,\n      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,\n      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,\n      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,\n      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,\n      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,\n      onTouchEnd: this.scrollResponderHandleTouchEnd,\n      onTouchMove: this.scrollResponderHandleTouchMove,\n      onTouchStart: this.scrollResponderHandleTouchStart,\n      onTouchCancel: this.scrollResponderHandleTouchCancel,\n      scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),\n      scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,\n      sendMomentumEvents: (this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd) ?\n        true : false,\n      DEPRECATED_sendUpdatedChildFrames,\n    };\n\n    const { decelerationRate } = this.props;\n    if (decelerationRate) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        // tvOS lacks native support for RefreshControl, so don't include it in that case\n        return (\n          <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n            {Platform.isTVOS ? null : refreshControl}\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should only apply props.style on the wrapper\n        // however, the ScrollView still needs the baseStyle to be scrollable\n\n        return React.cloneElement(\n          refreshControl,\n          {style: props.style},\n          <ScrollViewClass {...props} style={baseStyle} ref={this._setScrollViewRef}>\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      }\n    }\n    return (\n      <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n        {contentContainer}\n      </ScrollViewClass>\n    );\n  }\n});\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\nlet nativeOnlyProps,\n  AndroidScrollView,\n  AndroidHorizontalScrollContentView,\n  AndroidHorizontalScrollView,\n  RCTScrollView,\n  RCTScrollContentView;\nif (Platform.OS === 'android') {\n  nativeOnlyProps = {\n    nativeOnly: {\n      sendMomentumEvents: true,\n    }\n  };\n  AndroidScrollView = requireNativeComponent(\n    'RCTScrollView',\n    (ScrollView: React.ComponentType<any>),\n    nativeOnlyProps\n  );\n  AndroidHorizontalScrollView = requireNativeComponent(\n    'AndroidHorizontalScrollView',\n    (ScrollView: React.ComponentType<any>),\n    nativeOnlyProps\n  );\n  AndroidHorizontalScrollContentView = requireNativeComponent(\n    'AndroidHorizontalScrollContentView'\n  );\n} else if (Platform.OS === 'ios') {\n  nativeOnlyProps = {\n    nativeOnly: {\n      onMomentumScrollBegin: true,\n      onMomentumScrollEnd : true,\n      onScrollBeginDrag: true,\n      onScrollEndDrag: true,\n    }\n  };\n  RCTScrollView = requireNativeComponent(\n    'RCTScrollView',\n    (ScrollView: React.ComponentType<any>),\n    nativeOnlyProps,\n  );\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);\n} else {\n  nativeOnlyProps = {\n    nativeOnly: {\n    }\n  };\n  RCTScrollView = requireNativeComponent(\n    'RCTScrollView',\n    null,\n    nativeOnlyProps,\n  );\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);\n}\n\nmodule.exports = ScrollView;\n"]}