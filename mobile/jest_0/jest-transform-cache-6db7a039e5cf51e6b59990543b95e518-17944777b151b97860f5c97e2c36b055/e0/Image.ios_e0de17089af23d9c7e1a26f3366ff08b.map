{"version":3,"sources":["Image.ios.js"],"names":["EdgeInsetsPropType","require","ImageResizeMode","ImageSourcePropType","ImageStylePropTypes","NativeMethodsMixin","NativeModules","React","PropTypes","ReactNativeViewAttributes","StyleSheet","StyleSheetPropType","createReactClass","flattenStyle","requireNativeComponent","resolveAssetSource","ImageViewManager","Image","displayName","propTypes","style","source","defaultSource","oneOfType","shape","uri","string","width","number","height","scale","accessible","bool","accessibilityLabel","node","blurRadius","capInsets","resizeMethod","oneOf","resizeMode","testID","onLayout","func","onLoadStart","onProgress","onError","onPartialLoad","onLoad","onLoadEnd","statics","getSize","success","failure","console","warn","prefetch","url","prefetchImage","mixins","viewConfig","uiViewClassName","validAttributes","UIView","render","props","undefined","sources","Array","isArray","styles","base","tintColor","src","children","Error","create","overflow","RCTImageView","module","exports"],"mappings":"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","file":"Image.ios.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule Image\n * @flow\n * @format\n */\n'use strict';\n\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst ImageResizeMode = require('ImageResizeMode');\nconst ImageSourcePropType = require('ImageSourcePropType');\nconst ImageStylePropTypes = require('ImageStylePropTypes');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst NativeModules = require('NativeModules');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst StyleSheet = require('StyleSheet');\nconst StyleSheetPropType = require('StyleSheetPropType');\n\nconst createReactClass = require('create-react-class');\nconst flattenStyle = require('flattenStyle');\nconst requireNativeComponent = require('requireNativeComponent');\nconst resolveAssetSource = require('resolveAssetSource');\n\nconst ImageViewManager = NativeModules.ImageViewManager;\n\n/**\n * A React component for displaying different types of images,\n * including network images, static resources, temporary local images, and\n * images from local disk, such as the camera roll.\n *\n * See https://facebook.github.io/react-native/docs/image.html\n */\nconst Image = createReactClass({\n  displayName: 'Image',\n  propTypes: {\n    /**\n     * See https://facebook.github.io/react-native/docs/image.html#style\n     */\n    style: StyleSheetPropType(ImageStylePropTypes),\n    /**\n     * The image source (either a remote URL or a local file resource).\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#source\n     */\n    source: ImageSourcePropType,\n    /**\n     * A static image to display while loading the image source.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#defaultsource\n     */\n    defaultSource: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        scale: PropTypes.number,\n      }),\n      PropTypes.number,\n    ]),\n    /**\n     * When true, indicates the image is an accessibility element.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#accessible\n     */\n    accessible: PropTypes.bool,\n    /**\n     * The text that's read by the screen reader when the user interacts with\n     * the image.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#accessibilitylabel\n     */\n    accessibilityLabel: PropTypes.node,\n    /**\n     * blurRadius: the blur radius of the blur filter added to the image\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#blurradius\n     */\n    blurRadius: PropTypes.number,\n    /**\n     * See https://facebook.github.io/react-native/docs/image.html#capinsets\n     */\n    capInsets: EdgeInsetsPropType,\n    /**\n     * See https://facebook.github.io/react-native/docs/image.html#resizemethod\n     */\n    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),\n    /**\n     * Determines how to resize the image when the frame doesn't match the raw\n     * image dimensions.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#resizemode\n     */\n    resizeMode: PropTypes.oneOf([\n      'cover',\n      'contain',\n      'stretch',\n      'repeat',\n      'center',\n    ]),\n    /**\n     * A unique identifier for this element to be used in UI Automation\n     * testing scripts.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#testid\n     */\n    testID: PropTypes.string,\n    /**\n     * Invoked on mount and layout changes with\n     * `{nativeEvent: {layout: {x, y, width, height}}}`.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onlayout\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on load start.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onloadstart\n     */\n    onLoadStart: PropTypes.func,\n    /**\n     * Invoked on download progress with `{nativeEvent: {loaded, total}}`.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onprogress\n     */\n    onProgress: PropTypes.func,\n    /**\n     * Invoked on load error with `{nativeEvent: {error}}`.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onerror\n     */\n    onError: PropTypes.func,\n    /**\n     * Invoked when a partial load of the image is complete.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onpartialload\n     */\n    onPartialLoad: PropTypes.func,\n    /**\n     * Invoked when load completes successfully.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onload\n     */\n    onLoad: PropTypes.func,\n    /**\n     * Invoked when load either succeeds or fails.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onloadend\n     */\n    onLoadEnd: PropTypes.func,\n  },\n\n  statics: {\n    resizeMode: ImageResizeMode,\n    /**\n     * Retrieve the width and height (in pixels) of an image prior to displaying it.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#getsize\n     */\n    getSize: function(\n      uri: string,\n      success: (width: number, height: number) => void,\n      failure?: (error: any) => void,\n    ) {\n      ImageViewManager.getSize(\n        uri,\n        success,\n        failure ||\n          function() {\n            console.warn('Failed to get size for image: ' + uri);\n          },\n      );\n    },\n    /**\n     * Prefetches a remote image for later use by downloading it to the disk\n     * cache.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#prefetch\n     */\n    prefetch(url: string) {\n      return ImageViewManager.prefetchImage(url);\n    },\n    /**\n     * Resolves an asset reference into an object.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#resolveassetsource\n     */\n    resolveAssetSource: resolveAssetSource,\n  },\n\n  mixins: [NativeMethodsMixin],\n\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  viewConfig: {\n    uiViewClassName: 'UIView',\n    validAttributes: ReactNativeViewAttributes.UIView,\n  },\n\n  render: function() {\n    const source = resolveAssetSource(this.props.source) || {\n      uri: undefined,\n      width: undefined,\n      height: undefined,\n    };\n\n    let sources;\n    let style;\n    if (Array.isArray(source)) {\n      style = flattenStyle([styles.base, this.props.style]) || {};\n      sources = source;\n    } else {\n      const {width, height, uri} = source;\n      style =\n        flattenStyle([{width, height}, styles.base, this.props.style]) || {};\n      sources = [source];\n\n      if (uri === '') {\n        console.warn('source.uri should not be an empty string');\n      }\n    }\n\n    const resizeMode =\n      this.props.resizeMode || (style || {}).resizeMode || 'cover'; // Workaround for flow bug t7737108\n    const tintColor = (style || {}).tintColor; // Workaround for flow bug t7737108\n\n    if (this.props.src) {\n      console.warn(\n        'The <Image> component requires a `source` property rather than `src`.',\n      );\n    }\n\n    if (this.props.children) {\n      throw new Error(\n        'The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.',\n      );\n    }\n\n    return (\n      <RCTImageView\n        {...this.props}\n        style={style}\n        resizeMode={resizeMode}\n        tintColor={tintColor}\n        source={sources}\n      />\n    );\n  },\n});\n\nconst styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n});\n\nconst RCTImageView = requireNativeComponent('RCTImageView', Image);\n\nmodule.exports = Image;\n"]}