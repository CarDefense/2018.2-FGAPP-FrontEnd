{"version":3,"sources":["ScrollResponder.js"],"names":["Dimensions","require","FrameRateLogger","Keyboard","ReactNative","Subscribable","TextInputState","UIManager","invariant","nullthrows","performanceNow","warning","ScrollViewManager","getInstanceFromNode","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","isTagInstanceOfTextInput","tag","instance","viewConfig","uiViewClassName","ScrollResponderMixin","mixins","Mixin","scrollResponderMixinGetInitialState","isTouching","lastMomentumScrollBeginTime","lastMomentumScrollEndTime","observedScrollSinceBecomingResponder","becameResponderWhileAnimating","scrollResponderHandleScrollShouldSetResponder","state","scrollResponderHandleStartShouldSetResponder","e","currentlyFocusedTextInput","currentlyFocusedField","props","keyboardShouldPersistTaps","target","scrollResponderHandleStartShouldSetResponderCapture","keyboardNeverPersistTaps","scrollResponderIsAnimating","scrollResponderHandleResponderReject","scrollResponderHandleTerminationRequest","scrollResponderHandleTouchEnd","nativeEvent","touches","length","onTouchEnd","scrollResponderHandleTouchCancel","onTouchCancel","scrollResponderHandleResponderRelease","onResponderRelease","onScrollResponderKeyboardDismissed","blurTextInput","scrollResponderHandleScroll","onScroll","scrollResponderHandleResponderGrant","onResponderGrant","scrollResponderHandleScrollBeginDrag","beginScroll","onScrollBeginDrag","scrollResponderHandleScrollEndDrag","velocity","x","y","endScroll","onScrollEndDrag","scrollResponderHandleMomentumScrollBegin","onMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onMomentumScrollEnd","scrollResponderHandleTouchStart","onTouchStart","scrollResponderHandleTouchMove","onTouchMove","now","timeSinceLastMomentumScrollEnd","isAnimating","scrollResponderGetScrollableNode","getScrollableNode","findNodeHandle","scrollResponderScrollTo","animated","console","warn","dispatchViewManagerCommand","RCTScrollView","Commands","scrollTo","scrollResponderScrollToEnd","options","scrollToEnd","scrollResponderScrollWithoutAnimationTo","offsetX","offsetY","scrollResponderZoomTo","rect","zoomToRect","scrollResponderFlashScrollIndicators","flashScrollIndicators","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","additionalScrollOffset","measureLayout","getInnerViewNode","scrollResponderTextInputFocusError","scrollResponderInputMeasureAndScrollToKeyboard","left","top","width","height","keyboardScreenY","get","keyboardWillOpenTo","endCoordinates","screenY","scrollOffsetY","Math","max","error","UNSAFE_componentWillMount","addListenerOn","scrollResponderKeyboardWillShow","scrollResponderKeyboardWillHide","scrollResponderKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","ScrollResponder","module","exports"],"mappings":"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","file":"ScrollResponder.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ScrollResponder\n * @flow\n */\n'use strict';\n\nconst Dimensions = require('Dimensions');\nconst FrameRateLogger = require('FrameRateLogger');\nconst Keyboard = require('Keyboard');\nconst ReactNative = require('ReactNative');\nconst Subscribable = require('Subscribable');\nconst TextInputState = require('TextInputState');\nconst UIManager = require('UIManager');\n\nconst invariant = require('fbjs/lib/invariant');\nconst nullthrows = require('fbjs/lib/nullthrows');\nconst performanceNow = require('fbjs/lib/performanceNow');\nconst warning = require('fbjs/lib/warning');\n\nconst { ScrollViewManager } = require('NativeModules');\nconst { getInstanceFromNode } = require('ReactNativeComponentTree');\n\n/**\n * Mixin that can be integrated in order to handle scrolling that plays well\n * with `ResponderEventPlugin`. Integrate with your platform specific scroll\n * views, or even your custom built (every-frame animating) scroll views so that\n * all of these systems play well with the `ResponderEventPlugin`.\n *\n * iOS scroll event timing nuances:\n * ===============================\n *\n *\n * Scrolling without bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... physical touch starts ...\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\n * 3. `onTouchStart`          (same, but bubble phase)\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\n * 5. `onMomentumScrollEnd`\n *\n *\n * Scrolling with bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... bounce begins ...\n *    ... some time elapses ...\n *    ... physical touch during bounce ...\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\n * 4. `onTouchStart`          (same, but bubble phase)\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\n *\n * So when we receive an `onTouchStart`, how can we tell if we are touching\n * *during* an animation (which then causes the animation to stop)? The only way\n * to tell is if the `touchStart` occurred immediately after the\n * `onMomentumScrollEnd`.\n *\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\n * necessary\n *\n * `ScrollResponder` also includes logic for blurring a currently focused input\n * if one is focused while scrolling. The `ScrollResponder` is a natural place\n * to put this logic since it can support not dismissing the keyboard while\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\n *\n * The public lifecycle API includes events for keyboard interaction, responder\n * interaction, and scrolling (among others). The keyboard callbacks\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\n * responder's props so that you can guarantee that the scroll responder's\n * internal state has been updated accordingly (and deterministically) by\n * the time the props callbacks are invoke. Otherwise, you would always wonder\n * if the scroll responder is currently in a state where it recognizes new\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\n * *always* use these hooks instead of listening to your own global keyboard\n * events.\n *\n * Public keyboard lifecycle API: (props callbacks)\n *\n * Standard Keyboard Appearance Sequence:\n *\n *   this.props.onKeyboardWillShow\n *   this.props.onKeyboardDidShow\n *\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\n * tap inside the scroll responder's scrollable region was responsible\n * for the dismissal of the keyboard. There are other reasons why the\n * keyboard could be dismissed.\n *\n *   this.props.onScrollResponderKeyboardDismissed\n *\n * Standard Keyboard Hide Sequence:\n *\n *   this.props.onKeyboardWillHide\n *   this.props.onKeyboardDidHide\n */\n\nconst IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\n\ntype State = {\n    isTouching: boolean,\n    lastMomentumScrollBeginTime: number,\n    lastMomentumScrollEndTime: number,\n    observedScrollSinceBecomingResponder: boolean,\n    becameResponderWhileAnimating: boolean,\n};\ntype Event = Object;\n\nfunction isTagInstanceOfTextInput(tag) {\n  const instance = getInstanceFromNode(tag);\n  return instance && instance.viewConfig && (\n    instance.viewConfig.uiViewClassName === 'AndroidTextInput' ||\n    instance.viewConfig.uiViewClassName === 'RCTMultilineTextInputView' ||\n    instance.viewConfig.uiViewClassName === 'RCTSinglelineTextInputView'\n  );\n}\n\nconst ScrollResponderMixin = {\n  mixins: [Subscribable.Mixin],\n  scrollResponderMixinGetInitialState: function(): State {\n    return {\n      isTouching: false,\n      lastMomentumScrollBeginTime: 0,\n      lastMomentumScrollEndTime: 0,\n\n      // Reset to false every time becomes responder. This is used to:\n      // - Determine if the scroll view has been scrolled and therefore should\n      // refuse to give up its responder lock.\n      // - Determine if releasing should dismiss the keyboard when we are in\n      // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').\n      observedScrollSinceBecomingResponder: false,\n      becameResponderWhileAnimating: false,\n    };\n  },\n\n  /**\n   * Invoke this from an `onScroll` event.\n   */\n  scrollResponderHandleScrollShouldSetResponder: function(): boolean {\n    return this.state.isTouching;\n  },\n\n  /**\n   * Merely touch starting is not sufficient for a scroll view to become the\n   * responder. Being the \"responder\" means that the very next touch move/end\n   * event will result in an action/movement.\n   *\n   * Invoke this from an `onStartShouldSetResponder` event.\n   *\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\n   * some UI movement/action, but when you want to yield priority to views\n   * nested inside of the view.\n   *\n   * There may be some cases where scroll views actually should return `true`\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n   * that gives priority to nested views.\n   *\n   * - If a single tap on the scroll view triggers an action such as\n   *   recentering a map style view yet wants to give priority to interaction\n   *   views inside (such as dropped pins or labels), then we would return true\n   *   from this method when there is a single touch.\n   *\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n   *   true.\n   *\n   */\n  scrollResponderHandleStartShouldSetResponder: function(e: Event): boolean {\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n\n    if (this.props.keyboardShouldPersistTaps === 'handled' &&\n      currentlyFocusedTextInput != null &&\n      e.target !== currentlyFocusedTextInput) {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * There are times when the scroll view wants to become the responder\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n   * that *doesn't* give priority to nested views (hence the capture phase):\n   *\n   * - Currently animating.\n   * - Tapping anywhere that is not a text input, while the keyboard is\n   *   up (which should dismiss the keyboard).\n   *\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\n   */\n  scrollResponderHandleStartShouldSetResponderCapture: function(e: Event): boolean {\n    // First see if we want to eat taps while the keyboard is up\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistTaps = !keyboardShouldPersistTaps ||\n                                    keyboardShouldPersistTaps === 'never';\n    if (keyboardNeverPersistTaps &&\n      currentlyFocusedTextInput != null &&\n      !isTagInstanceOfTextInput(e.target)) {\n      return true;\n    }\n    return this.scrollResponderIsAnimating();\n  },\n\n  /**\n   * Invoke this from an `onResponderReject` event.\n   *\n   * Some other element is not yielding its role as responder. Normally, we'd\n   * just disable the `UIScrollView`, but a touch has already began on it, the\n   * `UIScrollView` will not accept being disabled after that. The easiest\n   * solution for now is to accept the limitation of disallowing this\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\n   * a touch has already started.\n   */\n  scrollResponderHandleResponderReject: function() {\n  },\n\n  /**\n   * We will allow the scroll view to give up its lock iff it acquired the lock\n   * during an animation. This is a very useful default that happens to satisfy\n   * many common user experiences.\n   *\n   * - Stop a scroll on the left edge, then turn that into an outer view's\n   *   backswipe.\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n   *   view dismiss.\n   * - However, without catching the scroll view mid-bounce (while it is\n   *   motionless), if you drag far enough for the scroll view to become\n   *   responder (and therefore drag the scroll view a bit), any backswipe\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\n   *   rejected.\n   */\n  scrollResponderHandleTerminationRequest: function(): boolean {\n    return !this.state.observedScrollSinceBecomingResponder;\n  },\n\n  /**\n   * Invoke this from an `onTouchEnd` event.\n   *\n   * @param {SyntheticEvent} e Event.\n   */\n  scrollResponderHandleTouchEnd: function(e: Event) {\n    const nativeEvent = e.nativeEvent;\n    this.state.isTouching = nativeEvent.touches.length !== 0;\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchCancel` event.\n   *\n   * @param {SyntheticEvent} e Event.\n   */\n  scrollResponderHandleTouchCancel: function(e: Event) {\n    this.state.isTouching = false;\n    this.props.onTouchCancel && this.props.onTouchCancel(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderRelease` event.\n   */\n  scrollResponderHandleResponderRelease: function(e: Event) {\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n\n    // By default scroll views will unfocus a textField\n    // if another touch occurs outside of it\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n    if (this.props.keyboardShouldPersistTaps !== true &&\n      this.props.keyboardShouldPersistTaps !== 'always' &&\n      currentlyFocusedTextInput != null &&\n      e.target !== currentlyFocusedTextInput  &&\n      !this.state.observedScrollSinceBecomingResponder &&\n      !this.state.becameResponderWhileAnimating) {\n      this.props.onScrollResponderKeyboardDismissed &&\n        this.props.onScrollResponderKeyboardDismissed(e);\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n  },\n\n  scrollResponderHandleScroll: function(e: Event) {\n    this.state.observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderGrant` event.\n   */\n  scrollResponderHandleResponderGrant: function(e: Event) {\n    this.state.observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\n  },\n\n  /**\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\n   * momentum.\n   *\n   * Invoke this from an `onScrollBeginDrag` event.\n   */\n  scrollResponderHandleScrollBeginDrag: function(e: Event) {\n    FrameRateLogger.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onScrollEndDrag` event.\n   */\n  scrollResponderHandleScrollEndDrag: function(e: Event) {\n    const {velocity} = e.nativeEvent;\n    // - If we are animating, then this is a \"drag\" that is stopping the scrollview and momentum end\n    //   will fire.\n    // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or\n    //   another drag starts and ends.\n    // - If we don't get velocity, better to stop the interaction twice than not stop it.\n    if (!this.scrollResponderIsAnimating() &&\n        (!velocity || velocity.x === 0 && velocity.y === 0)) {\n      FrameRateLogger.endScroll();\n    }\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollBegin` event.\n   */\n  scrollResponderHandleMomentumScrollBegin: function(e: Event) {\n    this.state.lastMomentumScrollBeginTime = performanceNow();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollEnd` event.\n   */\n  scrollResponderHandleMomentumScrollEnd: function(e: Event) {\n    FrameRateLogger.endScroll();\n    this.state.lastMomentumScrollEndTime = performanceNow();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchStart` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {SyntheticEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchStart: function(e: Event) {\n    this.state.isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchMove` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {SyntheticEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchMove: function(e: Event) {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  },\n\n  /**\n   * A helper function for this class that lets us quickly determine if the\n   * view is currently animating. This is particularly useful to know when\n   * a touch has just started or ended.\n   */\n  scrollResponderIsAnimating: function(): boolean {\n    const now = performanceNow();\n    const timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;\n    const isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS ||\n      this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;\n    return isAnimating;\n  },\n\n  /**\n   * Returns the node that represents native view that can be scrolled.\n   * Components can pass what node to use by defining a `getScrollableNode`\n   * function otherwise `this` is used.\n   */\n  scrollResponderGetScrollableNode: function(): any {\n    return this.getScrollableNode ?\n      this.getScrollableNode() :\n      ReactNative.findNodeHandle(this);\n  },\n\n  /**\n   * A helper function to scroll to a specific point in the ScrollView.\n   * This is currently used to help focus child TextViews, but can also\n   * be used to quickly scroll to any element we want to focus. Syntax:\n   *\n   * `scrollResponderScrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})`\n   *\n   * Note: The weird argument signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as as alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollResponderScrollTo: function(\n    x?: number | { x?: number, y?: number, animated?: boolean },\n    y?: number,\n    animated?: boolean\n  ) {\n    if (typeof x === 'number') {\n      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');\n    } else {\n      ({x, y, animated} = x || {});\n    }\n    UIManager.dispatchViewManagerCommand(\n      nullthrows(this.scrollResponderGetScrollableNode()),\n      UIManager.RCTScrollView.Commands.scrollTo,\n      [x || 0, y || 0, animated !== false],\n    );\n  },\n\n  /**\n   * Scrolls to the end of the ScrollView, either immediately or with a smooth\n   * animation.\n   *\n   * Example:\n   *\n   * `scrollResponderScrollToEnd({animated: true})`\n   */\n  scrollResponderScrollToEnd: function(\n    options?: { animated?: boolean },\n  ) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    UIManager.dispatchViewManagerCommand(\n      this.scrollResponderGetScrollableNode(),\n      UIManager.RCTScrollView.Commands.scrollToEnd,\n      [animated],\n    );\n  },\n\n  /**\n   * Deprecated, do not use.\n   */\n  scrollResponderScrollWithoutAnimationTo: function(offsetX: number, offsetY: number) {\n    console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');\n    this.scrollResponderScrollTo({x: offsetX, y: offsetY, animated: false});\n  },\n\n  /**\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\n   *\n   * @platform ios\n   */\n  scrollResponderZoomTo: function(\n    rect: {| x: number, y: number, width: number, height: number, animated?: boolean |},\n    animated?: boolean // deprecated, put this inside the rect argument instead\n  ) {\n    invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');\n    if ('animated' in rect) {\n      animated = rect.animated;\n      delete rect.animated;\n    } else if (typeof animated !== 'undefined') {\n      console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');\n    }\n    ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   */\n  scrollResponderFlashScrollIndicators: function() {\n    UIManager.dispatchViewManagerCommand(\n      this.scrollResponderGetScrollableNode(),\n      UIManager.RCTScrollView.Commands.flashScrollIndicators,\n      []\n    );\n  },\n\n  /**\n   * This method should be used as the callback to onFocus in a TextInputs'\n   * parent view. Note that any module using this mixin needs to return\n   * the parent view's ref in getScrollViewRef() in order to use this method.\n   * @param {any} nodeHandle The TextInput node handle\n   * @param {number} additionalOffset The scroll view's bottom \"contentInset\".\n   *        Default is 0.\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n   *        down to make it meet the keyboard's top. Default is false.\n   */\n  scrollResponderScrollNativeHandleToKeyboard: function(nodeHandle: any, additionalOffset?: number, preventNegativeScrollOffset?: bool) {\n    this.additionalScrollOffset = additionalOffset || 0;\n    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n    UIManager.measureLayout(\n      nodeHandle,\n      ReactNative.findNodeHandle(this.getInnerViewNode()),\n      this.scrollResponderTextInputFocusError,\n      this.scrollResponderInputMeasureAndScrollToKeyboard\n    );\n  },\n\n  /**\n   * The calculations performed here assume the scroll view takes up the entire\n   * screen - even if has some content inset. We then measure the offsets of the\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\n   *\n   * @param {number} left Position of input w.r.t. table view.\n   * @param {number} top Position of input w.r.t. table view.\n   * @param {number} width Width of the text input.\n   * @param {number} height Height of the text input.\n   */\n  scrollResponderInputMeasureAndScrollToKeyboard: function(left: number, top: number, width: number, height: number) {\n    let keyboardScreenY = Dimensions.get('window').height;\n    if (this.keyboardWillOpenTo) {\n      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\n    }\n    let scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;\n\n    // By default, this can scroll with negative offset, pulling the content\n    // down so that the target component's bottom meets the keyboard's top.\n    // If requested otherwise, cap the offset at 0 minimum to avoid content\n    // shifting down.\n    if (this.preventNegativeScrollOffset) {\n      scrollOffsetY = Math.max(0, scrollOffsetY);\n    }\n    this.scrollResponderScrollTo({x: 0, y: scrollOffsetY, animated: true});\n\n    this.additionalOffset = 0;\n    this.preventNegativeScrollOffset = false;\n  },\n\n  scrollResponderTextInputFocusError: function(e: Event) {\n    console.error('Error measuring text field: ', e);\n  },\n\n  /**\n   * `componentWillMount` is the closest thing to a  standard \"constructor\" for\n   * React components.\n   *\n   * The `keyboardWillShow` is called before input focus.\n   */\n  UNSAFE_componentWillMount: function() {\n    const {keyboardShouldPersistTaps} = this.props;\n    warning(\n      typeof keyboardShouldPersistTaps !== 'boolean',\n      `'keyboardShouldPersistTaps={${keyboardShouldPersistTaps}}' is deprecated. `\n      + `Use 'keyboardShouldPersistTaps=\"${keyboardShouldPersistTaps ? 'always' : 'never'}\"' instead`\n    );\n\n    this.keyboardWillOpenTo = null;\n    this.additionalScrollOffset = 0;\n    this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);\n    this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);\n    this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);\n    this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);\n  },\n\n  /**\n   * Warning, this may be called several times for a single keyboard opening.\n   * It's best to store the information in this method and then take any action\n   * at a later point (either in `keyboardDidShow` or other).\n   *\n   * Here's the order that events occur in:\n   * - focus\n   * - willShow {startCoordinates, endCoordinates} several times\n   * - didShow several times\n   * - blur\n   * - willHide {startCoordinates, endCoordinates} several times\n   * - didHide several times\n   *\n   * The `ScrollResponder` providesModule callbacks for each of these events.\n   * Even though any user could have easily listened to keyboard events\n   * themselves, using these `props` callbacks ensures that ordering of events\n   * is consistent - and not dependent on the order that the keyboard events are\n   * subscribed to. This matters when telling the scroll view to scroll to where\n   * the keyboard is headed - the scroll responder better have been notified of\n   * the keyboard destination before being instructed to scroll to where the\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n   * will work.\n   *\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\n   * different navigation pane. Filter out the events to determine if they are\n   * relevant to you. (For example, only if you receive these callbacks after\n   * you had explicitly focused a node etc).\n   */\n  scrollResponderKeyboardWillShow: function(e: Event) {\n    this.keyboardWillOpenTo = e;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  },\n\n  scrollResponderKeyboardWillHide: function(e: Event) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  },\n\n  scrollResponderKeyboardDidShow: function(e: Event) {\n    // TODO(7693961): The event for DidShow is not available on iOS yet.\n    // Use the one from WillShow and do not assign.\n    if (e) {\n      this.keyboardWillOpenTo = e;\n    }\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  },\n\n  scrollResponderKeyboardDidHide: function(e: Event) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  }\n\n};\n\nconst ScrollResponder = {\n  Mixin: ScrollResponderMixin,\n};\n\nmodule.exports = ScrollResponder;\n"]}