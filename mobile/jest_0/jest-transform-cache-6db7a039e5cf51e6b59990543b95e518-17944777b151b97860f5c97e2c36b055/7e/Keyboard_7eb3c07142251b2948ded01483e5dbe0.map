{"version":3,"sources":["Keyboard.js"],"names":["LayoutAnimation","require","invariant","NativeEventEmitter","KeyboardObserver","dismissKeyboard","KeyboardEventEmitter","Keyboard","addListener","eventName","callback","removeListener","removeAllListeners","dismiss","scheduleLayoutAnimation","event","duration","easing","configureNext","update","type","Types","module","exports"],"mappings":"AASA,aAEA,GAAMA,iBAAkBC,OAAlB,mBAAN,CACA,GAAMC,WAAYD,OAAZ,sBAAN,CACA,GAAME,oBAAqBF,OAArB,sBAAN,CACA,GAAMG,kBAAmBH,yBAAyBG,gBAAlD,CACA,GAAMC,iBAAkBJ,OAAlB,mBAAN,CACA,GAAMK,sBAAuB,GAAIH,mBAAJ,CAAuBC,gBAAvB,CAA7B,CAqEA,GAAIG,UAAW,CAwBbC,WAxBa,sBAwBDC,SAxBC,CAwB6BC,QAxB7B,CAwB8D,CACzER,UAAU,KAAV,CAAiB,qCAAjB,EACD,CA1BY,CAkCbS,cAlCa,yBAkCEF,SAlCF,CAkCgCC,QAlChC,CAkCoD,CAC/DR,UAAU,KAAV,CAAiB,qCAAjB,EACD,CApCY,CA2CbU,kBA3Ca,6BA2CMH,SA3CN,CA2CoC,CAC/CP,UAAU,KAAV,CAAiB,qCAAjB,EACD,CA7CY,CAkDbW,OAlDa,mBAkDH,CACRX,UAAU,KAAV,CAAiB,qCAAjB,EACD,CApDY,CA0DbY,uBA1Da,kCA0DWC,KA1DX,CA0DiC,CAC5Cb,UAAU,KAAV,CAAiB,qCAAjB,EACD,CA5DY,CAAf,CAgEAK,SAAWD,oBAAX,CACAC,SAASM,OAAT,CAAmBR,eAAnB,CACAE,SAASO,uBAAT,CAAmC,SAASC,KAAT,CAA+B,IACzDC,SADyD,CACrCD,KADqC,CACzDC,QADyD,CAC/CC,MAD+C,CACrCF,KADqC,CAC/CE,MAD+C,CAEhE,GAAID,QAAJ,CAAc,CACZhB,gBAAgBkB,aAAhB,CAA8B,CAC5BF,SAAUA,QADkB,CAE5BG,OAAQ,CACNH,SAAUA,QADJ,CAENI,KAAOH,QAAUjB,gBAAgBqB,KAAhB,CAAsBJ,MAAtB,CAAX,EAA6C,UAF7C,CAFoB,CAA9B,EAOD,CACF,CAXD,CAaAK,OAAOC,OAAP,CAAiBhB,QAAjB","file":"Keyboard.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule Keyboard\n * @flow\n */\n'use strict';\n\nconst LayoutAnimation = require('LayoutAnimation');\nconst invariant = require('fbjs/lib/invariant');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst KeyboardObserver = require('NativeModules').KeyboardObserver;\nconst dismissKeyboard = require('dismissKeyboard');\nconst KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);\n\ntype KeyboardEventName =\n  | 'keyboardWillShow'\n  | 'keyboardDidShow'\n  | 'keyboardWillHide'\n  | 'keyboardDidHide'\n  | 'keyboardWillChangeFrame'\n  | 'keyboardDidChangeFrame';\n\nexport type KeyboardEvent = {|\n  +duration?: number,\n  +easing?: string,\n  +endCoordinates: {|\n    +width: number,\n    +height: number,\n    +screenX: number,\n    +screenY: number,\n  |},\n|};\n\ntype KeyboardEventListener = (e: KeyboardEvent) => void;\n\n// The following object exists for documentation purposes\n// Actual work happens in\n// https://github.com/facebook/react-native/blob/master/Libraries/EventEmitter/NativeEventEmitter.js\n\n/**\n * `Keyboard` module to control keyboard events.\n *\n * ### Usage\n *\n * The Keyboard module allows you to listen for native events and react to them, as\n * well as make changes to the keyboard, like dismissing it.\n *\n *```\n * import React, { Component } from 'react';\n * import { Keyboard, TextInput } from 'react-native';\n *\n * class Example extends Component {\n *   componentWillMount () {\n *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);\n *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);\n *   }\n *\n *   componentWillUnmount () {\n *     this.keyboardDidShowListener.remove();\n *     this.keyboardDidHideListener.remove();\n *   }\n *\n *   _keyboardDidShow () {\n *     alert('Keyboard Shown');\n *   }\n *\n *   _keyboardDidHide () {\n *     alert('Keyboard Hidden');\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         onSubmitEditing={Keyboard.dismiss}\n *       />\n *     );\n *   }\n * }\n *```\n */\n\nlet Keyboard = {\n  /**\n   * The `addListener` function connects a JavaScript function to an identified native\n   * keyboard notification event.\n   *\n   * This function then returns the reference to the listener.\n   *\n   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This\n   *can be any of the following:\n   *\n   * - `keyboardWillShow`\n   * - `keyboardDidShow`\n   * - `keyboardWillHide`\n   * - `keyboardDidHide`\n   * - `keyboardWillChangeFrame`\n   * - `keyboardDidChangeFrame`\n   *\n   * Note that if you set `android:windowSoftInputMode` to `adjustResize`  or `adjustNothing`,\n   * only `keyboardDidShow` and `keyboardDidHide` events will be available on Android.\n   * `keyboardWillShow` as well as `keyboardWillHide` are generally not available on Android\n   * since there is no native corresponding event.\n   *\n   * @param {function} callback function to be called when the event fires.\n   */\n  addListener(eventName: KeyboardEventName, callback: KeyboardEventListener) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Removes a specific listener.\n   *\n   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.\n   * @param {function} callback function to be called when the event fires.\n   */\n  removeListener(eventName: KeyboardEventName, callback: Function) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Removes all listeners for a specific event type.\n   *\n   * @param {string} eventType The native event string listeners are watching which will be removed.\n   */\n  removeAllListeners(eventName: KeyboardEventName) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Dismisses the active keyboard and removes focus.\n   */\n  dismiss() {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Useful for syncing TextInput (or other keyboard accessory view) size of\n   * position changes with keyboard movements.\n   */\n  scheduleLayoutAnimation(event: KeyboardEvent) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n};\n\n// Throw away the dummy object and reassign it to original module\nKeyboard = KeyboardEventEmitter;\nKeyboard.dismiss = dismissKeyboard;\nKeyboard.scheduleLayoutAnimation = function(event: KeyboardEvent) {\n  const {duration, easing} = event;\n  if (duration) {\n    LayoutAnimation.configureNext({\n      duration: duration,\n      update: {\n        duration: duration,\n        type: (easing && LayoutAnimation.Types[easing]) || 'keyboard',\n      },\n    });\n  }\n};\n\nmodule.exports = Keyboard;\n"]}