a8d98f0bbae50a9710b85022977659ff
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}var EventEmitter=require('EventEmitter');var Platform=require('Platform');var React=require('React');var SafeAreaView=require('SafeAreaView');var StyleSheet=require('StyleSheet');var RCTLog=require('RCTLog');var infoLog=require('infoLog');var openFileInEditor=require('openFileInEditor');var parseErrorStack=require('parseErrorStack');var stringifySafe=require('stringifySafe');var symbolicateStackTrace=require('symbolicateStackTrace');var _warningEmitter=new EventEmitter();var _warningMap=new Map();var IGNORED_WARNINGS=[];if(__DEV__){var _console=console,error=_console.error,warn=_console.warn;console.error=function(){error.apply(console,arguments);if(typeof arguments[0]==='string'&&arguments[0].startsWith('Warning: ')){updateWarningMap.apply(null,arguments);}};console.warn=function(){warn.apply(console,arguments);updateWarningMap.apply(null,arguments);};if(Platform.isTesting){console.disableYellowBox=true;}RCTLog.setWarningHandler(function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}updateWarningMap.apply(null,args);});}function sprintf(format){for(var _len2=arguments.length,args=Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}var index=0;return format.replace(/%s/g,function(match){return args[index++];});}function updateWarningMap(){if(console.disableYellowBox){return;}var warning=void 0;for(var _len3=arguments.length,args=Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}if(typeof args[0]==='string'){var format=args[0],formatArgs=args.slice(1);var argCount=(format.match(/%s/g)||[]).length;warning=[sprintf.apply(undefined,[format].concat(_toConsumableArray(formatArgs.slice(0,argCount).map(stringifySafe))))].concat(_toConsumableArray(formatArgs.slice(argCount).map(stringifySafe))).join(' ');}else{warning=args.map(stringifySafe).join(' ');}if(warning.startsWith('(ADVICE)')){return;}var warningInfo=_warningMap.get(warning);if(warningInfo){warningInfo.count+=1;}else{var _error=new Error();_error.framesToPop=2;_warningMap.set(warning,{count:1,stacktrace:parseErrorStack(_error),symbolicated:false});}_warningEmitter.emit('warning',_warningMap);}function ensureSymbolicatedWarning(warning){var prevWarningInfo=_warningMap.get(warning);if(!prevWarningInfo||prevWarningInfo.symbolicated){return;}prevWarningInfo.symbolicated=true;symbolicateStackTrace(prevWarningInfo.stacktrace).then(function(stack){var nextWarningInfo=_warningMap.get(warning);if(nextWarningInfo){nextWarningInfo.stacktrace=stack;_warningEmitter.emit('warning',_warningMap);}},function(error){var nextWarningInfo=_warningMap.get(warning);if(nextWarningInfo){infoLog('Failed to symbolicate warning, "%s":',warning,error);_warningEmitter.emit('warning',_warningMap);}});}function isWarningIgnored(warning){var isIgnored=IGNORED_WARNINGS.some(function(ignoredWarning){return warning.startsWith(ignoredWarning);});if(isIgnored){return true;}return Array.isArray(console.ignoredYellowBox)&&console.ignoredYellowBox.some(function(ignorePrefix){return warning.startsWith(String(ignorePrefix));});}var WarningRow=function WarningRow(_ref){var count=_ref.count,warning=_ref.warning,onPress=_ref.onPress;var Text=require('Text');var TouchableHighlight=require('TouchableHighlight');var View=require('View');var countText=count>1?React.createElement(Text,{style:styles.listRowCount},'('+count+') '):null;return React.createElement(View,{style:styles.listRow},React.createElement(TouchableHighlight,{activeOpacity:0.5,onPress:onPress,style:styles.listRowContent,underlayColor:'transparent'},React.createElement(Text,{style:styles.listRowText,numberOfLines:2},countText,warning)));};var StackRow=function StackRow(_ref2){var frame=_ref2.frame;var Text=require('Text');var TouchableHighlight=require('TouchableHighlight');var file=frame.file,lineNumber=frame.lineNumber;var fileName=void 0;if(file){var fileParts=file.split('/');fileName=fileParts[fileParts.length-1];}else{fileName='<unknown file>';}return React.createElement(TouchableHighlight,{activeOpacity:0.5,style:styles.openInEditorButton,underlayColor:'transparent',onPress:openFileInEditor.bind(null,file,lineNumber)},React.createElement(Text,{style:styles.inspectorCountText},fileName,':',lineNumber));};var WarningInspector=function WarningInspector(_ref3){var warningInfo=_ref3.warningInfo,warning=_ref3.warning,stacktraceVisible=_ref3.stacktraceVisible,onDismiss=_ref3.onDismiss,onDismissAll=_ref3.onDismissAll,onMinimize=_ref3.onMinimize,toggleStacktrace=_ref3.toggleStacktrace;var ScrollView=require('ScrollView');var Text=require('Text');var TouchableHighlight=require('TouchableHighlight');var View=require('View');var _ref4=warningInfo||{},count=_ref4.count,stacktrace=_ref4.stacktrace;var countSentence='Warning encountered '+count+' time'+(count-1?'s':'')+'.';var stacktraceList=void 0;if(stacktraceVisible&&stacktrace){stacktraceList=React.createElement(View,{style:styles.stacktraceList},stacktrace.map(function(frame,ii){return React.createElement(StackRow,{frame:frame,key:ii});}));}return React.createElement(View,{style:styles.inspector},React.createElement(SafeAreaView,{style:styles.safeArea},React.createElement(View,{style:styles.inspectorCount},React.createElement(Text,{style:styles.inspectorCountText},countSentence),React.createElement(TouchableHighlight,{onPress:toggleStacktrace,underlayColor:'transparent'},React.createElement(Text,{style:styles.inspectorButtonText},stacktraceVisible?'\u25BC':'\u25B6',' Stacktrace'))),React.createElement(ScrollView,{style:styles.inspectorWarning},stacktraceList,React.createElement(Text,{style:styles.inspectorWarningText},warning)),React.createElement(View,{style:styles.inspectorButtons},React.createElement(TouchableHighlight,{activeOpacity:0.5,onPress:onMinimize,style:styles.inspectorButton,underlayColor:'transparent'},React.createElement(Text,{style:styles.inspectorButtonText},'Minimize')),React.createElement(TouchableHighlight,{activeOpacity:0.5,onPress:onDismiss,style:styles.inspectorButton,underlayColor:'transparent'},React.createElement(Text,{style:styles.inspectorButtonText},'Dismiss')),React.createElement(TouchableHighlight,{activeOpacity:0.5,onPress:onDismissAll,style:styles.inspectorButton,underlayColor:'transparent'},React.createElement(Text,{style:styles.inspectorButtonText},'Dismiss All')))));};var YellowBox=function(_React$Component){_inherits(YellowBox,_React$Component);function YellowBox(props,context){_classCallCheck(this,YellowBox);var _this=_possibleConstructorReturn(this,(YellowBox.__proto__||Object.getPrototypeOf(YellowBox)).call(this,props,context));_this.state={inspecting:null,stacktraceVisible:false,warningMap:_warningMap};_this.dismissWarning=function(warning){var _this$state=_this.state,inspecting=_this$state.inspecting,warningMap=_this$state.warningMap;if(warning){warningMap.delete(warning);}else{warningMap.clear();}_this.setState({inspecting:warning&&inspecting!==warning?inspecting:null,warningMap:warningMap});};return _this;}_createClass(YellowBox,[{key:'componentDidMount',value:function componentDidMount(){var _this2=this;var scheduled=null;this._listener=_warningEmitter.addListener('warning',function(warningMap){scheduled=scheduled||setImmediate(function(){scheduled=null;_this2.setState({warningMap:warningMap});});});}},{key:'componentDidUpdate',value:function componentDidUpdate(){var inspecting=this.state.inspecting;if(inspecting!=null){ensureSymbolicatedWarning(inspecting);}}},{key:'componentWillUnmount',value:function componentWillUnmount(){if(this._listener){this._listener.remove();}}},{key:'render',value:function render(){var _this3=this;if(console.disableYellowBox||this.state.warningMap.size===0){return null;}var ScrollView=require('ScrollView');var View=require('View');var _state=this.state,inspecting=_state.inspecting,stacktraceVisible=_state.stacktraceVisible;var inspector=inspecting!==null?React.createElement(WarningInspector,{warningInfo:this.state.warningMap.get(inspecting),warning:inspecting,stacktraceVisible:stacktraceVisible,onDismiss:function onDismiss(){return _this3.dismissWarning(inspecting);},onDismissAll:function onDismissAll(){return _this3.dismissWarning(null);},onMinimize:function onMinimize(){return _this3.setState({inspecting:null});},toggleStacktrace:function toggleStacktrace(){return _this3.setState({stacktraceVisible:!stacktraceVisible});}}):null;var rows=[];this.state.warningMap.forEach(function(warningInfo,warning){if(!isWarningIgnored(warning)){rows.push(React.createElement(WarningRow,{key:warning,count:warningInfo.count,warning:warning,onPress:function onPress(){return _this3.setState({inspecting:warning});},onDismiss:function onDismiss(){return _this3.dismissWarning(warning);}}));}});var listStyle=[styles.list,{height:Math.min(rows.length,4.4)*(rowGutter+rowHeight)}];return React.createElement(View,{style:inspector?styles.fullScreen:listStyle},React.createElement(ScrollView,{style:listStyle,scrollsToTop:false},rows),inspector);}}],[{key:'ignoreWarnings',value:function ignoreWarnings(warnings){warnings.forEach(function(warning){if(IGNORED_WARNINGS.indexOf(warning)===-1){IGNORED_WARNINGS.push(warning);}});}}]);return YellowBox;}(React.Component);var backgroundColor=function backgroundColor(opacity){return'rgba(250, 186, 48, '+opacity+')';};var textColor='white';var rowGutter=1;var rowHeight=46;var elevation=Platform.OS==='android'?Number.MAX_SAFE_INTEGER:undefined;var styles=StyleSheet.create({fullScreen:{height:'100%',width:'100%',elevation:elevation,position:'absolute'},inspector:{backgroundColor:backgroundColor(0.95),height:'100%',paddingTop:5,elevation:elevation},inspectorButtons:{flexDirection:'row'},inspectorButton:{flex:1,paddingVertical:22,backgroundColor:backgroundColor(1)},safeArea:{flex:1},stacktraceList:{paddingBottom:5},inspectorButtonText:{color:textColor,fontSize:14,opacity:0.8,textAlign:'center'},openInEditorButton:{paddingTop:5,paddingBottom:5},inspectorCount:{padding:15,paddingBottom:0,flexDirection:'row',justifyContent:'space-between'},inspectorCountText:{color:textColor,fontSize:14},inspectorWarning:{flex:1,paddingHorizontal:15},inspectorWarningText:{color:textColor,fontSize:16,fontWeight:'600'},list:{backgroundColor:'transparent',position:'absolute',left:0,right:0,bottom:0,elevation:elevation},listRow:{backgroundColor:backgroundColor(0.95),height:rowHeight,marginTop:rowGutter},listRowContent:{flex:1},listRowCount:{color:'rgba(255, 255, 255, 0.5)'},listRowText:{color:textColor,position:'absolute',left:0,top:Platform.OS==='android'?5:7,marginLeft:15,marginRight:15}});module.exports=YellowBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveC5qcyJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiUGxhdGZvcm0iLCJSZWFjdCIsIlNhZmVBcmVhVmlldyIsIlN0eWxlU2hlZXQiLCJSQ1RMb2ciLCJpbmZvTG9nIiwib3BlbkZpbGVJbkVkaXRvciIsInBhcnNlRXJyb3JTdGFjayIsInN0cmluZ2lmeVNhZmUiLCJzeW1ib2xpY2F0ZVN0YWNrVHJhY2UiLCJfd2FybmluZ0VtaXR0ZXIiLCJfd2FybmluZ01hcCIsIk1hcCIsIklHTk9SRURfV0FSTklOR1MiLCJfX0RFVl9fIiwiY29uc29sZSIsImVycm9yIiwid2FybiIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhcnRzV2l0aCIsInVwZGF0ZVdhcm5pbmdNYXAiLCJpc1Rlc3RpbmciLCJkaXNhYmxlWWVsbG93Qm94Iiwic2V0V2FybmluZ0hhbmRsZXIiLCJhcmdzIiwic3ByaW50ZiIsImZvcm1hdCIsImluZGV4IiwicmVwbGFjZSIsIndhcm5pbmciLCJmb3JtYXRBcmdzIiwiYXJnQ291bnQiLCJtYXRjaCIsImxlbmd0aCIsInNsaWNlIiwibWFwIiwiam9pbiIsIndhcm5pbmdJbmZvIiwiZ2V0IiwiY291bnQiLCJFcnJvciIsImZyYW1lc1RvUG9wIiwic2V0Iiwic3RhY2t0cmFjZSIsInN5bWJvbGljYXRlZCIsImVtaXQiLCJlbnN1cmVTeW1ib2xpY2F0ZWRXYXJuaW5nIiwicHJldldhcm5pbmdJbmZvIiwidGhlbiIsIm5leHRXYXJuaW5nSW5mbyIsInN0YWNrIiwiaXNXYXJuaW5nSWdub3JlZCIsImlzSWdub3JlZCIsInNvbWUiLCJpZ25vcmVkV2FybmluZyIsIkFycmF5IiwiaXNBcnJheSIsImlnbm9yZWRZZWxsb3dCb3giLCJTdHJpbmciLCJpZ25vcmVQcmVmaXgiLCJXYXJuaW5nUm93Iiwib25QcmVzcyIsIlRleHQiLCJUb3VjaGFibGVIaWdobGlnaHQiLCJWaWV3IiwiY291bnRUZXh0Iiwic3R5bGVzIiwibGlzdFJvd0NvdW50IiwibGlzdFJvdyIsImxpc3RSb3dDb250ZW50IiwibGlzdFJvd1RleHQiLCJTdGFja1JvdyIsImZyYW1lIiwiZmlsZSIsImxpbmVOdW1iZXIiLCJmaWxlTmFtZSIsImZpbGVQYXJ0cyIsInNwbGl0Iiwib3BlbkluRWRpdG9yQnV0dG9uIiwiYmluZCIsImluc3BlY3RvckNvdW50VGV4dCIsIldhcm5pbmdJbnNwZWN0b3IiLCJzdGFja3RyYWNlVmlzaWJsZSIsIm9uRGlzbWlzcyIsIm9uRGlzbWlzc0FsbCIsIm9uTWluaW1pemUiLCJ0b2dnbGVTdGFja3RyYWNlIiwiU2Nyb2xsVmlldyIsImNvdW50U2VudGVuY2UiLCJzdGFja3RyYWNlTGlzdCIsImlpIiwiaW5zcGVjdG9yIiwic2FmZUFyZWEiLCJpbnNwZWN0b3JDb3VudCIsImluc3BlY3RvckJ1dHRvblRleHQiLCJpbnNwZWN0b3JXYXJuaW5nIiwiaW5zcGVjdG9yV2FybmluZ1RleHQiLCJpbnNwZWN0b3JCdXR0b25zIiwiaW5zcGVjdG9yQnV0dG9uIiwiWWVsbG93Qm94IiwicHJvcHMiLCJjb250ZXh0Iiwic3RhdGUiLCJpbnNwZWN0aW5nIiwid2FybmluZ01hcCIsImRpc21pc3NXYXJuaW5nIiwiZGVsZXRlIiwiY2xlYXIiLCJzZXRTdGF0ZSIsInNjaGVkdWxlZCIsIl9saXN0ZW5lciIsImFkZExpc3RlbmVyIiwic2V0SW1tZWRpYXRlIiwicmVtb3ZlIiwic2l6ZSIsInJvd3MiLCJmb3JFYWNoIiwicHVzaCIsImxpc3RTdHlsZSIsImxpc3QiLCJoZWlnaHQiLCJNYXRoIiwibWluIiwicm93R3V0dGVyIiwicm93SGVpZ2h0IiwiZnVsbFNjcmVlbiIsIndhcm5pbmdzIiwiaW5kZXhPZiIsIkNvbXBvbmVudCIsImJhY2tncm91bmRDb2xvciIsIm9wYWNpdHkiLCJ0ZXh0Q29sb3IiLCJlbGV2YXRpb24iLCJPUyIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJ1bmRlZmluZWQiLCJjcmVhdGUiLCJ3aWR0aCIsInBvc2l0aW9uIiwicGFkZGluZ1RvcCIsImZsZXhEaXJlY3Rpb24iLCJmbGV4IiwicGFkZGluZ1ZlcnRpY2FsIiwicGFkZGluZ0JvdHRvbSIsImNvbG9yIiwiZm9udFNpemUiLCJ0ZXh0QWxpZ24iLCJwYWRkaW5nIiwianVzdGlmeUNvbnRlbnQiLCJwYWRkaW5nSG9yaXpvbnRhbCIsImZvbnRXZWlnaHQiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJtYXJnaW5Ub3AiLCJ0b3AiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFXQSxhLG85Q0FFQSxHQUFNQSxjQUFlQyxPQUFmLGdCQUFOLENBQ0EsR0FBTUMsVUFBV0QsT0FBWCxZQUFOLENBQ0EsR0FBTUUsT0FBUUYsT0FBUixTQUFOLENBQ0EsR0FBTUcsY0FBZUgsT0FBZixnQkFBTixDQUNBLEdBQU1JLFlBQWFKLE9BQWIsY0FBTixDQUNBLEdBQU1LLFFBQVNMLE9BQVQsVUFBTixDQUVBLEdBQU1NLFNBQVVOLE9BQVYsV0FBTixDQUNBLEdBQU1PLGtCQUFtQlAsT0FBbkIsb0JBQU4sQ0FDQSxHQUFNUSxpQkFBa0JSLE9BQWxCLG1CQUFOLENBQ0EsR0FBTVMsZUFBZ0JULE9BQWhCLGlCQUFOLENBQ0EsR0FBTVUsdUJBQXdCVixPQUF4Qix5QkFBTixDQVdBLEdBQU1XLGlCQUFrQixHQUFJWixhQUFKLEVBQXhCLENBQ0EsR0FBTWEsYUFBd0MsR0FBSUMsSUFBSixFQUE5QyxDQUNBLEdBQU1DLGtCQUFrQyxFQUF4QyxDQTJCQSxHQUFJQyxPQUFKLENBQWEsY0FDV0MsT0FEWCxDQUNKQyxLQURJLFVBQ0pBLEtBREksQ0FDR0MsSUFESCxVQUNHQSxJQURILENBR1ZGLE9BQUQsQ0FBZUMsS0FBZixDQUF1QixVQUFXLENBQ2hDQSxNQUFNRSxLQUFOLENBQVlILE9BQVosQ0FBcUJJLFNBQXJCLEVBRUEsR0FDRSxNQUFPQSxXQUFVLENBQVYsQ0FBUCxHQUF3QixRQUF4QixFQUNBQSxVQUFVLENBQVYsRUFBYUMsVUFBYixDQUF3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RTdCM0UsWUFBYSxDQUNYMkUsTUFBT2QsU0FESSxDQUVYUSxTQUFVLFVBRkMsQ0FHWGEsS0FBTSxDQUhLLENBSVhJLElBQUs3SixTQUFTc0ksRUFBVCxHQUFnQixTQUFoQixDQUE0QixDQUE1QixDQUFnQyxDQUoxQixDQUtYd0IsV0FBWSxFQUxELENBTVhDLFlBQWEsRUFORixDQTNFZ0IsQ0FBbEIsQ0FBYixDQXFGQUMsT0FBT0MsT0FBUCxDQUFpQjdELFNBQWpCIiwiZmlsZSI6IlllbGxvd0JveC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFllbGxvd0JveFxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ0V2ZW50RW1pdHRlcicpO1xuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCdQbGF0Zm9ybScpO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdSZWFjdCcpO1xuY29uc3QgU2FmZUFyZWFWaWV3ID0gcmVxdWlyZSgnU2FmZUFyZWFWaWV3Jyk7XG5jb25zdCBTdHlsZVNoZWV0ID0gcmVxdWlyZSgnU3R5bGVTaGVldCcpO1xuY29uc3QgUkNUTG9nID0gcmVxdWlyZSgnUkNUTG9nJyk7XG5cbmNvbnN0IGluZm9Mb2cgPSByZXF1aXJlKCdpbmZvTG9nJyk7XG5jb25zdCBvcGVuRmlsZUluRWRpdG9yID0gcmVxdWlyZSgnb3BlbkZpbGVJbkVkaXRvcicpO1xuY29uc3QgcGFyc2VFcnJvclN0YWNrID0gcmVxdWlyZSgncGFyc2VFcnJvclN0YWNrJyk7XG5jb25zdCBzdHJpbmdpZnlTYWZlID0gcmVxdWlyZSgnc3RyaW5naWZ5U2FmZScpO1xuY29uc3Qgc3ltYm9saWNhdGVTdGFja1RyYWNlID0gcmVxdWlyZSgnc3ltYm9saWNhdGVTdGFja1RyYWNlJyk7XG5cbmltcG9ydCB0eXBlIEVtaXR0ZXJTdWJzY3JpcHRpb24gZnJvbSAnRW1pdHRlclN1YnNjcmlwdGlvbic7XG5pbXBvcnQgdHlwZSB7U3RhY2tGcmFtZX0gZnJvbSAncGFyc2VFcnJvclN0YWNrJztcblxudHlwZSBXYXJuaW5nSW5mbyA9IHtcbiAgY291bnQ6IG51bWJlcixcbiAgc3RhY2t0cmFjZTogQXJyYXk8U3RhY2tGcmFtZT4sXG4gIHN5bWJvbGljYXRlZDogYm9vbGVhbixcbn07XG5cbmNvbnN0IF93YXJuaW5nRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbmNvbnN0IF93YXJuaW5nTWFwOiBNYXA8c3RyaW5nLCBXYXJuaW5nSW5mbz4gPSBuZXcgTWFwKCk7XG5jb25zdCBJR05PUkVEX1dBUk5JTkdTOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbi8qKlxuICogWWVsbG93Qm94IHJlbmRlcnMgd2FybmluZ3MgYXQgdGhlIGJvdHRvbSBvZiB0aGUgYXBwIGJlaW5nIGRldmVsb3BlZC5cbiAqXG4gKiBXYXJuaW5ncyBoZWxwIGd1YXJkIGFnYWluc3Qgc3VidGxlIHlldCBzaWduaWZpY2FudCBpc3N1ZXMgdGhhdCBjYW4gaW1wYWN0IHRoZVxuICogcXVhbGl0eSBvZiB0aGUgYXBwLiBUaGlzIFwiaW4geW91ciBmYWNlXCIgc3R5bGUgb2Ygd2FybmluZyBhbGxvd3MgZGV2ZWxvcGVycyB0b1xuICogbm90aWNlIGFuZCBjb3JyZWN0IHRoZXNlIGlzc3VlcyBhcyBxdWlja2x5IGFzIHBvc3NpYmxlLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSB3YXJuaW5nIGJveCBpcyBlbmFibGVkIGluIGBfX0RFVl9fYC4gU2V0IHRoZSBmb2xsb3dpbmcgZmxhZ1xuICogdG8gZGlzYWJsZSBpdCAoYW5kIGNhbGwgYGNvbnNvbGUud2FybmAgdG8gdXBkYXRlIGFueSByZW5kZXJlZCA8WWVsbG93Qm94Pik6XG4gKlxuICogICBjb25zb2xlLmRpc2FibGVZZWxsb3dCb3ggPSB0cnVlO1xuICogICBjb25zb2xlLndhcm4oJ1llbGxvd0JveCBpcyBkaXNhYmxlZC4nKTtcbiAqXG4gKiBJZ25vcmUgc3BlY2lmaWMgd2FybmluZ3MgYnkgY2FsbGluZzpcbiAqXG4gKiAgIFllbGxvd0JveC5pZ25vcmVXYXJuaW5ncyhbJ1dhcm5pbmc6IC4uLiddKTtcbiAqXG4gKiAoREVQUkVDQVRFRCkgV2FybmluZ3MgY2FuIGJlIGlnbm9yZWQgcHJvZ3JhbW1hdGljYWxseSBieSBzZXR0aW5nIHRoZSBhcnJheTpcbiAqXG4gKiAgIGNvbnNvbGUuaWdub3JlZFllbGxvd0JveCA9IFsnV2FybmluZzogLi4uJ107XG4gKlxuICogU3RyaW5ncyBpbiBgY29uc29sZS5pZ25vcmVkWWVsbG93Qm94YCBjYW4gYmUgYSBwcmVmaXggb2YgdGhlIHdhcm5pbmcgdGhhdFxuICogc2hvdWxkIGJlIGlnbm9yZWQuXG4gKi9cblxuaWYgKF9fREVWX18pIHtcbiAgY29uc3Qge2Vycm9yLCB3YXJufSA9IGNvbnNvbGU7XG5cbiAgKGNvbnNvbGU6IGFueSkuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBlcnJvci5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgIC8vIFNob3cgeWVsbG93IGJveCBmb3IgdGhlIGB3YXJuaW5nYCBtb2R1bGUuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgIGFyZ3VtZW50c1swXS5zdGFydHNXaXRoKCdXYXJuaW5nOiAnKVxuICAgICkge1xuICAgICAgdXBkYXRlV2FybmluZ01hcC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcblxuICAoY29uc29sZTogYW55KS53YXJuID0gZnVuY3Rpb24oKSB7XG4gICAgd2Fybi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgIHVwZGF0ZVdhcm5pbmdNYXAuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBpZiAoUGxhdGZvcm0uaXNUZXN0aW5nKSB7XG4gICAgKGNvbnNvbGU6IGFueSkuZGlzYWJsZVllbGxvd0JveCA9IHRydWU7XG4gIH1cblxuICBSQ1RMb2cuc2V0V2FybmluZ0hhbmRsZXIoKC4uLmFyZ3MpID0+IHtcbiAgICB1cGRhdGVXYXJuaW5nTWFwLmFwcGx5KG51bGwsIGFyZ3MpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBTaW1wbGUgZnVuY3Rpb24gZm9yIGZvcm1hdHRpbmcgc3RyaW5ncy5cbiAqXG4gKiBSZXBsYWNlcyBwbGFjZWhvbGRlcnMgd2l0aCB2YWx1ZXMgcGFzc2VkIGFzIGV4dHJhIGFyZ3VtZW50c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgdGhlIGJhc2Ugc3RyaW5nXG4gKiBAcGFyYW0gLi4uYXJncyB0aGUgdmFsdWVzIHRvIGluc2VydFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgcmVwbGFjZWQgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHNwcmludGYoZm9ybWF0LCAuLi5hcmdzKSB7XG4gIGxldCBpbmRleCA9IDA7XG4gIHJldHVybiBmb3JtYXQucmVwbGFjZSgvJXMvZywgbWF0Y2ggPT4gYXJnc1tpbmRleCsrXSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVdhcm5pbmdNYXAoLi4uYXJncyk6IHZvaWQge1xuICBpZiAoY29uc29sZS5kaXNhYmxlWWVsbG93Qm94KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHdhcm5pbmc7XG4gIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBbZm9ybWF0LCAuLi5mb3JtYXRBcmdzXSA9IGFyZ3M7XG4gICAgY29uc3QgYXJnQ291bnQgPSAoZm9ybWF0Lm1hdGNoKC8lcy9nKSB8fCBbXSkubGVuZ3RoO1xuICAgIHdhcm5pbmcgPSBbXG4gICAgICBzcHJpbnRmKGZvcm1hdCwgLi4uZm9ybWF0QXJncy5zbGljZSgwLCBhcmdDb3VudCkubWFwKHN0cmluZ2lmeVNhZmUpKSxcbiAgICAgIC4uLmZvcm1hdEFyZ3Muc2xpY2UoYXJnQ291bnQpLm1hcChzdHJpbmdpZnlTYWZlKSxcbiAgICBdLmpvaW4oJyAnKTtcbiAgfSBlbHNlIHtcbiAgICB3YXJuaW5nID0gYXJncy5tYXAoc3RyaW5naWZ5U2FmZSkuam9pbignICcpO1xuICB9XG5cbiAgaWYgKHdhcm5pbmcuc3RhcnRzV2l0aCgnKEFEVklDRSknKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHdhcm5pbmdJbmZvID0gX3dhcm5pbmdNYXAuZ2V0KHdhcm5pbmcpO1xuICBpZiAod2FybmluZ0luZm8pIHtcbiAgICB3YXJuaW5nSW5mby5jb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGVycm9yOiBhbnkgPSBuZXcgRXJyb3IoKTtcbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDI7XG5cbiAgICBfd2FybmluZ01hcC5zZXQod2FybmluZywge1xuICAgICAgY291bnQ6IDEsXG4gICAgICBzdGFja3RyYWNlOiBwYXJzZUVycm9yU3RhY2soZXJyb3IpLFxuICAgICAgc3ltYm9saWNhdGVkOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIF93YXJuaW5nRW1pdHRlci5lbWl0KCd3YXJuaW5nJywgX3dhcm5pbmdNYXApO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVTeW1ib2xpY2F0ZWRXYXJuaW5nKHdhcm5pbmc6IHN0cmluZyk6IHZvaWQge1xuICBjb25zdCBwcmV2V2FybmluZ0luZm8gPSBfd2FybmluZ01hcC5nZXQod2FybmluZyk7XG4gIGlmICghcHJldldhcm5pbmdJbmZvIHx8IHByZXZXYXJuaW5nSW5mby5zeW1ib2xpY2F0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJldldhcm5pbmdJbmZvLnN5bWJvbGljYXRlZCA9IHRydWU7XG5cbiAgc3ltYm9saWNhdGVTdGFja1RyYWNlKHByZXZXYXJuaW5nSW5mby5zdGFja3RyYWNlKS50aGVuKFxuICAgIHN0YWNrID0+IHtcbiAgICAgIGNvbnN0IG5leHRXYXJuaW5nSW5mbyA9IF93YXJuaW5nTWFwLmdldCh3YXJuaW5nKTtcbiAgICAgIGlmIChuZXh0V2FybmluZ0luZm8pIHtcbiAgICAgICAgbmV4dFdhcm5pbmdJbmZvLnN0YWNrdHJhY2UgPSBzdGFjaztcbiAgICAgICAgX3dhcm5pbmdFbWl0dGVyLmVtaXQoJ3dhcm5pbmcnLCBfd2FybmluZ01hcCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBlcnJvciA9PiB7XG4gICAgICBjb25zdCBuZXh0V2FybmluZ0luZm8gPSBfd2FybmluZ01hcC5nZXQod2FybmluZyk7XG4gICAgICBpZiAobmV4dFdhcm5pbmdJbmZvKSB7XG4gICAgICAgIGluZm9Mb2coJ0ZhaWxlZCB0byBzeW1ib2xpY2F0ZSB3YXJuaW5nLCBcIiVzXCI6Jywgd2FybmluZywgZXJyb3IpO1xuICAgICAgICBfd2FybmluZ0VtaXR0ZXIuZW1pdCgnd2FybmluZycsIF93YXJuaW5nTWFwKTtcbiAgICAgIH1cbiAgICB9LFxuICApO1xufVxuXG5mdW5jdGlvbiBpc1dhcm5pbmdJZ25vcmVkKHdhcm5pbmc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBpc0lnbm9yZWQgPSBJR05PUkVEX1dBUk5JTkdTLnNvbWUoKGlnbm9yZWRXYXJuaW5nOiBzdHJpbmcpID0+XG4gICAgd2FybmluZy5zdGFydHNXaXRoKGlnbm9yZWRXYXJuaW5nKSxcbiAgKTtcblxuICBpZiAoaXNJZ25vcmVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBERVBSRUNBVEVEXG4gIHJldHVybiAoXG4gICAgQXJyYXkuaXNBcnJheShjb25zb2xlLmlnbm9yZWRZZWxsb3dCb3gpICYmXG4gICAgY29uc29sZS5pZ25vcmVkWWVsbG93Qm94LnNvbWUoaWdub3JlUHJlZml4ID0+XG4gICAgICB3YXJuaW5nLnN0YXJ0c1dpdGgoU3RyaW5nKGlnbm9yZVByZWZpeCkpLFxuICAgIClcbiAgKTtcbn1cblxuY29uc3QgV2FybmluZ1JvdyA9ICh7Y291bnQsIHdhcm5pbmcsIG9uUHJlc3N9KSA9PiB7XG4gIGNvbnN0IFRleHQgPSByZXF1aXJlKCdUZXh0Jyk7XG4gIGNvbnN0IFRvdWNoYWJsZUhpZ2hsaWdodCA9IHJlcXVpcmUoJ1RvdWNoYWJsZUhpZ2hsaWdodCcpO1xuICBjb25zdCBWaWV3ID0gcmVxdWlyZSgnVmlldycpO1xuXG4gIGNvbnN0IGNvdW50VGV4dCA9XG4gICAgY291bnQgPiAxID8gKFxuICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5saXN0Um93Q291bnR9PnsnKCcgKyBjb3VudCArICcpICd9PC9UZXh0PlxuICAgICkgOiBudWxsO1xuXG4gIHJldHVybiAoXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5saXN0Um93fT5cbiAgICAgIDxUb3VjaGFibGVIaWdobGlnaHRcbiAgICAgICAgYWN0aXZlT3BhY2l0eT17MC41fVxuICAgICAgICBvblByZXNzPXtvblByZXNzfVxuICAgICAgICBzdHlsZT17c3R5bGVzLmxpc3RSb3dDb250ZW50fVxuICAgICAgICB1bmRlcmxheUNvbG9yPVwidHJhbnNwYXJlbnRcIj5cbiAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5saXN0Um93VGV4dH0gbnVtYmVyT2ZMaW5lcz17Mn0+XG4gICAgICAgICAge2NvdW50VGV4dH1cbiAgICAgICAgICB7d2FybmluZ31cbiAgICAgICAgPC9UZXh0PlxuICAgICAgPC9Ub3VjaGFibGVIaWdobGlnaHQ+XG4gICAgPC9WaWV3PlxuICApO1xufTtcblxudHlwZSBTdGFja1Jvd1Byb3BzID0ge2ZyYW1lOiBTdGFja0ZyYW1lfTtcbmNvbnN0IFN0YWNrUm93ID0gKHtmcmFtZX06IFN0YWNrUm93UHJvcHMpID0+IHtcbiAgY29uc3QgVGV4dCA9IHJlcXVpcmUoJ1RleHQnKTtcbiAgY29uc3QgVG91Y2hhYmxlSGlnaGxpZ2h0ID0gcmVxdWlyZSgnVG91Y2hhYmxlSGlnaGxpZ2h0Jyk7XG4gIGNvbnN0IHtmaWxlLCBsaW5lTnVtYmVyfSA9IGZyYW1lO1xuICBsZXQgZmlsZU5hbWU7XG4gIGlmIChmaWxlKSB7XG4gICAgY29uc3QgZmlsZVBhcnRzID0gZmlsZS5zcGxpdCgnLycpO1xuICAgIGZpbGVOYW1lID0gZmlsZVBhcnRzW2ZpbGVQYXJ0cy5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICBmaWxlTmFtZSA9ICc8dW5rbm93biBmaWxlPic7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxUb3VjaGFibGVIaWdobGlnaHRcbiAgICAgIGFjdGl2ZU9wYWNpdHk9ezAuNX1cbiAgICAgIHN0eWxlPXtzdHlsZXMub3BlbkluRWRpdG9yQnV0dG9ufVxuICAgICAgdW5kZXJsYXlDb2xvcj1cInRyYW5zcGFyZW50XCJcbiAgICAgIG9uUHJlc3M9e29wZW5GaWxlSW5FZGl0b3IuYmluZChudWxsLCBmaWxlLCBsaW5lTnVtYmVyKX0+XG4gICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmluc3BlY3RvckNvdW50VGV4dH0+XG4gICAgICAgIHtmaWxlTmFtZX06e2xpbmVOdW1iZXJ9XG4gICAgICA8L1RleHQ+XG4gICAgPC9Ub3VjaGFibGVIaWdobGlnaHQ+XG4gICk7XG59O1xuXG5jb25zdCBXYXJuaW5nSW5zcGVjdG9yID0gKHtcbiAgd2FybmluZ0luZm8sXG4gIHdhcm5pbmcsXG4gIHN0YWNrdHJhY2VWaXNpYmxlLFxuICBvbkRpc21pc3MsXG4gIG9uRGlzbWlzc0FsbCxcbiAgb25NaW5pbWl6ZSxcbiAgdG9nZ2xlU3RhY2t0cmFjZSxcbn0pID0+IHtcbiAgY29uc3QgU2Nyb2xsVmlldyA9IHJlcXVpcmUoJ1Njcm9sbFZpZXcnKTtcbiAgY29uc3QgVGV4dCA9IHJlcXVpcmUoJ1RleHQnKTtcbiAgY29uc3QgVG91Y2hhYmxlSGlnaGxpZ2h0ID0gcmVxdWlyZSgnVG91Y2hhYmxlSGlnaGxpZ2h0Jyk7XG4gIGNvbnN0IFZpZXcgPSByZXF1aXJlKCdWaWV3Jyk7XG4gIGNvbnN0IHtjb3VudCwgc3RhY2t0cmFjZX0gPSB3YXJuaW5nSW5mbyB8fCB7fTtcblxuICBjb25zdCBjb3VudFNlbnRlbmNlID1cbiAgICAnV2FybmluZyBlbmNvdW50ZXJlZCAnICsgY291bnQgKyAnIHRpbWUnICsgKGNvdW50IC0gMSA/ICdzJyA6ICcnKSArICcuJztcblxuICBsZXQgc3RhY2t0cmFjZUxpc3Q7XG4gIGlmIChzdGFja3RyYWNlVmlzaWJsZSAmJiBzdGFja3RyYWNlKSB7XG4gICAgc3RhY2t0cmFjZUxpc3QgPSAoXG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnN0YWNrdHJhY2VMaXN0fT5cbiAgICAgICAge3N0YWNrdHJhY2UubWFwKChmcmFtZSwgaWkpID0+IDxTdGFja1JvdyBmcmFtZT17ZnJhbWV9IGtleT17aWl9IC8+KX1cbiAgICAgIDwvVmlldz5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLmluc3BlY3Rvcn0+XG4gICAgICA8U2FmZUFyZWFWaWV3IHN0eWxlPXtzdHlsZXMuc2FmZUFyZWF9PlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmluc3BlY3RvckNvdW50fT5cbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmluc3BlY3RvckNvdW50VGV4dH0+e2NvdW50U2VudGVuY2V9PC9UZXh0PlxuICAgICAgICAgIDxUb3VjaGFibGVIaWdobGlnaHRcbiAgICAgICAgICAgIG9uUHJlc3M9e3RvZ2dsZVN0YWNrdHJhY2V9XG4gICAgICAgICAgICB1bmRlcmxheUNvbG9yPVwidHJhbnNwYXJlbnRcIj5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuaW5zcGVjdG9yQnV0dG9uVGV4dH0+XG4gICAgICAgICAgICAgIHtzdGFja3RyYWNlVmlzaWJsZSA/ICdcXHV7MjVCQ30nIDogJ1xcdXsyNUI2fSd9IFN0YWNrdHJhY2VcbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8L1RvdWNoYWJsZUhpZ2hsaWdodD5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgICA8U2Nyb2xsVmlldyBzdHlsZT17c3R5bGVzLmluc3BlY3Rvcldhcm5pbmd9PlxuICAgICAgICAgIHtzdGFja3RyYWNlTGlzdH1cbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmluc3BlY3Rvcldhcm5pbmdUZXh0fT57d2FybmluZ308L1RleHQ+XG4gICAgICAgIDwvU2Nyb2xsVmlldz5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5pbnNwZWN0b3JCdXR0b25zfT5cbiAgICAgICAgICA8VG91Y2hhYmxlSGlnaGxpZ2h0XG4gICAgICAgICAgICBhY3RpdmVPcGFjaXR5PXswLjV9XG4gICAgICAgICAgICBvblByZXNzPXtvbk1pbmltaXplfVxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5pbnNwZWN0b3JCdXR0b259XG4gICAgICAgICAgICB1bmRlcmxheUNvbG9yPVwidHJhbnNwYXJlbnRcIj5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuaW5zcGVjdG9yQnV0dG9uVGV4dH0+TWluaW1pemU8L1RleHQ+XG4gICAgICAgICAgPC9Ub3VjaGFibGVIaWdobGlnaHQ+XG4gICAgICAgICAgPFRvdWNoYWJsZUhpZ2hsaWdodFxuICAgICAgICAgICAgYWN0aXZlT3BhY2l0eT17MC41fVxuICAgICAgICAgICAgb25QcmVzcz17b25EaXNtaXNzfVxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5pbnNwZWN0b3JCdXR0b259XG4gICAgICAgICAgICB1bmRlcmxheUNvbG9yPVwidHJhbnNwYXJlbnRcIj5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuaW5zcGVjdG9yQnV0dG9uVGV4dH0+RGlzbWlzczwvVGV4dD5cbiAgICAgICAgICA8L1RvdWNoYWJsZUhpZ2hsaWdodD5cbiAgICAgICAgICA8VG91Y2hhYmxlSGlnaGxpZ2h0XG4gICAgICAgICAgICBhY3RpdmVPcGFjaXR5PXswLjV9XG4gICAgICAgICAgICBvblByZXNzPXtvbkRpc21pc3NBbGx9XG4gICAgICAgICAgICBzdHlsZT17c3R5bGVzLmluc3BlY3RvckJ1dHRvbn1cbiAgICAgICAgICAgIHVuZGVybGF5Q29sb3I9XCJ0cmFuc3BhcmVudFwiPlxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5pbnNwZWN0b3JCdXR0b25UZXh0fT5EaXNtaXNzIEFsbDwvVGV4dD5cbiAgICAgICAgICA8L1RvdWNoYWJsZUhpZ2hsaWdodD5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9TYWZlQXJlYVZpZXc+XG4gICAgPC9WaWV3PlxuICApO1xufTtcblxuY2xhc3MgWWVsbG93Qm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBtaXhlZCxcbiAge1xuICAgIHN0YWNrdHJhY2VWaXNpYmxlOiBib29sZWFuLFxuICAgIGluc3BlY3Rpbmc6ID9zdHJpbmcsXG4gICAgd2FybmluZ01hcDogTWFwPGFueSwgYW55PixcbiAgfSxcbj4ge1xuICBfbGlzdGVuZXI6ID9FbWl0dGVyU3Vic2NyaXB0aW9uO1xuICBkaXNtaXNzV2FybmluZzogKHdhcm5pbmc6ID9zdHJpbmcpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IG1peGVkLCBjb250ZXh0OiBtaXhlZCkge1xuICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaW5zcGVjdGluZzogbnVsbCxcbiAgICAgIHN0YWNrdHJhY2VWaXNpYmxlOiBmYWxzZSxcbiAgICAgIHdhcm5pbmdNYXA6IF93YXJuaW5nTWFwLFxuICAgIH07XG4gICAgdGhpcy5kaXNtaXNzV2FybmluZyA9IHdhcm5pbmcgPT4ge1xuICAgICAgY29uc3Qge2luc3BlY3RpbmcsIHdhcm5pbmdNYXB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIGlmICh3YXJuaW5nKSB7XG4gICAgICAgIHdhcm5pbmdNYXAuZGVsZXRlKHdhcm5pbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZ01hcC5jbGVhcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGluc3BlY3Rpbmc6IHdhcm5pbmcgJiYgaW5zcGVjdGluZyAhPT0gd2FybmluZyA/IGluc3BlY3RpbmcgOiBudWxsLFxuICAgICAgICB3YXJuaW5nTWFwLFxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBpZ25vcmVXYXJuaW5ncyh3YXJuaW5nczogQXJyYXk8c3RyaW5nPik6IHZvaWQge1xuICAgIHdhcm5pbmdzLmZvckVhY2goKHdhcm5pbmc6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKElHTk9SRURfV0FSTklOR1MuaW5kZXhPZih3YXJuaW5nKSA9PT0gLTEpIHtcbiAgICAgICAgSUdOT1JFRF9XQVJOSU5HUy5wdXNoKHdhcm5pbmcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgbGV0IHNjaGVkdWxlZCA9IG51bGw7XG4gICAgdGhpcy5fbGlzdGVuZXIgPSBfd2FybmluZ0VtaXR0ZXIuYWRkTGlzdGVuZXIoJ3dhcm5pbmcnLCB3YXJuaW5nTWFwID0+IHtcbiAgICAgIC8vIFVzZSBgc2V0SW1tZWRpYXRlYCBiZWNhdXNlIHdhcm5pbmdzIG9mdGVuIGhhcHBlbiBkdXJpbmcgcmVuZGVyLCBidXRcbiAgICAgIC8vIHN0YXRlIGNhbm5vdCBiZSBzZXQgd2hpbGUgcmVuZGVyaW5nLlxuICAgICAgc2NoZWR1bGVkID1cbiAgICAgICAgc2NoZWR1bGVkIHx8XG4gICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgc2NoZWR1bGVkID0gbnVsbDtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHdhcm5pbmdNYXAsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGNvbnN0IHtpbnNwZWN0aW5nfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKGluc3BlY3RpbmcgIT0gbnVsbCkge1xuICAgICAgZW5zdXJlU3ltYm9saWNhdGVkV2FybmluZyhpbnNwZWN0aW5nKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5fbGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVyLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoY29uc29sZS5kaXNhYmxlWWVsbG93Qm94IHx8IHRoaXMuc3RhdGUud2FybmluZ01hcC5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgU2Nyb2xsVmlldyA9IHJlcXVpcmUoJ1Njcm9sbFZpZXcnKTtcbiAgICBjb25zdCBWaWV3ID0gcmVxdWlyZSgnVmlldycpO1xuXG4gICAgY29uc3Qge2luc3BlY3RpbmcsIHN0YWNrdHJhY2VWaXNpYmxlfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgaW5zcGVjdG9yID1cbiAgICAgIGluc3BlY3RpbmcgIT09IG51bGwgPyAoXG4gICAgICAgIDxXYXJuaW5nSW5zcGVjdG9yXG4gICAgICAgICAgd2FybmluZ0luZm89e3RoaXMuc3RhdGUud2FybmluZ01hcC5nZXQoaW5zcGVjdGluZyl9XG4gICAgICAgICAgd2FybmluZz17aW5zcGVjdGluZ31cbiAgICAgICAgICBzdGFja3RyYWNlVmlzaWJsZT17c3RhY2t0cmFjZVZpc2libGV9XG4gICAgICAgICAgb25EaXNtaXNzPXsoKSA9PiB0aGlzLmRpc21pc3NXYXJuaW5nKGluc3BlY3RpbmcpfVxuICAgICAgICAgIG9uRGlzbWlzc0FsbD17KCkgPT4gdGhpcy5kaXNtaXNzV2FybmluZyhudWxsKX1cbiAgICAgICAgICBvbk1pbmltaXplPXsoKSA9PiB0aGlzLnNldFN0YXRlKHtpbnNwZWN0aW5nOiBudWxsfSl9XG4gICAgICAgICAgdG9nZ2xlU3RhY2t0cmFjZT17KCkgPT5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3N0YWNrdHJhY2VWaXNpYmxlOiAhc3RhY2t0cmFjZVZpc2libGV9KVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICkgOiBudWxsO1xuXG4gICAgY29uc3Qgcm93cyA9IFtdO1xuICAgIHRoaXMuc3RhdGUud2FybmluZ01hcC5mb3JFYWNoKCh3YXJuaW5nSW5mbywgd2FybmluZykgPT4ge1xuICAgICAgaWYgKCFpc1dhcm5pbmdJZ25vcmVkKHdhcm5pbmcpKSB7XG4gICAgICAgIHJvd3MucHVzaChcbiAgICAgICAgICA8V2FybmluZ1Jvd1xuICAgICAgICAgICAga2V5PXt3YXJuaW5nfVxuICAgICAgICAgICAgY291bnQ9e3dhcm5pbmdJbmZvLmNvdW50fVxuICAgICAgICAgICAgd2FybmluZz17d2FybmluZ31cbiAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IHRoaXMuc2V0U3RhdGUoe2luc3BlY3Rpbmc6IHdhcm5pbmd9KX1cbiAgICAgICAgICAgIG9uRGlzbWlzcz17KCkgPT4gdGhpcy5kaXNtaXNzV2FybmluZyh3YXJuaW5nKX1cbiAgICAgICAgICAvPixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGxpc3RTdHlsZSA9IFtcbiAgICAgIHN0eWxlcy5saXN0LFxuICAgICAgLy8gQWRkaXRpb25hbCBgMC40YCBzbyB0aGUgNXRoIHJvdyBjYW4gcGVlayBpbnRvIHZpZXcuXG4gICAgICB7aGVpZ2h0OiBNYXRoLm1pbihyb3dzLmxlbmd0aCwgNC40KSAqIChyb3dHdXR0ZXIgKyByb3dIZWlnaHQpfSxcbiAgICBdO1xuICAgIHJldHVybiAoXG4gICAgICA8VmlldyBzdHlsZT17aW5zcGVjdG9yID8gc3R5bGVzLmZ1bGxTY3JlZW4gOiBsaXN0U3R5bGV9PlxuICAgICAgICA8U2Nyb2xsVmlldyBzdHlsZT17bGlzdFN0eWxlfSBzY3JvbGxzVG9Ub3A9e2ZhbHNlfT5cbiAgICAgICAgICB7cm93c31cbiAgICAgICAgPC9TY3JvbGxWaWV3PlxuICAgICAgICB7aW5zcGVjdG9yfVxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgYmFja2dyb3VuZENvbG9yID0gb3BhY2l0eSA9PiAncmdiYSgyNTAsIDE4NiwgNDgsICcgKyBvcGFjaXR5ICsgJyknO1xuY29uc3QgdGV4dENvbG9yID0gJ3doaXRlJztcbmNvbnN0IHJvd0d1dHRlciA9IDE7XG5jb25zdCByb3dIZWlnaHQgPSA0NjtcblxuLy8gRm9yIHVua25vd24gcmVhc29ucywgc2V0dGluZyBlbGV2YXRpb246IE51bWJlci5NQVhfVkFMVUUgY2F1c2VzIHJlbW90ZSBkZWJ1Z2dpbmcgdG9cbi8vIGhhbmcgb24gaU9TIChzb21lIHNvcnQgb2Ygb3ZlcmZsb3cgbWF5YmUpLiBTZXR0aW5nIGl0IHRvIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIGZpeGVzIHRoZSBpT1MgaXNzdWUsIGJ1dCBzaW5jZVxuLy8gZWxldmF0aW9uIGlzIGFuIGFuZHJvaWQtb25seSBzdHlsZSBwcm9wZXJ0eSB3ZSBtaWdodCBhcyB3ZWxsIHJlbW92ZSBpdCBhbHRvZ2V0aGVyIGZvciBpT1MuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvaXNzdWVzLzEyMjIzXG5jb25zdCBlbGV2YXRpb24gPVxuICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnID8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgOiB1bmRlZmluZWQ7XG5cbnZhciBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGZ1bGxTY3JlZW46IHtcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGVsZXZhdGlvbjogZWxldmF0aW9uLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB9LFxuICBpbnNwZWN0b3I6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcigwLjk1KSxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBwYWRkaW5nVG9wOiA1LFxuICAgIGVsZXZhdGlvbjogZWxldmF0aW9uLFxuICB9LFxuICBpbnNwZWN0b3JCdXR0b25zOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gIH0sXG4gIGluc3BlY3RvckJ1dHRvbjoge1xuICAgIGZsZXg6IDEsXG4gICAgcGFkZGluZ1ZlcnRpY2FsOiAyMixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcigxKSxcbiAgfSxcbiAgc2FmZUFyZWE6IHtcbiAgICBmbGV4OiAxLFxuICB9LFxuICBzdGFja3RyYWNlTGlzdDoge1xuICAgIHBhZGRpbmdCb3R0b206IDUsXG4gIH0sXG4gIGluc3BlY3RvckJ1dHRvblRleHQ6IHtcbiAgICBjb2xvcjogdGV4dENvbG9yLFxuICAgIGZvbnRTaXplOiAxNCxcbiAgICBvcGFjaXR5OiAwLjgsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgfSxcbiAgb3BlbkluRWRpdG9yQnV0dG9uOiB7XG4gICAgcGFkZGluZ1RvcDogNSxcbiAgICBwYWRkaW5nQm90dG9tOiA1LFxuICB9LFxuICBpbnNwZWN0b3JDb3VudDoge1xuICAgIHBhZGRpbmc6IDE1LFxuICAgIHBhZGRpbmdCb3R0b206IDAsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgfSxcbiAgaW5zcGVjdG9yQ291bnRUZXh0OiB7XG4gICAgY29sb3I6IHRleHRDb2xvcixcbiAgICBmb250U2l6ZTogMTQsXG4gIH0sXG4gIGluc3BlY3Rvcldhcm5pbmc6IHtcbiAgICBmbGV4OiAxLFxuICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxNSxcbiAgfSxcbiAgaW5zcGVjdG9yV2FybmluZ1RleHQ6IHtcbiAgICBjb2xvcjogdGV4dENvbG9yLFxuICAgIGZvbnRTaXplOiAxNixcbiAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgfSxcbiAgbGlzdDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBlbGV2YXRpb246IGVsZXZhdGlvbixcbiAgfSxcbiAgbGlzdFJvdzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yKDAuOTUpLFxuICAgIGhlaWdodDogcm93SGVpZ2h0LFxuICAgIG1hcmdpblRvcDogcm93R3V0dGVyLFxuICB9LFxuICBsaXN0Um93Q29udGVudDoge1xuICAgIGZsZXg6IDEsXG4gIH0sXG4gIGxpc3RSb3dDb3VudDoge1xuICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgfSxcbiAgbGlzdFJvd1RleHQ6IHtcbiAgICBjb2xvcjogdGV4dENvbG9yLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnID8gNSA6IDcsXG4gICAgbWFyZ2luTGVmdDogMTUsXG4gICAgbWFyZ2luUmlnaHQ6IDE1LFxuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gWWVsbG93Qm94O1xuIl19