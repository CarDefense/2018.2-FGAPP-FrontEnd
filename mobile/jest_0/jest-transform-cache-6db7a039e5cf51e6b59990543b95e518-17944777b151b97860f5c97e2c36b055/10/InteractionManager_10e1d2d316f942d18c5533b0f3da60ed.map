{"version":3,"sources":["InteractionManager.js"],"names":["BatchedBridge","require","EventEmitter","Set","TaskQueue","infoLog","invariant","keyMirror","_emitter","DEBUG_DELAY","DEBUG","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","tasks","promise","Promise","_scheduleUpdate","push","run","resolve","name","_taskQueue","enqueueTasks","then","bind","done","console","warn","cancel","cancelTasks","createInteractionHandle","handle","_inc","_addInteractionSet","add","clearInteractionHandle","delete","_deleteInteractionSet","addListener","setDeadline","deadline","_deadline","_interactionSet","onMoreTasks","_nextUpdateHandle","setTimeout","_processUpdate","setImmediate","interactionCount","size","forEach","nextInteractionCount","emit","hasTasksToProcess","processNext","getEventLoopRunningTime","clear","module","exports"],"mappings":"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","file":"InteractionManager.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule InteractionManager\n * @flow\n */\n'use strict';\n\nconst BatchedBridge = require('BatchedBridge');\nconst EventEmitter = require('EventEmitter');\nconst Set = require('Set');\nconst TaskQueue = require('TaskQueue');\n\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst keyMirror = require('fbjs/lib/keyMirror');\n\ntype Handle = number;\nimport type {Task} from 'TaskQueue';\n\nconst _emitter = new EventEmitter();\n\nconst DEBUG_DELAY = 0;\nconst DEBUG = false;\n\n/**\n * InteractionManager allows long-running work to be scheduled after any\n * interactions/animations have completed. In particular, this allows JavaScript\n * animations to run smoothly.\n *\n * Applications can schedule tasks to run after interactions with the following:\n *\n * ```\n * InteractionManager.runAfterInteractions(() => {\n *   // ...long-running synchronous task...\n * });\n * ```\n *\n * Compare this to other scheduling alternatives:\n *\n * - requestAnimationFrame(): for code that animates a view over time.\n * - setImmediate/setTimeout(): run code later, note this may delay animations.\n * - runAfterInteractions(): run code later, without delaying active animations.\n *\n * The touch handling system considers one or more active touches to be an\n * 'interaction' and will delay `runAfterInteractions()` callbacks until all\n * touches have ended or been cancelled.\n *\n * InteractionManager also allows applications to register animations by\n * creating an interaction 'handle' on animation start, and clearing it upon\n * completion:\n *\n * ```\n * var handle = InteractionManager.createInteractionHandle();\n * // run animation... (`runAfterInteractions` tasks are queued)\n * // later, on animation completion:\n * InteractionManager.clearInteractionHandle(handle);\n * // queued tasks run if all handles were cleared\n * ```\n *\n * `runAfterInteractions` takes either a plain callback function, or a\n * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a\n * `PromiseTask` is supplied, then it is fully resolved (including asynchronous\n * dependencies that also schedule more tasks via `runAfterInteractions`) before\n * starting on the next task that might have been queued up synchronously\n * earlier.\n *\n * By default, queued tasks are executed together in a loop in one\n * `setImmediate` batch. If `setDeadline` is called with a positive number, then\n * tasks will only be executed until the deadline (in terms of js event loop run\n * time) approaches, at which point execution will yield via setTimeout,\n * allowing events such as touches to start interactions and block queued tasks\n * from executing, making apps more responsive.\n */\nvar InteractionManager = {\n  Events: keyMirror({\n    interactionStart: true,\n    interactionComplete: true,\n  }),\n\n  /**\n   * Schedule a function to run after all interactions have completed. Returns a cancellable\n   * \"promise\".\n   */\n  runAfterInteractions(task: ?Task): {then: Function, done: Function, cancel: Function} {\n    const tasks = [];\n    const promise = new Promise(resolve => {\n      _scheduleUpdate();\n      if (task) {\n        tasks.push(task);\n      }\n      tasks.push({run: resolve, name: 'resolve ' + (task && task.name || '?')});\n      _taskQueue.enqueueTasks(tasks);\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: (...args) => {\n        if (promise.done) {\n          return promise.done(...args);\n        } else {\n          console.warn('Tried to call done when not supported by current Promise implementation.');\n        }\n      },\n      cancel: function() {\n        _taskQueue.cancelTasks(tasks);\n      },\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle(): Handle {\n    DEBUG && infoLog('create interaction handle');\n    _scheduleUpdate();\n    var handle = ++_inc;\n    _addInteractionSet.add(handle);\n    return handle;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle: Handle) {\n    DEBUG && infoLog('clear interaction handle');\n    invariant(\n      !!handle,\n      'Must provide a handle to clear.'\n    );\n    _scheduleUpdate();\n    _addInteractionSet.delete(handle);\n    _deleteInteractionSet.add(handle);\n  },\n\n  addListener: _emitter.addListener.bind(_emitter),\n\n  /**\n   * A positive number will use setTimeout to schedule any tasks after the\n   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be\n   * executed in one setImmediate batch (default).\n   */\n  setDeadline(deadline: number) {\n    _deadline = deadline;\n  },\n};\n\nconst _interactionSet = new Set();\nconst _addInteractionSet = new Set();\nconst _deleteInteractionSet = new Set();\nconst _taskQueue = new TaskQueue({onMoreTasks: _scheduleUpdate});\nlet _nextUpdateHandle = 0;\nlet _inc = 0;\nlet _deadline = -1;\n\ndeclare function setImmediate(callback: any, ...args: Array<any>): number;\n\n/**\n * Schedule an asynchronous update to the interaction state.\n */\nfunction _scheduleUpdate() {\n  if (!_nextUpdateHandle) {\n    if (_deadline > 0) {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);\n    } else {\n      _nextUpdateHandle = setImmediate(_processUpdate);\n    }\n  }\n}\n\n/**\n * Notify listeners, process queue, etc\n */\nfunction _processUpdate() {\n  _nextUpdateHandle = 0;\n\n  var interactionCount = _interactionSet.size;\n  _addInteractionSet.forEach(handle =>\n    _interactionSet.add(handle)\n  );\n  _deleteInteractionSet.forEach(handle =>\n    _interactionSet.delete(handle)\n  );\n  var nextInteractionCount = _interactionSet.size;\n\n  if (interactionCount !== 0 && nextInteractionCount === 0) {\n    // transition from 1+ --> 0 interactions\n    _emitter.emit(InteractionManager.Events.interactionComplete);\n  } else if (interactionCount === 0 && nextInteractionCount !== 0) {\n    // transition from 0 --> 1+ interactions\n    _emitter.emit(InteractionManager.Events.interactionStart);\n  }\n\n  // process the queue regardless of a transition\n  if (nextInteractionCount === 0) {\n    while (_taskQueue.hasTasksToProcess()) {\n      _taskQueue.processNext();\n      if (_deadline > 0 &&\n          BatchedBridge.getEventLoopRunningTime() >= _deadline) {\n        // Hit deadline before processing all tasks, so process more later.\n        _scheduleUpdate();\n        break;\n      }\n    }\n  }\n  _addInteractionSet.clear();\n  _deleteInteractionSet.clear();\n}\n\nmodule.exports = InteractionManager;\n"]}