{"version":3,"sources":["RCTLog.js"],"names":["invariant","require","levelsMap","log","info","warn","error","fatal","warningHandler","RCTLog","logIfNoNativeHook","level","args","global","nativeLoggingHook","logToConsole","logFn","Object","keys","toString","setWarningHandler","handler","module","exports"],"mappings":"AASA,a,wKAEA,GAAMA,WAAYC,OAAZ,sBAAN,CAEA,GAAMC,WAAY,CAChBC,IAAK,KADW,CAEhBC,KAAM,MAFU,CAGhBC,KAAM,MAHU,CAIhBC,MAAO,OAJS,CAKhBC,MAAO,OALS,CAAlB,CAQA,GAAIC,gBAAwC,IAA5C,CAEA,GAAMC,QAAS,CAEbC,iBAFa,4BAEKC,KAFL,CAE+C,+BAAxBC,IAAwB,iDAAxBA,IAAwB,0BAE1D,GAAI,MAAOC,QAAOC,iBAAd,GAAoC,WAAxC,CAAqD,CACnDL,OAAOM,YAAP,eAAoBJ,KAApB,4BAA8BC,IAA9B,IACD,CAFD,IAEO,CAEL,GAAIJ,gBAAkBG,QAAU,MAAhC,CAAwC,CACtCH,kDAAkBI,IAAlB,GACD,CACF,CACF,CAZY,CAebG,YAfa,uBAeAJ,KAfA,CAe0C,cACrD,GAAMK,OAAQd,UAAUS,KAAV,CAAd,CACAX,UACEgB,KADF,CAEE,UAAYL,KAAZ,CAAoB,eAApB,CAAsCM,OAAOC,IAAP,CAAYhB,SAAZ,EAAuBiB,QAAvB,EAFxC,EAFqD,+BAAxBP,IAAwB,uDAAxBA,IAAwB,4BAOrD,mBAAQI,KAAR,oCAAkBJ,IAAlB,GACD,CAvBY,CAyBbQ,iBAzBa,4BAyBKC,OAzBL,CAyB2C,CACtDb,eAAiBa,OAAjB,CACD,CA3BY,CAAf,CA8BAC,OAAOC,OAAP,CAAiBd,MAAjB","file":"RCTLog.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule RCTLog\n * @flow\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error',\n};\n\nlet warningHandler: ?(Array<any> => void) = null;\n\nconst RCTLog = {\n  // level one of log, info, warn, error, mustfix\n  logIfNoNativeHook(level: string, ...args: Array<any>): void {\n    // We already printed in the native console, so only log here if using a js debugger\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      RCTLog.logToConsole(level, ...args);\n    } else {\n      // Report native warnings to YellowBox\n      if (warningHandler && level === 'warn') {\n        warningHandler(...args);\n      }\n    }\n  },\n\n  // Log to console regardless of nativeLoggingHook\n  logToConsole(level: string, ...args: Array<any>): void {\n    const logFn = levelsMap[level];\n    invariant(\n      logFn,\n      'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString()\n    );\n\n    console[logFn](...args);\n  },\n\n  setWarningHandler(handler: typeof warningHandler): void {\n    warningHandler = handler;\n  }\n};\n\nmodule.exports = RCTLog;\n"]}