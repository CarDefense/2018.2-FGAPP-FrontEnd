{"version":3,"sources":["AnimatedValue.js"],"names":["AnimatedInterpolation","require","AnimatedNode","AnimatedWithChildren","InteractionManager","NativeAnimatedHelper","NativeAnimatedAPI","API","_uniqueId","_flush","rootNode","animatedStyles","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","animatedStyle","AnimatedValue","value","_startingValue","_value","_offset","_animation","_listeners","stopAnimation","Object","keys","length","_startListeningToNativeValueUpdates","stop","_updateValue","__isNative","setAnimatedNodeValue","__getNativeTag","offset","setAnimatedNodeOffset","flattenAnimatedNodeOffset","extractAnimatedNodeOffset","callback","id","String","_stopListeningForNativeValueUpdates","__nativeAnimatedValueListener","startListeningToAnimatedNodeValue","nativeEventEmitter","addListener","data","tag","remove","stopListeningToAnimatedNodeValue","stopTracking","__getValue","config","animation","handle","__isInteraction","createInteractionHandle","previousAnimation","start","clearInteractionHandle","result","_tracking","__detach","tracking","flush","key","type","module","exports"],"mappings":"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","file":"AnimatedValue.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule AnimatedValue\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedInterpolation = require('./AnimatedInterpolation');\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst InteractionManager = require('InteractionManager');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nimport type Animation, {EndCallback} from '../animations/Animation';\nimport type {InterpolationConfigType} from './AnimatedInterpolation';\nimport type AnimatedTracking from './AnimatedTracking';\n\nconst NativeAnimatedAPI = NativeAnimatedHelper.API;\n\ntype ValueListenerCallback = (state: {value: number}) => void;\n\nlet _uniqueId = 1;\n\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\nfunction _flush(rootNode: AnimatedValue): void {\n  const animatedStyles = new Set();\n  function findAnimatedStyles(node) {\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  /* $FlowFixMe */\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See http://facebook.github.io/react-native/docs/animatedvalue.html\n */\nclass AnimatedValue extends AnimatedWithChildren {\n  _value: number;\n  _startingValue: number;\n  _offset: number;\n  _animation: ?Animation;\n  _tracking: ?AnimatedTracking;\n  _listeners: {[key: string]: ValueListenerCallback};\n  __nativeAnimatedValueListener: ?any;\n\n  constructor(value: number) {\n    super();\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n    this._listeners = {};\n  }\n\n  __detach() {\n    this.stopAnimation();\n    super.__detach();\n  }\n\n  __getValue(): number {\n    return this._value + this._offset;\n  }\n\n  __makeNative() {\n    super.__makeNative();\n\n    if (Object.keys(this._listeners).length) {\n      this._startListeningToNativeValueUpdates();\n    }\n  }\n\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setvalue\n   */\n  setValue(value: number): void {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(\n      value,\n      !this.__isNative /* don't perform a flush for natively driven values */,\n    );\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setoffset\n   */\n  setOffset(offset: number): void {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#flattenoffset\n   */\n  flattenOffset(): void {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#extractoffset\n   */\n  extractOffset(): void {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to\n   * synchronously read the value because it might be driven natively.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#addlistener\n   */\n  addListener(callback: ValueListenerCallback): string {\n    const id = String(_uniqueId++);\n    this._listeners[id] = callback;\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n    return id;\n  }\n\n  /**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removelistener\n   */\n  removeListener(id: string): void {\n    delete this._listeners[id];\n    if (this.__isNative && Object.keys(this._listeners).length === 0) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  /**\n   * Remove all registered listeners.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removealllisteners\n   */\n  removeAllListeners(): void {\n    this._listeners = {};\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  _startListeningToNativeValueUpdates() {\n    if (this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener(\n      'onAnimatedValueUpdate',\n      data => {\n        if (data.tag !== this.__getNativeTag()) {\n          return;\n        }\n        this._updateValue(data.value, false /* flush */);\n      },\n    );\n  }\n\n  _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#stopanimation\n   */\n  stopAnimation(callback?: ?(value: number) => void): void {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#resetanimation\n   */\n  resetAnimation(callback?: ?(value: number) => void): void {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#animate\n   */\n  animate(animation: Animation, callback: ?EndCallback): void {\n    let handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    const previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(\n      this._value,\n      value => {\n        // Natively driven animations will never call into that callback, therefore we can always\n        // pass flush = true to allow the updated value to propagate to native with setNativeProps\n        this._updateValue(value, true /* flush */);\n      },\n      result => {\n        this._animation = null;\n        if (handle !== null) {\n          InteractionManager.clearInteractionHandle(handle);\n        }\n        callback && callback(result);\n      },\n      previousAnimation,\n      this,\n    );\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  stopTracking(): void {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  track(tracking: AnimatedTracking): void {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n\n  _updateValue(value: number, flush: boolean): void {\n    this._value = value;\n    if (flush) {\n      _flush(this);\n    }\n    for (const key in this._listeners) {\n      this._listeners[key]({value: this.__getValue()});\n    }\n  }\n\n  __getNativeConfig(): Object {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset,\n    };\n  }\n}\n\nmodule.exports = AnimatedValue;\n"]}