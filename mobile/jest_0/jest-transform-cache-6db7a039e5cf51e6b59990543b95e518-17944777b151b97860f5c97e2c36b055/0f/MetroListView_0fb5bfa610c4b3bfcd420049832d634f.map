{"version":3,"sources":["MetroListView.js"],"names":["ListView","require","React","RefreshControl","ScrollView","invariant","MetroListView","state","_computeState","props","ds","DataSource","rowHasChanged","itemA","itemB","sectionHeaderHasChanged","getSectionHeaderData","dataBlob","sectionID","sectionHeaderData","_captureRef","_listRef","ref","_renderFooter","_renderRow","item","rowID","highlightRow","renderItem","index","_renderSectionHeader","section","renderSectionHeader","_renderSeparator","sID","rID","params","Error","animated","offset","scrollTo","horizontal","x","y","setNativeProps","newProps","setState","FooterComponent","sections","SeparatorComponent","items","forEach","sectionIn","ii","data","cloneWithRowsAndSections","cloneWithRows","Component","defaultProps","keyExtractor","key","String","renderScrollComponent","onRefresh","refreshing","module","exports"],"mappings":"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","file":"MetroListView.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule MetroListView\n * @flow\n * @format\n */\n'use strict';\n\nconst ListView = require('ListView');\nconst React = require('React');\nconst RefreshControl = require('RefreshControl');\nconst ScrollView = require('ScrollView');\n\nconst invariant = require('fbjs/lib/invariant');\n\ntype Item = any;\n\ntype NormalProps = {\n  FooterComponent?: React.ComponentType<*>,\n  renderItem: (info: Object) => ?React.Element<any>,\n  /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n   * suppresses an error when upgrading Flow's support for React. To see the\n   * error delete this comment and run Flow. */\n  renderSectionHeader?: ({section: Object}) => ?React.Element<any>,\n  SeparatorComponent?: ?React.ComponentType<*>, // not supported yet\n\n  // Provide either `items` or `sections`\n  items?: ?Array<Item>, // By default, an Item is assumed to be {key: string}\n  // $FlowFixMe - Something is a little off with the type Array<Item>\n  sections?: ?Array<{key: string, data: Array<Item>}>,\n\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?Function,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: boolean,\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n};\ntype DefaultProps = {\n  keyExtractor: (item: Item, index: number) => string,\n};\ntype Props = NormalProps & DefaultProps;\n\n/**\n * This is just a wrapper around the legacy ListView that matches the new API of FlatList, but with\n * some section support tacked on. It is recommended to just use FlatList directly, this component\n * is mostly for debugging and performance comparison.\n */\nclass MetroListView extends React.Component<Props, $FlowFixMeState> {\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    throw new Error('scrollToEnd not supported in legacy ListView.');\n  }\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToIndex not supported in legacy ListView.');\n  }\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: Item,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToItem not supported in legacy ListView.');\n  }\n  scrollToLocation(params: {\n    animated?: ?boolean,\n    itemIndex: number,\n    sectionIndex: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToLocation not supported in legacy ListView.');\n  }\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    const {animated, offset} = params;\n    this._listRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n  getListRef() {\n    return this._listRef;\n  }\n  setNativeProps(props: Object) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n  static defaultProps: DefaultProps = {\n    keyExtractor: (item, index) => item.key || String(index),\n    renderScrollComponent: (props: Props) => {\n      if (props.onRefresh) {\n        return (\n          <ScrollView\n            {...props}\n            refreshControl={\n              /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss)\n               * This comment suppresses an error when upgrading Flow's support\n               * for React. To see the error delete this comment and run Flow.\n               */\n              <RefreshControl\n                refreshing={props.refreshing}\n                onRefresh={props.onRefresh}\n              />\n            }\n          />\n        );\n      } else {\n        return <ScrollView {...props} />;\n      }\n    },\n  };\n  state = this._computeState(this.props, {\n    ds: new ListView.DataSource({\n      rowHasChanged: (itemA, itemB) => true,\n      sectionHeaderHasChanged: () => true,\n      getSectionHeaderData: (dataBlob, sectionID) =>\n        this.state.sectionHeaderData[sectionID],\n    }),\n    sectionHeaderData: {},\n  });\n  UNSAFE_componentWillReceiveProps(newProps: Props) {\n    this.setState(state => this._computeState(newProps, state));\n  }\n  render() {\n    return (\n      <ListView\n        {...this.props}\n        dataSource={this.state.ds}\n        ref={this._captureRef}\n        renderRow={this._renderRow}\n        renderFooter={this.props.FooterComponent && this._renderFooter}\n        renderSectionHeader={this.props.sections && this._renderSectionHeader}\n        renderSeparator={this.props.SeparatorComponent && this._renderSeparator}\n      />\n    );\n  }\n  _listRef: ListView;\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n  _computeState(props: Props, state) {\n    const sectionHeaderData = {};\n    if (props.sections) {\n      invariant(!props.items, 'Cannot have both sections and items props.');\n      const sections = {};\n      props.sections.forEach((sectionIn, ii) => {\n        const sectionID = 's' + ii;\n        sections[sectionID] = sectionIn.data;\n        sectionHeaderData[sectionID] = sectionIn;\n      });\n      return {\n        ds: state.ds.cloneWithRowsAndSections(sections),\n        sectionHeaderData,\n      };\n    } else {\n      invariant(!props.sections, 'Cannot have both sections and items props.');\n      return {\n        ds: state.ds.cloneWithRows(props.items),\n        sectionHeaderData,\n      };\n    }\n  }\n  /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n   * suppresses an error when upgrading Flow's support for React. To see the\n   * error delete this comment and run Flow. */\n  _renderFooter = () => <this.props.FooterComponent key=\"$footer\" />;\n  _renderRow = (item, sectionID, rowID, highlightRow) => {\n    return this.props.renderItem({item, index: rowID});\n  };\n  _renderSectionHeader = (section, sectionID) => {\n    const {renderSectionHeader} = this.props;\n    invariant(\n      renderSectionHeader,\n      'Must provide renderSectionHeader with sections prop',\n    );\n    return renderSectionHeader({section});\n  };\n  _renderSeparator = (sID, rID) => (\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    <this.props.SeparatorComponent key={sID + rID} />\n  );\n}\n\nmodule.exports = MetroListView;\n"]}