{"version":3,"sources":["Easing.js"],"names":["ease","Easing","n","t","bezier","Math","pow","cos","PI","sqrt","bounciness","p","s","undefined","x1","y1","x2","y2","_bezier","require","easing","module","exports"],"mappings":"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","file":"Easing.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule Easing\n * @flow\n */\n'use strict';\n\nlet ease;\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nclass Easing {\n  /**\n   * A stepping function, returns 1 for any positive value of `n`.\n   */\n  static step0(n: number) {\n    return n > 0 ? 1 : 0;\n  }\n\n  /**\n   * A stepping function, returns 1 if `n` is greater than or equal to 1.\n   */\n  static step1(n: number) {\n    return n >= 1 ? 1 : 0;\n  }\n\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  static linear(t: number) {\n    return t;\n  }\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  static ease(t: number): number {\n    if (!ease) {\n      ease = Easing.bezier(0.42, 0, 1, 1);\n    }\n    return ease(t);\n  }\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  static quad(t: number) {\n    return t * t;\n  }\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  static cubic(t: number) {\n    return t * t * t;\n  }\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  static poly(n: number) {\n    return (t: number) => Math.pow(t, n);\n  }\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  static sin(t: number) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  static circle(t: number) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  static exp(t: number) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  static elastic(bounciness: number = 1): (t: number) => number {\n    const p = bounciness * Math.PI;\n    return (t) => 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);\n  }\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  static back(s: number): (t: number) => number {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return (t) => t * t * ((s + 1) * t - s);\n  }\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  static bounce(t: number): number {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    }\n\n    if (t < 2 / 2.75) {\n      t -= 1.5 / 2.75;\n      return 7.5625 * t * t + 0.75;\n    }\n\n    if (t < 2.5 / 2.75) {\n      t -= 2.25 / 2.75;\n      return 7.5625 * t * t + 0.9375;\n    }\n\n    t -= 2.625 / 2.75;\n    return 7.5625 * t * t + 0.984375;\n  }\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  static bezier(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number\n  ): (t: number) => number {\n    const _bezier = require('bezier');\n    return _bezier(x1, y1, x2, y2);\n  }\n\n  /**\n   * Runs an easing function forwards.\n   */\n  static in(\n    easing: (t: number) => number,\n  ): (t: number) => number {\n    return easing;\n  }\n\n  /**\n   * Runs an easing function backwards.\n   */\n  static out(\n    easing: (t: number) => number,\n  ): (t: number) => number {\n    return (t) => 1 - easing(1 - t);\n  }\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  static inOut(\n    easing: (t: number) => number,\n  ): (t: number) => number {\n    return (t) => {\n      if (t < 0.5) {\n        return easing(t * 2) / 2;\n      }\n      return 1 - easing((1 - t) * 2) / 2;\n    };\n  }\n}\n\nmodule.exports = Easing;\n"]}