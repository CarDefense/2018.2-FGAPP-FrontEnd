{"version":3,"sources":["LogSerialization.js"],"names":["EXPO_CONSOLE_METHOD_NAME","serializeLogDataAsync","data","level","serializedValues","includesStack","_stackTraceLogsSupported","_isUnhandledPromiseRejection","rawStack","syntheticError","stack","_symbolicateErrorAsync","length","_stringifyLogData","errorMessage","split","message","_formatStack","Error","_serializeErrorAsync","serializedError","hasOwnProperty","error","_captureConsoleStackTrace","join","body","map","item","formattedStack","parsedStack","symbolicatedStack","_removeProjectRoot","line","frame","file","lineNumber","column","methodName","filename","projectRoot","_getProjectRoot","startsWith","substring","__DEV__","test","stackLines","consoleMethodIndex","findIndex","includes","slice","Constants","manifest","developer"],"mappings":"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","file":"LogSerialization.js","sourcesContent":["// @flow\n\nimport prettyFormat from 'pretty-format';\nimport parseErrorStack, {\n  type StackFrame,\n} from 'react-native/Libraries/Core/Devtools/parseErrorStack';\nimport symbolicateStackTrace from 'react-native/Libraries/Core/Devtools/symbolicateStackTrace';\n\nimport { type LogData, type LogLevel } from './RemoteLogging';\nimport Constants from '../Constants';\n\ntype SerializedData = {\n  body: Array<LogData>,\n  includesStack: boolean,\n};\n\nexport const EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';\n\nasync function serializeLogDataAsync(data: Array<mixed>, level: LogLevel): Promise<SerializedData> {\n  let serializedValues: $ReadOnlyArray<LogData>;\n  let includesStack = false;\n\n  if (_stackTraceLogsSupported()) {\n    if (_isUnhandledPromiseRejection(data, level)) {\n      let rawStack = ((data[0]: any): string);\n      let syntheticError = ({ stack: rawStack }: any);\n      let stack = await _symbolicateErrorAsync(syntheticError);\n\n      if (!stack.length) {\n        serializedValues = _stringifyLogData(data);\n      } else {\n        // NOTE: This doesn't handle error messages with newlines\n        let errorMessage = rawStack.split('\\n')[1];\n        serializedValues = [\n          {\n            message: `[Unhandled promise rejection: ${errorMessage}]`,\n            stack: _formatStack(stack),\n          },\n        ];\n        includesStack = true;\n      }\n    } else if (data.length === 1 && data[0] instanceof Error) {\n      // When there's only one argument to the log function and that argument is an error, we\n      // include the error's stack. If there's more than one argument then we don't include the\n      // stack because it's not easy to display nicely in our current UI.\n\n      let serializedError = await _serializeErrorAsync(data[0]);\n      serializedValues = [serializedError];\n      includesStack = serializedError.hasOwnProperty('stack');\n    } else if (level === 'warn' || level === 'error') {\n      // For console.warn and console.error it is usually useful to know the stack that leads to the\n      // warning or error, so we provide this information to help out with debugging\n\n      let error = _captureConsoleStackTrace();\n      // [\"hello\", \"world\"] becomes \"hello, world\"\n      let errorMessage = _stringifyLogData(data).join(', ');\n\n      let serializedError = await _serializeErrorAsync(error, errorMessage);\n      serializedValues = [serializedError];\n      includesStack = serializedError.hasOwnProperty('stack');\n    } else {\n      serializedValues = _stringifyLogData(data);\n    }\n  } else {\n    serializedValues = _stringifyLogData(data);\n  }\n\n  return {\n    body: [...serializedValues],\n    includesStack,\n  };\n}\n\nfunction _stringifyLogData(data: Array<mixed>): Array<string> {\n  return data.map(item => {\n    if (typeof item === 'string') {\n      return item;\n    } else {\n      return prettyFormat(item);\n    }\n  });\n}\n\nasync function _serializeErrorAsync(error: Error, message?: string): Promise<LogData> {\n  if (message == null) {\n    message = error.message;\n  }\n\n  if (!error.stack || !error.stack.length) {\n    return prettyFormat(error);\n  }\n\n  let stack = await _symbolicateErrorAsync(error);\n  let formattedStack = _formatStack(stack);\n\n  return { message, stack: formattedStack };\n}\n\nasync function _symbolicateErrorAsync(error: Error): Promise<Array<StackFrame>> {\n  let parsedStack = parseErrorStack(error);\n  let symbolicatedStack: ?Array<StackFrame>;\n  try {\n    symbolicatedStack = await symbolicateStackTrace(parsedStack);\n  } catch (error) {\n    return parsedStack;\n  }\n\n  // In this context an unsymbolicated stack is better than no stack\n  if (!symbolicatedStack) {\n    return parsedStack;\n  }\n\n  // Clean the stack trace\n  return symbolicatedStack.map(_removeProjectRoot);\n}\n\nfunction _formatStack(stack: Array<StackFrame>): string {\n  return stack\n    .map(frame => {\n      let line = `${frame.file}:${frame.lineNumber}`;\n      if (frame.column != null) {\n        line += `:${frame.column}`;\n      }\n      line += ` in ${frame.methodName}`;\n      return line;\n    })\n    .join('\\n');\n}\n\nfunction _removeProjectRoot(frame: StackFrame): StackFrame {\n  let filename = frame.file;\n  if (filename == null) {\n    return frame;\n  }\n\n  let projectRoot = _getProjectRoot();\n  if (projectRoot == null) {\n    return frame;\n  }\n\n  if (filename.startsWith(projectRoot)) {\n    filename = filename.substring(projectRoot.length);\n    if (filename[0] === '/' || filename[0] === '\\\\') {\n      filename = filename.substring(1);\n    }\n    frame.file = filename;\n  }\n\n  return frame;\n}\n\n/**\n * Returns whether the development server that served this project supports logs with a stack trace.\n * Specifically, the version of exp/XDE that includes `projectRoot` in the manifest also accepts\n * payloads of the form:\n *\n * {\n *   includesStack: boolean, body: [{ message: string, stack: string }],\n * }\n */\nfunction _stackTraceLogsSupported(): boolean {\n  return !!(__DEV__ && _getProjectRoot());\n}\n\nfunction _isUnhandledPromiseRejection(data: Array<mixed>, level: LogLevel): boolean {\n  return (\n    level === 'warn' &&\n    typeof data[0] === 'string' &&\n    /^Possible Unhandled Promise Rejection/.test(data[0])\n  );\n}\n\nfunction _captureConsoleStackTrace(): Error {\n  try {\n    throw new Error();\n  } catch (error) {\n    let stackLines = error.stack.split('\\n');\n    let consoleMethodIndex = stackLines.findIndex(frame =>\n      frame.includes(EXPO_CONSOLE_METHOD_NAME)\n    );\n    if (consoleMethodIndex !== -1) {\n      stackLines = stackLines.slice(consoleMethodIndex + 1);\n      error.stack = stackLines.join('\\n');\n    }\n    return error;\n  }\n}\n\nfunction _getProjectRoot(): ?string {\n  return Constants.manifest && Constants.manifest.developer\n    ? Constants.manifest.developer.projectRoot\n    : null;\n}\n\nexport default {\n  serializeLogDataAsync,\n};\n"]}