{"version":3,"sources":["AnimatedValueXY.js"],"names":["AnimatedValue","require","AnimatedWithChildren","invariant","_uniqueId","AnimatedValueXY","valueIn","value","x","y","_listeners","setValue","offset","setOffset","flattenOffset","extractOffset","__getValue","callback","resetAnimation","stopAnimation","id","String","jointCallback","number","addListener","removeListener","removeAllListeners","left","top","translateX","translateY","module","exports"],"mappings":"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","file":"AnimatedValueXY.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule AnimatedValueXY\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedValue = require('./AnimatedValue');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\n\nconst invariant = require('fbjs/lib/invariant');\n\ntype ValueXYListenerCallback = (value: {x: number, y: number}) => void;\n\nlet _uniqueId = 1;\n\n/**\n * 2D Value for driving 2D animations, such as pan gestures. Almost identical\n * API to normal `Animated.Value`, but multiplexed.\n *\n * See http://facebook.github.io/react-native/docs/animatedvaluexy.html\n */\nclass AnimatedValueXY extends AnimatedWithChildren {\n  x: AnimatedValue;\n  y: AnimatedValue;\n  _listeners: {[key: string]: {x: string, y: string}};\n\n  constructor(\n    valueIn?: ?{+x: number | AnimatedValue, +y: number | AnimatedValue},\n  ) {\n    super();\n    const value: any = valueIn || {x: 0, y: 0}; // @flowfixme: shouldn't need `: any`\n    if (typeof value.x === 'number' && typeof value.y === 'number') {\n      this.x = new AnimatedValue(value.x);\n      this.y = new AnimatedValue(value.y);\n    } else {\n      invariant(\n        value.x instanceof AnimatedValue && value.y instanceof AnimatedValue,\n        'AnimatedValueXY must be initialized with an object of numbers or ' +\n          'AnimatedValues.',\n      );\n      this.x = value.x;\n      this.y = value.y;\n    }\n    this._listeners = {};\n  }\n\n  /**\n   * Directly set the value. This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#setvalue\n   */\n  setValue(value: {x: number, y: number}) {\n    this.x.setValue(value.x);\n    this.y.setValue(value.y);\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether\n   * via `setValue`, an animation, or `Animated.event`. Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#setoffset\n   */\n  setOffset(offset: {x: number, y: number}) {\n    this.x.setOffset(offset.x);\n    this.y.setOffset(offset.y);\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#flattenoffset\n   */\n  flattenOffset(): void {\n    this.x.flattenOffset();\n    this.y.flattenOffset();\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to\n   * zero. The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#extractoffset\n   */\n  extractOffset(): void {\n    this.x.extractOffset();\n    this.y.extractOffset();\n  }\n\n  __getValue(): {x: number, y: number} {\n    return {\n      x: this.x.__getValue(),\n      y: this.y.__getValue(),\n    };\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#resetanimation\n   */\n  resetAnimation(callback?: (value: {x: number, y: number}) => void): void {\n    this.x.resetAnimation();\n    this.y.resetAnimation();\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#stopanimation\n   */\n  stopAnimation(callback?: (value: {x: number, y: number}) => void): void {\n    this.x.stopAnimation();\n    this.y.stopAnimation();\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to synchronously read\n   * the value because it might be driven natively.\n   *\n   * Returns a string that serves as an identifier for the listener.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#addlistener\n   */\n  addListener(callback: ValueXYListenerCallback): string {\n    const id = String(_uniqueId++);\n    const jointCallback = ({value: number}) => {\n      callback(this.__getValue());\n    };\n    this._listeners[id] = {\n      x: this.x.addListener(jointCallback),\n      y: this.y.addListener(jointCallback),\n    };\n    return id;\n  }\n\n  /**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#removelistener\n   */\n  removeListener(id: string): void {\n    this.x.removeListener(this._listeners[id].x);\n    this.y.removeListener(this._listeners[id].y);\n    delete this._listeners[id];\n  }\n\n  /**\n   * Remove all registered listeners.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#removealllisteners\n   */\n  removeAllListeners(): void {\n    this.x.removeAllListeners();\n    this.y.removeAllListeners();\n    this._listeners = {};\n  }\n\n  /**\n   * Converts `{x, y}` into `{left, top}` for use in style.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#getlayout\n   */\n  getLayout(): {[key: string]: AnimatedValue} {\n    return {\n      left: this.x,\n      top: this.y,\n    };\n  }\n\n  /**\n   * Converts `{x, y}` into a useable translation transform.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#gettranslatetransform\n   */\n  getTranslateTransform(): Array<{[key: string]: AnimatedValue}> {\n    return [{translateX: this.x}, {translateY: this.y}];\n  }\n}\n\nmodule.exports = AnimatedValueXY;\n"]}