{"version":3,"sources":["VirtualizeUtils.js"],"names":["invariant","require","elementsThatOverlapOffsets","offsets","itemCount","getFrameMetrics","out","outLength","ii","frame","trailingOffset","offset","length","kk","JSON","stringify","newRangeCount","prev","next","last","first","Math","max","min","computeWindowedRenderLimits","props","getFrameMetricsApprox","scrollMetrics","data","getItemCount","maxToRenderPerBatch","windowSize","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","VirtualizeUtils","module","exports"],"mappings":"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","file":"VirtualizeUtils.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule VirtualizeUtils\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nfunction elementsThatOverlapOffsets(\n  offsets: Array<number>,\n  itemCount: number,\n  getFrameMetrics: (index: number) => {length: number, offset: number},\n): Array<number> {\n  const out = [];\n  let outLength = 0;\n  for (let ii = 0; ii < itemCount; ii++) {\n    const frame = getFrameMetrics(ii);\n    const trailingOffset = frame.offset + frame.length;\n    for (let kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n        if (kk === offsets.length - 1) {\n          invariant(\n            outLength === offsets.length,\n            'bad offsets input, should be in increasing order: %s',\n            JSON.stringify(offsets),\n          );\n          return out;\n        }\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nfunction newRangeCount(\n  prev: {first: number, last: number},\n  next: {first: number, last: number},\n): number {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nfunction computeWindowedRenderLimits(\n  props: {\n    data: any,\n    getItemCount: (data: any) => number,\n    maxToRenderPerBatch: number,\n    windowSize: number,\n  },\n  prev: {first: number, last: number},\n  getFrameMetricsApprox: (index: number) => {length: number, offset: number},\n  scrollMetrics: {\n    dt: number,\n    offset: number,\n    velocity: number,\n    visibleLength: number,\n  },\n): {first: number, last: number} {\n  const {data, getItemCount, maxToRenderPerBatch, windowSize} = props;\n  const itemCount = getItemCount(data);\n  if (itemCount === 0) {\n    return prev;\n  }\n  const {offset, velocity, visibleLength} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    props.getItemCount(props.data),\n    getFrameMetricsApprox,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n    const firstWillAddMore = first <= prev.first || first > prev.last;\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastWillAddMore = last >= prev.last || last < prev.first;\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nconst VirtualizeUtils = {\n  computeWindowedRenderLimits,\n  elementsThatOverlapOffsets,\n  newRangeCount,\n};\n\nmodule.exports = VirtualizeUtils;\n"]}